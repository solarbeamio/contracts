{
  "language": "Solidity",
  "sources": {
    "contracts/eclipse/CommonEclipse.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"../farm/SolarVault.sol\";\r\nimport \"./ICommonEclipse.sol\";\r\n\r\ncontract CommonEclipse is ICommonEclipse, ReentrancyGuard, Ownable {\r\n  using SafeERC20 for IERC20;\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                                STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    IERC20 public lpToken;\r\n    IERC20 public offeringToken;\r\n\r\n    SolarVault public vault;\r\n\r\n    uint8 public constant HARVEST_PERIODS = 4; // number of periods to split offering token to vest.\r\n\r\n    uint8 public constant NUMBER_VAULT_POOLS = 3; // number of solar vault pools to check for stake.\r\n\r\n    uint8 public constant NUMBER_THRESHOLDS = 3; // number of solar staked threshold for multipliers per pool.\r\n\r\n    uint256[HARVEST_PERIODS] public harvestReleaseBlocks;\r\n    uint256[HARVEST_PERIODS] public harvestReleasePercent;\r\n\r\n    uint256 public startBlock;\r\n\r\n    uint256 public endBlock;\r\n\r\n    uint256 public eligibilityThreshold; // minimum solar staked to be eligible.\r\n\r\n    bool public claimEnabled = false; // flag to enable harvests after liquidity is added.\r\n\r\n    /**\r\n     * @dev The struct stores the each pools base multiplier, and additional\r\n     * multipliers based on meeting staked threshold requirements.\r\n     */\r\n    struct Multipliers {\r\n        uint16[NUMBER_THRESHOLDS] poolThresholds;\r\n        uint8[NUMBER_VAULT_POOLS] poolBaseMult;\r\n        uint8[NUMBER_THRESHOLDS][NUMBER_VAULT_POOLS] poolMultipliers;\r\n    }\r\n\r\n    struct UserInfo {\r\n        uint256 amount; // How many tokens the user has provided for pool\r\n        uint256 allocPoints; // Used to weight user allocation based on amount locked in solar vaults\r\n        bool[HARVEST_PERIODS] claimed; // Whether the user has claimed (default: false) for pool\r\n        bool isRefunded; // Wheter the user has been refunded or not.\r\n    }\r\n\r\n    struct PoolInfo {\r\n        uint256 raisingAmount; // amount of tokens raised for the pool (in LP tokens)\r\n        uint256 offeringAmount; // amount of tokens offered for the pool (in offeringTokens)\r\n        uint256 baseLimitInLP; // base limit of tokens per eligible user (if 0, it is ignored)\r\n        bool hasTax; // if a pool is to be taxed on overflow or not\r\n        uint256 totalAmountPool; // total amount pool deposited (in LP tokens)\r\n        uint256 sumTaxesOverflow; // total taxes collected (starts at 0, increases with each harvest if overflow)\r\n        uint256 totalAllocPoints;\r\n    }\r\n\r\n    uint8 public constant numberPools = 2; // max number of pools that are to be created.\r\n\r\n    mapping(address => mapping(uint8 => UserInfo)) public userInfo;\r\n\r\n    PoolInfo[numberPools] public poolInfo;\r\n\r\n    Multipliers private _multiplierInfo;\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                                EVENTS\r\n    //////////////////////////////////////////////////////////////*/\r\n    event Deposit(address indexed user, uint256 amount, uint256 indexed pid);\r\n    event Withdraw(address indexed user, uint256 amount, uint256 indexed pid);\r\n    event Harvest(address indexed user, uint256 offeringAmount, uint256 excessAmount, uint8 indexed pid);\r\n    event NewStartAndEndBlocks(uint256 startBlock, uint256 endBlock);\r\n    event PoolParametersSet(uint256 raisingAmount, uint256 offeringAmount, uint8 pid);\r\n    event MultiplierParametersSet(\r\n        uint16[NUMBER_THRESHOLDS] poolStakedThresholds,\r\n        uint8[NUMBER_VAULT_POOLS] poolBaseMultiplier,\r\n        uint8[NUMBER_THRESHOLDS][NUMBER_VAULT_POOLS] poolStakedMultipliers\r\n        );\r\n    event AdminWithdraw(uint256 amountLP, uint256 amountOfferingToken);\r\n    event AdminTokenRecovery(address token, uint256 amount);\r\n    event ClaimEnabled();\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                               MODIFIERS\r\n    //////////////////////////////////////////////////////////////*/\r\n    /**\r\n     * @notice It checks if the current block is within the sale period.\r\n     */\r\n    modifier onlyWhenActive() {\r\n        require(\r\n            block.number >= startBlock && block.number < endBlock,\r\n            \"Sale not active\"\r\n        );\r\n        _;\r\n    }\r\n    /**\r\n     * @notice It checks if sale ended and claim is enabled\r\n     */\r\n    modifier onlyFinished() {\r\n        require(block.number >= endBlock && claimEnabled, \"sale not finished\");\r\n        _;\r\n    }\r\n    /*///////////////////////////////////////////////////////////////\r\n                              CONSTRUCTOR\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    constructor(\r\n        IERC20 _lpToken,\r\n        IERC20 _offeringToken,\r\n        uint256 _startBlock,\r\n        uint256 _endBlock,\r\n        uint256 _vestingBlockOffset, // Number of Blocks to offset for each harvest period\r\n        uint256 _eligibilityThreshold, // (1e18)\r\n        address _solarVault,\r\n        uint256[] memory _harvestReleasePercent,\r\n        bytes memory _multipliers\r\n    ){\r\n        require(_lpToken.totalSupply() >= 0);\r\n        require(_offeringToken.totalSupply() >= 0);\r\n        require(_lpToken != _offeringToken, \"Tokens must be different\");\r\n        require(_harvestReleasePercent.length == HARVEST_PERIODS, \"harvest schedule must match\");\r\n\r\n        uint256 totalPercent = 0;\r\n        for (uint256 i = 0; i < _harvestReleasePercent.length; i++) {\r\n            totalPercent += _harvestReleasePercent[i];\r\n        }\r\n\r\n        require(totalPercent == 10000, \"harvest percent must total 10000\");\r\n\r\n        lpToken = _lpToken;\r\n        offeringToken = _offeringToken;\r\n        startBlock = _startBlock;\r\n        endBlock = _endBlock;\r\n        eligibilityThreshold = _eligibilityThreshold;\r\n        vault = SolarVault(_solarVault);\r\n\r\n        _setMultipliers(_multipliers);\r\n\r\n        for (uint256 i = 0; i < HARVEST_PERIODS; i++) {\r\n            harvestReleaseBlocks[i] = endBlock + (_vestingBlockOffset * i);\r\n            harvestReleasePercent[i] = _harvestReleasePercent[i];\r\n        }\r\n    }\r\n\r\n    function setOfferingToken(IERC20 _offeringToken) public onlyOwner {\r\n        require(block.number < startBlock, \"sale is already active\");        \r\n        require(_offeringToken.totalSupply() >= 0);\r\n        offeringToken = _offeringToken;\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                            POOL MANAGEMENT\r\n    //////////////////////////////////////////////////////////////*/\r\n    /**\r\n     * @notice It sets the threshold of solar staked to be eligible to participate.\r\n     * @param _eligibilityThreshold: Number of solar staked to be eligibile. (1e18)\r\n     */\r\n    function setEligibilityThreshold(uint256 _eligibilityThreshold) public override onlyOwner {\r\n        require(block.number < startBlock, \"sale is already active\");\r\n        eligibilityThreshold = _eligibilityThreshold;\r\n    }\r\n    /**\r\n     * @notice It sets the multiplier matrix.\r\n     * @param _multipliers: abi encoded arrays\r\n     */\r\n    function setMultipliers(bytes memory _multipliers) public override onlyOwner {\r\n        require(block.number < startBlock, \"sale is already active\");\r\n        _setMultipliers(_multipliers);\r\n    }\r\n    /**\r\n     * @notice Private helper to set multiplier matrix.\r\n     */\r\n    function _setMultipliers(bytes memory _multipliers) private {\r\n        (\r\n            uint16[] memory thresholds,\r\n            uint8[] memory base,\r\n            uint8[][] memory mults\r\n\r\n            ) = abi.decode(_multipliers,(\r\n                uint16[],\r\n                uint8[],\r\n                uint8[][]\r\n            ));\r\n        require(\r\n            base.length == NUMBER_VAULT_POOLS && mults.length == NUMBER_VAULT_POOLS,\r\n            \"bad vault pool length\"\r\n        );\r\n        require(thresholds.length == NUMBER_THRESHOLDS ,\"bad threshold length\");\r\n\r\n        for (uint8 i = 0; i < NUMBER_THRESHOLDS; i++) {\r\n            _multiplierInfo.poolThresholds[i] =  thresholds[i];\r\n        }\r\n\r\n        for (uint8 i = 0; i < NUMBER_VAULT_POOLS; i++){\r\n            _multiplierInfo.poolBaseMult[i] = base[i];\r\n            require(mults[i].length == NUMBER_THRESHOLDS, \"bad threshold length\");\r\n            for ( uint8 j = 0; j < NUMBER_THRESHOLDS; j++) {\r\n               _multiplierInfo.poolMultipliers[i][j] =  mults[i][j];\r\n            }\r\n        }\r\n\r\n        emit MultiplierParametersSet(\r\n            _multiplierInfo.poolThresholds,\r\n            _multiplierInfo.poolBaseMult,\r\n            _multiplierInfo.poolMultipliers\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice It creates a pool.\r\n     * @dev If _baseLimitInLP is set to zero, the allocation will be weighted by allocation points. (see below)\r\n     * @param _raisingAmount: amount of LP token the pool aims to raise (1e18)\r\n     * @param _offeringAmount: amount of IDO tokens the pool is offering (1e18)\r\n     * @param _baseLimitInLP: base limit of tokens per eligible user (if 0, it is ignored) (1e18)\r\n     * @param _hasTax: true if a pool is to be taxed on overflow\r\n     * @param _pid: pool identification number\r\n     */\r\n    function setPool(\r\n        uint256 _raisingAmount,\r\n        uint256 _offeringAmount,\r\n        uint256 _baseLimitInLP,\r\n        bool _hasTax,\r\n        uint8 _pid\r\n    ) external override onlyOwner{\r\n        require(block.number < startBlock, \"sale is already active\");\r\n        require(_pid < numberPools, \"pool does not exist\");\r\n\r\n        poolInfo[_pid].raisingAmount = _raisingAmount;\r\n        poolInfo[_pid].offeringAmount = _offeringAmount;\r\n        poolInfo[_pid].baseLimitInLP = _baseLimitInLP;\r\n        poolInfo[_pid].hasTax = _hasTax;\r\n\r\n        emit PoolParametersSet(_offeringAmount, _raisingAmount, _pid);\r\n    }\r\n    /**\r\n     * @notice It sets the start and end blocks of the sale.\r\n     */\r\n    function updateStartAndEndBlocks(uint256 _startBlock, uint256 _endBlock) external override onlyOwner {\r\n        require(block.number < startBlock, \"sale is already active\");\r\n        require(_startBlock < _endBlock, \"new startBlock must be lower than new endBlock\");\r\n        require(block.number < _startBlock, \"New startBlock must be higher than current block\");\r\n\r\n        startBlock = _startBlock;\r\n        endBlock = _endBlock;\r\n\r\n        emit NewStartAndEndBlocks(_startBlock, _endBlock);\r\n    }\r\n    /**\r\n     * @notice It allows the owner to withdraw LPtokens and Offering tokens after the sale\r\n     * @dev can only withdraw after the sale is finished\r\n     * @param _lpAmount: amount of LP token to withdraw\r\n     * @param _offerAmount: amount of IDO tokens to withdraw\r\n     */\r\n    function finalWithdraw(uint256 _lpAmount, uint256 _offerAmount) external override onlyOwner {\r\n        require(block.number > endBlock, \"sale has not finished\");\r\n        require(_lpAmount <= lpToken.balanceOf(address(this)), \"Not enough LP tokens\");\r\n        require(_offerAmount <= offeringToken.balanceOf(address(this)), \"Not enough offering tokens\");\r\n\r\n        if (_lpAmount > 0) {\r\n            lpToken.safeTransfer(address(msg.sender), _lpAmount);\r\n        }\r\n\r\n        if (_offerAmount > 0) {\r\n            offeringToken.safeTransfer(address(msg.sender), _offerAmount);\r\n        }\r\n\r\n        emit AdminWithdraw(_lpAmount, _offerAmount);\r\n    }\r\n    /**\r\n     * @notice It allows the owner to withdraw ERC20 tokens\r\n     * @dev cannot withdraw LP tokens or Offering tokens\r\n     * @param _tokenAddress: address of ERC20 token to withdraw\r\n     * @param _amount: amount to withdraw\r\n     */\r\n    function sweep(address _tokenAddress, uint256 _amount) external onlyOwner {\r\n        require(\r\n            _tokenAddress != address(lpToken) && _tokenAddress != address(offeringToken),\r\n            \"Cannot be LP or Offering token\"\r\n        );\r\n        IERC20(_tokenAddress).safeTransfer(address(msg.sender), _amount);\r\n\r\n        emit AdminTokenRecovery(_tokenAddress, _amount);\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                            DEPOSIT LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n    /**\r\n     * @notice It lets users deposit into a pool for a share of offering tokens\r\n     * @dev cannot withdraw LP tokens or Offering tokens\r\n     * @param _amount: amount of LP tokens to deposit\r\n     * @param _pid: pool to depoist in\r\n     */\r\n    function depositPool(uint256 _amount, uint8 _pid) external override onlyWhenActive nonReentrant {\r\n        UserInfo storage user = userInfo[msg.sender][_pid];\r\n\r\n        require(_pid < numberPools, \"pool does not exist\");\r\n\r\n        require(\r\n            poolInfo[_pid].offeringAmount > 0 && poolInfo[_pid].raisingAmount > 0,\r\n            \"Pool not set\"\r\n        );\r\n\r\n        for (uint8 i = 0; i < numberPools; i++) {\r\n          if (i != _pid) {\r\n            require(userInfo[msg.sender][i].amount == 0, \"already commited in another pool\");\r\n          }\r\n        }\r\n\r\n        for (uint256 i=0; i<NUMBER_VAULT_POOLS; i++) {\r\n            vault.deposit(i,0);\r\n        }\r\n        (bool success) = getUserEligibility(address(msg.sender));\r\n        require(success, \"user not eligible\");\r\n\r\n        lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\r\n\r\n        user.amount += _amount;\r\n\r\n        if (poolInfo[_pid].baseLimitInLP > 0) {\r\n            (uint16 multiplier) = getUserMultiplier(msg.sender);\r\n            require(\r\n                user.amount <= (poolInfo[_pid].baseLimitInLP * uint256(multiplier)), \"New amount above user limit\"\r\n            );\r\n        } else {\r\n            (uint16 multiplier) = getUserMultiplier(msg.sender);\r\n            poolInfo[_pid].totalAllocPoints -= userInfo[msg.sender][_pid].allocPoints;\r\n            userInfo[msg.sender][_pid].allocPoints = user.amount * uint256(multiplier);\r\n            poolInfo[_pid].totalAllocPoints += userInfo[msg.sender][_pid].allocPoints;\r\n        }\r\n        poolInfo[_pid].totalAmountPool += _amount;\r\n\r\n        emit Deposit(msg.sender,_amount,_pid);\r\n\r\n    }\r\n\r\n\r\n    function getUserEligibility(address _user) public view returns(bool) {\r\n        uint256 amount;\r\n\r\n        for (uint256 i=0; i<NUMBER_VAULT_POOLS; i++) {\r\n            (amount,,,,) = vault.userInfo(i,_user);\r\n            if(amount >= eligibilityThreshold) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    function getUserMultiplier(address _user) public view returns(uint16) {\r\n        uint16 userMult;\r\n        uint16 mult;\r\n        uint256 amount;\r\n        for (uint8 i=0; i<NUMBER_VAULT_POOLS; i++) {\r\n            (amount,,,,) = vault.userInfo(i,_user);\r\n            for (uint8 j=0; j<NUMBER_THRESHOLDS; j++) {\r\n                mult = uint16(_multiplierInfo.poolBaseMult[i]) * uint16(_multiplierInfo.poolMultipliers[i][j]);\r\n                if(amount >= uint256(_multiplierInfo.poolThresholds[j])*1e18) {\r\n                    if(mult > userMult) {\r\n                        userMult = mult;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return (userMult);\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                            WITHDRAW LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n    function withdrawPool(uint256 _amount, uint8 _pid)\r\n        external\r\n        override\r\n        nonReentrant\r\n        onlyWhenActive\r\n    {\r\n        UserInfo storage user = userInfo[msg.sender][_pid];\r\n        require(_pid < numberPools, \"pool does not exist\");\r\n        require(\r\n            poolInfo[_pid].offeringAmount > 0 &&\r\n                poolInfo[_pid].raisingAmount > 0,\r\n            \"pool not set\"\r\n        );\r\n\r\n        require(\r\n            _amount > 0 && user.amount > 0 && user.amount >= _amount,\r\n            \"withdraw: amount higher than user balance\"\r\n        );\r\n\r\n        user.amount -= _amount;\r\n        poolInfo[_pid].totalAmountPool -= _amount;\r\n\r\n        if (poolInfo[_pid].baseLimitInLP == 0) {\r\n            (uint16 multiplier) = getUserMultiplier(msg.sender);\r\n            poolInfo[_pid].totalAllocPoints -= userInfo[msg.sender][_pid].allocPoints;\r\n            userInfo[msg.sender][_pid].allocPoints = user.amount * uint256(multiplier);\r\n            poolInfo[_pid].totalAllocPoints += userInfo[msg.sender][_pid].allocPoints;\r\n        }\r\n\r\n        lpToken.safeTransfer(address(msg.sender), _amount);\r\n\r\n        emit Withdraw(msg.sender, _amount, _pid);\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                            HARVEST LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n    function harvestPool(uint8 _pid, uint8 _harvestPeriod) external override nonReentrant onlyFinished {\r\n        require(_pid < numberPools, \"pool does not exist\");\r\n        require(_harvestPeriod < HARVEST_PERIODS, \"harvest period out of range\");\r\n        require(block.number > harvestReleaseBlocks[_harvestPeriod], \"not harvest time\");\r\n        require(userInfo[msg.sender][_pid].amount > 0, \"did not participate\");\r\n        require(!userInfo[msg.sender][_pid].claimed[_harvestPeriod], \"harvest for period already claimed\");\r\n\r\n        userInfo[msg.sender][_pid].claimed[_harvestPeriod] = true;\r\n\r\n        uint256 offeringTokenAmount;\r\n        uint256 refundingTokenAmount;\r\n        uint256 userTaxOverflow;\r\n        (offeringTokenAmount, refundingTokenAmount, userTaxOverflow) = _calcOfferingAndRefundingAmounts(\r\n            msg.sender,\r\n            _pid\r\n        );\r\n        if (userTaxOverflow > 0 && !userInfo[msg.sender][_pid].isRefunded) {\r\n            poolInfo[_pid].sumTaxesOverflow += userTaxOverflow;\r\n        }\r\n        if (refundingTokenAmount > 0 && !userInfo[msg.sender][_pid].isRefunded) {\r\n            userInfo[msg.sender][_pid].isRefunded = true;\r\n            lpToken.safeTransfer(address(msg.sender), refundingTokenAmount);\r\n        }\r\n\r\n        uint256 offeringTokenAmountPerPeriod;\r\n        if (offeringTokenAmount > 0) {\r\n            offeringTokenAmountPerPeriod = offeringTokenAmount * harvestReleasePercent[_harvestPeriod] / 1e4;\r\n            offeringToken.safeTransfer(address(msg.sender), offeringTokenAmountPerPeriod);\r\n        }\r\n        userInfo[msg.sender][_pid].claimed[_harvestPeriod] = true;\r\n\r\n        emit Harvest(msg.sender, offeringTokenAmountPerPeriod, refundingTokenAmount,_pid);\r\n\r\n\r\n    }\r\n\r\n    function _calcOfferingAndRefundingAmounts(address _user, uint8 _pid)\r\n        internal\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 userOfferingAmount;\r\n        uint256 userRefundingAmount;\r\n        uint256 taxAmount;\r\n\r\n        if (poolInfo[_pid].totalAmountPool > poolInfo[_pid].raisingAmount) {\r\n\r\n            uint256 allocation = _getUserAllocation(_user,_pid);\r\n\r\n            userOfferingAmount = poolInfo[_pid].offeringAmount * allocation / 1e12;\r\n\r\n            uint256 payAmount = poolInfo[_pid].raisingAmount * userInfo[_user][_pid].amount * 1e18 / poolInfo[_pid].totalAmountPool  / 1e18;\r\n\r\n            userRefundingAmount = userInfo[_user][_pid].amount - payAmount;\r\n            if (poolInfo[_pid].hasTax) {\r\n                uint256 taxOverflow =\r\n                    _calculateTaxOverflow(\r\n                        poolInfo[_pid].totalAmountPool,\r\n                        poolInfo[_pid].raisingAmount\r\n                    );\r\n                taxAmount = userRefundingAmount * taxOverflow / 1e12;\r\n\r\n                userRefundingAmount -= taxAmount;\r\n            }\r\n        } else {\r\n            userRefundingAmount = 0;\r\n            taxAmount = 0;\r\n            if (poolInfo[_pid].baseLimitInLP > 0) {\r\n                userOfferingAmount = userInfo[_user][_pid].amount * poolInfo[_pid].offeringAmount / poolInfo[_pid].raisingAmount;\r\n            } else {\r\n                userOfferingAmount = poolInfo[_pid].offeringAmount * _getUserAllocation(_user,_pid) / 1e12;\r\n            }\r\n        }\r\n        return (userOfferingAmount, userRefundingAmount, taxAmount);\r\n    }\r\n    /**\r\n     * @notice It returns the user allocation for pool\r\n     * @dev (1e8) 10,000,000 means 0.1 (10%) / 1 means 0.000000001 (0.0000001%) / 100,000,000 means 1 (100%)\r\n     * @param _user: user address\r\n     * @param _pid: pool id\r\n     * @return it returns the user's share of pool\r\n     */\r\n    function _getUserAllocation(address _user, uint8 _pid) view internal  returns (uint256) {\r\n        if (poolInfo[_pid].totalAmountPool > 0) {\r\n            if(poolInfo[_pid].baseLimitInLP > 0) {\r\n                return userInfo[_user][_pid].amount * 1e18 / poolInfo[_pid].totalAmountPool / 1e6;\r\n            } else {\r\n                return userInfo[_user][_pid].allocPoints * 1e18 / poolInfo[_pid].totalAllocPoints / 1e6;\r\n            }\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice It calculates the tax overflow given the raisingAmountPool and the totalAmountPool.\r\n     * @dev 100,000,000,000 means 0.1 (10%) / 1 means 0.0000000000001 (0.0000001%) / 1,000,000,000,000 means 1 (100%)\r\n     * @return It returns the tax percentage\r\n     */\r\n    function _calculateTaxOverflow(uint256 _totalAmountPool, uint256 _raisingAmountPool)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        uint256 ratioOverflow = _totalAmountPool / _raisingAmountPool;\r\n\r\n        if (ratioOverflow >= 500) {\r\n            return 2000000000; // 0.2%\r\n        } else if (ratioOverflow >= 250) {\r\n            return 2500000000; // 0.25%\r\n        } else if (ratioOverflow >= 100) {\r\n            return 3000000000; // 0.3%\r\n        } else if (ratioOverflow >= 50) {\r\n            return 5000000000; // 0.5%\r\n        } else {\r\n            return 10000000000; // 1%\r\n        }\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                            PUBLIC GETTERS\r\n    //////////////////////////////////////////////////////////////*/\r\n    function hasHarvested(address _user, uint8 _pid, uint8 _harvestPeriod) public view returns (bool) {\r\n        return userInfo[_user][_pid].claimed[_harvestPeriod];\r\n    }\r\n\r\n    /**\r\n     * @notice It returns the tax overflow rate calculated for a pool\r\n     * @dev 100,000,000,000 means 0.1 (10%) / 1 means 0.0000000000001 (0.0000001%) / 1,000,000,000,000 means 1 (100%)\r\n     * @param _pid: poolId\r\n     * @return It returns the tax percentage\r\n     */\r\n    function viewPoolTaxRateOverflow(uint256 _pid) external view override returns (uint256) {\r\n        if (!poolInfo[_pid].hasTax) {\r\n            return 0;\r\n        } else {\r\n            return\r\n                _calculateTaxOverflow(poolInfo[_pid].totalAmountPool, poolInfo[_pid].raisingAmount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice External view function to see user allocations for both pools\r\n     * @param _user: user address\r\n     * @param _pids[]: array of pids\r\n     * @return\r\n     */\r\n    function viewUserAllocationPools(address _user, uint8[] calldata _pids)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256[] memory)\r\n    {\r\n        uint256[] memory allocationPools = new uint256[](_pids.length);\r\n        for (uint8 i = 0; i < _pids.length; i++) {\r\n            allocationPools[i] = _getUserAllocation(_user, _pids[i]);\r\n        }\r\n        return allocationPools;\r\n    }\r\n\r\n    /**\r\n     * @notice External view function to see user offering and refunding amounts for both pools\r\n     * @param _user: user address\r\n     * @param _pids: array of pids\r\n     */\r\n    function viewUserOfferingAndRefundingAmountsForPools(address _user, uint8[] calldata _pids)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256[3][] memory)\r\n    {\r\n        uint256[3][] memory amountPools = new uint256[3][](_pids.length);\r\n\r\n        for (uint8 i = 0; i < _pids.length; i++) {\r\n            uint256 userOfferingAmountPool;\r\n            uint256 userRefundingAmountPool;\r\n            uint256 userTaxAmountPool;\r\n\r\n            if (poolInfo[_pids[i]].raisingAmount > 0) {\r\n                (\r\n                    userOfferingAmountPool,\r\n                    userRefundingAmountPool,\r\n                    userTaxAmountPool\r\n                ) = _calcOfferingAndRefundingAmounts(_user, _pids[i]);\r\n            }\r\n\r\n            amountPools[i] = [userOfferingAmountPool, userRefundingAmountPool, userTaxAmountPool];\r\n        }\r\n        return amountPools;\r\n    }\r\n\r\n    function viewMultipliers()\r\n        public\r\n        view\r\n        returns(\r\n            uint16[] memory,\r\n            uint8[] memory,\r\n            uint8[][] memory\r\n        )\r\n    {\r\n        uint16[] memory _poolThresholds = new uint16[](_multiplierInfo.poolThresholds.length);\r\n        for (uint16 i = 0; i < _multiplierInfo.poolThresholds.length ;i++) {\r\n            _poolThresholds[i] = _multiplierInfo.poolThresholds[i];\r\n        }\r\n\r\n        uint8[] memory _poolBaseMult = new uint8[](_multiplierInfo.poolBaseMult.length);\r\n        for (uint8 i = 0; i < _multiplierInfo.poolBaseMult.length ;i++) {\r\n            _poolBaseMult[i] = _multiplierInfo.poolBaseMult[i];\r\n        }\r\n\r\n        uint8[][] memory _poolMultipliers = new uint8[][](_multiplierInfo.poolMultipliers.length);\r\n        for (uint8 i = 0; i < _multiplierInfo.poolMultipliers.length;i++) {\r\n            _poolMultipliers[i] = new uint8[](_multiplierInfo.poolMultipliers[i].length);\r\n            for (uint8 j = 0;j < _multiplierInfo.poolMultipliers[i].length;j++) {\r\n                _poolMultipliers[i][j] = _multiplierInfo.poolMultipliers[i][j];\r\n            }\r\n        }\r\n\r\n        return(\r\n            _poolThresholds,\r\n            _poolBaseMult,\r\n            _poolMultipliers\r\n        );\r\n    }\r\n\r\n    function enableClaim() external override onlyOwner {\r\n        require(block.number >= endBlock, \"sale still active\");\r\n        require(!claimEnabled, \"claim is already enabled\");\r\n\r\n        claimEnabled = true;\r\n\r\n        emit ClaimEnabled();\r\n    }\r\n\r\n}\r\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/farm/SolarVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.2;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"./ISolarERC20.sol\";\r\n\r\ncontract SolarVault is Ownable, ReentrancyGuard {\r\n    address constant _trustedForwarder =\r\n        0x0D0b4862F5FfA3A47D04DDf0351356d20C830460; //Trusted forwarder\r\n\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    // Info of each user.\r\n    struct UserInfo {\r\n        uint256 amount; // How many LP tokens the user has provided.\r\n        uint256 rewardDebt; // Reward debt. See explanation below.\r\n        uint256 rewardLockedUp; // Reward locked up.\r\n        uint256 nextHarvestUntil; // When can the user harvest again.\r\n        uint256 lastInteraction; // Last time when user deposited or claimed rewards, renewing the lock\r\n    }\r\n\r\n    // Info of each pool.\r\n    struct PoolInfo {\r\n        IERC20 lpToken; // Address of LP token contract\r\n        uint256 allocPoint; // How many allocation points assigned to this pool. Solar to distribute per block.\r\n        uint256 lastRewardBlock; // Last block number that Solar distribution occurs.\r\n        uint256 accSolarPerShare; // Accumulated Solar per share, times 1e12. See below.\r\n        uint16 depositFeeBP; // Deposit fee in basis points\r\n        uint256 harvestInterval; // Harvest interval in seconds\r\n        uint256 totalLp; // Total token in Pool\r\n        uint256 lockupDuration; // Amount of time the participant will be locked in the pool after depositing or claiming rewards\r\n    }\r\n\r\n    ISolarERC20 public solar;\r\n\r\n    // The operator can only update EmissionRate and AllocPoint to protect tokenomics\r\n    //i.e some wrong setting and a pools get too much allocation accidentally\r\n    address private _operator;\r\n\r\n    // Dev address.\r\n    address public devAddress;\r\n\r\n    // Deposit Fee address\r\n    address public feeAddress;\r\n\r\n    // Solar tokens created per block\r\n    uint256 public solarPerBlock;\r\n\r\n    // Max harvest interval: 14 days\r\n    uint256 public constant MAXIMUM_HARVEST_INTERVAL = 14 days;\r\n\r\n    // Maximum deposit fee rate: 10%\r\n    uint16 public constant MAXIMUM_DEPOSIT_FEE_RATE = 1000;\r\n\r\n    // Info of each pool\r\n    PoolInfo[] public poolInfo;\r\n\r\n    // Info of each user that stakes LP tokens.\r\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\r\n\r\n    // Total allocation points. Must be the sum of all allocation points in all pools.\r\n    uint256 public totalAllocPoint = 0;\r\n\r\n    // The block number when Solar mining starts.\r\n    uint256 public startBlock;\r\n\r\n    // Total locked up rewards\r\n    uint256 public totalLockedUpRewards;\r\n\r\n    // Total Solar in Solar Pools (can be multiple pools)\r\n    uint256 public totalSolarInPools = 0;\r\n\r\n    // Control support for EIP-2771 Meta Transactions\r\n    bool public metaTxnsEnabled = false;\r\n\r\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event EmergencyWithdraw(\r\n        address indexed user,\r\n        uint256 indexed pid,\r\n        uint256 amount\r\n    );\r\n    event EmissionRateUpdated(\r\n        address indexed caller,\r\n        uint256 previousAmount,\r\n        uint256 newAmount\r\n    );\r\n    event RewardLockedUp(\r\n        address indexed user,\r\n        uint256 indexed pid,\r\n        uint256 amountLockedUp\r\n    );\r\n    event OperatorTransferred(\r\n        address indexed previousOperator,\r\n        address indexed newOperator\r\n    );\r\n    event DevAddressChanged(\r\n        address indexed caller,\r\n        address oldAddress,\r\n        address newAddress\r\n    );\r\n    event FeeAddressChanged(\r\n        address indexed caller,\r\n        address oldAddress,\r\n        address newAddress\r\n    );\r\n    event AllocPointsUpdated(\r\n        address indexed caller,\r\n        uint256 previousAmount,\r\n        uint256 newAmount\r\n    );\r\n    event MetaTxnsEnabled(address indexed caller);\r\n    event MetaTxnsDisabled(address indexed caller);\r\n\r\n    modifier onlyOperator() {\r\n        require(\r\n            _operator == msg.sender,\r\n            \"Operator: caller is not the operator\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor(ISolarERC20 _solar, uint256 _solarPerBlock) {\r\n        //StartBlock always many years later from contract construct, will be set later in StartFarming function\r\n        startBlock = block.number + (10 * 365 * 24 * 60 * 60);\r\n\r\n        solar = _solar;\r\n        solarPerBlock = _solarPerBlock;\r\n\r\n        devAddress = msg.sender;\r\n        feeAddress = msg.sender;\r\n        _operator = msg.sender;\r\n        emit OperatorTransferred(address(0), _operator);\r\n    }\r\n\r\n    function isTrustedForwarder(address forwarder)\r\n        public\r\n        view\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        return metaTxnsEnabled && forwarder == _trustedForwarder;\r\n    }\r\n\r\n    function _msgSender()\r\n        internal\r\n        view\r\n        virtual\r\n        override\r\n        returns (address sender)\r\n    {\r\n        if (isTrustedForwarder(msg.sender)) {\r\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\r\n            assembly {\r\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\r\n            }\r\n        } else {\r\n            return super._msgSender();\r\n        }\r\n    }\r\n\r\n    function _msgData()\r\n        internal\r\n        view\r\n        virtual\r\n        override\r\n        returns (bytes calldata)\r\n    {\r\n        if (isTrustedForwarder(msg.sender)) {\r\n            return msg.data[:msg.data.length - 20];\r\n        } else {\r\n            return super._msgData();\r\n        }\r\n    }\r\n\r\n    function operator() public view returns (address) {\r\n        return _operator;\r\n    }\r\n\r\n    // Return reward multiplier over the given _from to _to block.\r\n    function getMultiplier(uint256 _from, uint256 _to)\r\n        public\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return _to.sub(_from);\r\n    }\r\n\r\n    function transferOperator(address newOperator) public onlyOperator {\r\n        require(\r\n            newOperator != address(0),\r\n            \"TransferOperator: new operator is the zero address\"\r\n        );\r\n        emit OperatorTransferred(_operator, newOperator);\r\n        _operator = newOperator;\r\n    }\r\n\r\n    // Set farming start, can call only once\r\n    function startFarming() public onlyOwner {\r\n        require(block.number < startBlock, \"Error: farm started already\");\r\n\r\n        uint256 length = poolInfo.length;\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            PoolInfo storage pool = poolInfo[pid];\r\n            pool.lastRewardBlock = block.number;\r\n        }\r\n\r\n        startBlock = block.number;\r\n    }\r\n\r\n    function poolLength() external view returns (uint256) {\r\n        return poolInfo.length;\r\n    }\r\n\r\n    // Add a new lp to the pool. Can only be called by the owner.\r\n    // Can add multiple pool with same lp token without messing up rewards, because each pool's balance is tracked using its own totalLp\r\n    function add(\r\n        uint256 _allocPoint,\r\n        IERC20 _lpToken,\r\n        uint16 _depositFeeBP,\r\n        uint256 _harvestInterval,\r\n        uint256 _lockupDuration,\r\n        bool _withUpdate\r\n    ) public onlyOwner {\r\n        require(\r\n            _depositFeeBP <= MAXIMUM_DEPOSIT_FEE_RATE,\r\n            \"Add: deposit fee too high\"\r\n        );\r\n        require(\r\n            _harvestInterval <= MAXIMUM_HARVEST_INTERVAL,\r\n            \"Add: invalid harvest interval\"\r\n        );\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        uint256 lastRewardBlock = block.number > startBlock\r\n            ? block.number\r\n            : startBlock;\r\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\r\n        poolInfo.push(\r\n            PoolInfo({\r\n                lpToken: _lpToken,\r\n                allocPoint: _allocPoint,\r\n                lastRewardBlock: lastRewardBlock,\r\n                accSolarPerShare: 0,\r\n                depositFeeBP: _depositFeeBP,\r\n                harvestInterval: _harvestInterval,\r\n                totalLp: 0,\r\n                lockupDuration: _lockupDuration\r\n            })\r\n        );\r\n    }\r\n\r\n    // View function to see pending Solar on frontend.\r\n    function pendingSolar(uint256 _pid, address _user)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        uint256 accSolarPerShare = pool.accSolarPerShare;\r\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\r\n\r\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\r\n            uint256 multiplier = getMultiplier(\r\n                pool.lastRewardBlock,\r\n                block.number\r\n            );\r\n            uint256 solarReward = multiplier\r\n                .mul(solarPerBlock)\r\n                .mul(pool.allocPoint)\r\n                .div(totalAllocPoint);\r\n            accSolarPerShare = accSolarPerShare.add(\r\n                solarReward.mul(1e12).div(lpSupply)\r\n            );\r\n        }\r\n\r\n        uint256 pending = user.amount.mul(accSolarPerShare).div(1e12).sub(\r\n            user.rewardDebt\r\n        );\r\n        return pending.add(user.rewardLockedUp);\r\n    }\r\n\r\n    // View function to see when user will be unlocked from pool\r\n    function userLockedUntil(uint256 _pid, address _user)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n\r\n        return user.lastInteraction + pool.lockupDuration;\r\n    }\r\n\r\n    // View function to see if user can harvest Solar.\r\n    function canHarvest(uint256 _pid, address _user)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        return\r\n            block.number >= startBlock &&\r\n            block.timestamp >= user.nextHarvestUntil;\r\n    }\r\n\r\n    // Update reward vairables for all pools. Be careful of gas spending!\r\n    function massUpdatePools() public {\r\n        uint256 length = poolInfo.length;\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            updatePool(pid);\r\n        }\r\n    }\r\n\r\n    // Update reward variables of the given pool to be up-to-date.\r\n    function updatePool(uint256 _pid) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        if (block.number <= pool.lastRewardBlock) {\r\n            return;\r\n        }\r\n\r\n        uint256 lpSupply = pool.totalLp;\r\n        if (lpSupply == 0 || pool.allocPoint == 0) {\r\n            pool.lastRewardBlock = block.number;\r\n            return;\r\n        }\r\n\r\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\r\n        uint256 solarReward = multiplier\r\n            .mul(solarPerBlock)\r\n            .mul(pool.allocPoint)\r\n            .div(totalAllocPoint);\r\n\r\n        solar.mint(devAddress, solarReward.div(10));\r\n        solar.mint(address(this), solarReward);\r\n\r\n        pool.accSolarPerShare = pool.accSolarPerShare.add(\r\n            solarReward.mul(1e12).div(pool.totalLp)\r\n        );\r\n        pool.lastRewardBlock = block.number;\r\n    }\r\n\r\n    // Deposit LP tokens to SolarVault for Solar allocation\r\n    function deposit(uint256 _pid, uint256 _amount) public nonReentrant {\r\n        require(\r\n            block.number >= startBlock,\r\n            \"SolarVault: cannot deposit before farming start\"\r\n        );\r\n\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_msgSender()];\r\n\r\n        updatePool(_pid);\r\n\r\n        payOrLockupPendingSolar(_pid);\r\n\r\n        if (_amount > 0) {\r\n            uint256 beforeDeposit = pool.lpToken.balanceOf(address(this));\r\n            pool.lpToken.safeTransferFrom(_msgSender(), address(this), _amount);\r\n            uint256 afterDeposit = pool.lpToken.balanceOf(address(this));\r\n\r\n            _amount = afterDeposit.sub(beforeDeposit);\r\n\r\n            if (pool.depositFeeBP > 0) {\r\n                uint256 depositFee = _amount.mul(pool.depositFeeBP).div(10000);\r\n                pool.lpToken.safeTransfer(feeAddress, depositFee);\r\n\r\n                _amount = _amount.sub(depositFee);\r\n            }\r\n\r\n            user.amount = user.amount.add(_amount);\r\n            pool.totalLp = pool.totalLp.add(_amount);\r\n\r\n            if (address(pool.lpToken) == address(solar)) {\r\n                totalSolarInPools = totalSolarInPools.add(_amount);\r\n            }\r\n        }\r\n        user.rewardDebt = user.amount.mul(pool.accSolarPerShare).div(1e12);\r\n        user.lastInteraction = block.timestamp;\r\n        emit Deposit(_msgSender(), _pid, _amount);\r\n    }\r\n\r\n    // Withdraw tokens\r\n    function withdraw(uint256 _pid, uint256 _amount) public nonReentrant {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_msgSender()];\r\n\r\n        //this will make sure that user can only withdraw from his pool\r\n        require(user.amount >= _amount, \"Withdraw: user amount is not enough\");\r\n\r\n        //Cannot withdraw more than pool's balance\r\n        require(pool.totalLp >= _amount, \"Withdraw: pool total is not enough\");\r\n\r\n        //Cannot withdraw before lock time\r\n        require(\r\n            block.timestamp > user.lastInteraction + pool.lockupDuration,\r\n            \"Withdraw: you cannot withdraw yet\"\r\n        );\r\n\r\n        updatePool(_pid);\r\n\r\n        payOrLockupPendingSolar(_pid);\r\n\r\n        if (_amount > 0) {\r\n            user.amount = user.amount.sub(_amount);\r\n            pool.totalLp = pool.totalLp.sub(_amount);\r\n            if (address(pool.lpToken) == address(solar)) {\r\n                totalSolarInPools = totalSolarInPools.sub(_amount);\r\n            }\r\n            pool.lpToken.safeTransfer(_msgSender(), _amount);\r\n        }\r\n        user.rewardDebt = user.amount.mul(pool.accSolarPerShare).div(1e12);\r\n        user.lastInteraction = block.timestamp;\r\n        emit Withdraw(_msgSender(), _pid, _amount);\r\n    }\r\n\r\n    // Pay or lockup pending Solar.\r\n    function payOrLockupPendingSolar(uint256 _pid) internal {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_msgSender()];\r\n\r\n        if (user.nextHarvestUntil == 0 && block.number >= startBlock) {\r\n            user.nextHarvestUntil = block.timestamp.add(pool.harvestInterval);\r\n        }\r\n\r\n        uint256 pending = user.amount.mul(pool.accSolarPerShare).div(1e12).sub(\r\n            user.rewardDebt\r\n        );\r\n        if (canHarvest(_pid, _msgSender())) {\r\n            if (pending > 0 || user.rewardLockedUp > 0) {\r\n                uint256 totalRewards = pending.add(user.rewardLockedUp);\r\n\r\n                // reset lockup\r\n                totalLockedUpRewards = totalLockedUpRewards.sub(\r\n                    user.rewardLockedUp\r\n                );\r\n                user.rewardLockedUp = 0;\r\n                user.lastInteraction = block.timestamp;\r\n                user.nextHarvestUntil = block.timestamp.add(\r\n                    pool.harvestInterval\r\n                );\r\n\r\n                // send rewards\r\n                safeSolarTransfer(_msgSender(), totalRewards);\r\n            }\r\n        } else if (pending > 0) {\r\n            user.rewardLockedUp = user.rewardLockedUp.add(pending);\r\n            user.lastInteraction = block.timestamp;\r\n            totalLockedUpRewards = totalLockedUpRewards.add(pending);\r\n            emit RewardLockedUp(_msgSender(), _pid, pending);\r\n        }\r\n    }\r\n\r\n    // Safe Solar transfer function, just in case if rounding error causes pool do not have enough Solar.\r\n    function safeSolarTransfer(address _to, uint256 _amount) internal {\r\n        if (solar.balanceOf(address(this)) > totalSolarInPools) {\r\n            //SolarBal = total Solar in SolarVault - total Solar in Solar pools, this will make sure that SolarVault never transfer rewards from deposited Solar pools\r\n            uint256 SolarBal = solar.balanceOf(address(this)).sub(\r\n                totalSolarInPools\r\n            );\r\n            if (_amount >= SolarBal) {\r\n                solar.transfer(_to, SolarBal);\r\n            } else if (_amount > 0) {\r\n                solar.transfer(_to, _amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Update dev address by the previous dev.\r\n    function setDevAddress(address _devAddress) public {\r\n        require(_msgSender() == devAddress, \"setDevAddress: FORBIDDEN\");\r\n        require(_devAddress != address(0), \"setDevAddress: ZERO\");\r\n\r\n        emit DevAddressChanged(_msgSender(), devAddress, _devAddress);\r\n\r\n        devAddress = _devAddress;\r\n    }\r\n\r\n    function setFeeAddress(address _feeAddress) public {\r\n        require(_msgSender() == feeAddress, \"setFeeAddress: FORBIDDEN\");\r\n        require(_feeAddress != address(0), \"setFeeAddress: ZERO\");\r\n\r\n        emit FeeAddressChanged(_msgSender(), feeAddress, _feeAddress);\r\n\r\n        feeAddress = _feeAddress;\r\n    }\r\n\r\n    // Pancake has to add hidden dummy pools in order to alter the emission, here we make it simple and transparent to all.\r\n    function updateEmissionRate(uint256 _solarPerBlock) public onlyOperator {\r\n        massUpdatePools();\r\n\r\n        emit EmissionRateUpdated(msg.sender, solarPerBlock, _solarPerBlock);\r\n        solarPerBlock = _solarPerBlock;\r\n    }\r\n\r\n    function updateAllocPoint(\r\n        uint256 _pid,\r\n        uint256 _allocPoint,\r\n        bool _withUpdate\r\n    ) public onlyOperator {\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n\r\n        emit AllocPointsUpdated(\r\n            _msgSender(),\r\n            poolInfo[_pid].allocPoint,\r\n            _allocPoint\r\n        );\r\n\r\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(\r\n            _allocPoint\r\n        );\r\n        poolInfo[_pid].allocPoint = _allocPoint;\r\n    }\r\n\r\n    // Enable support for meta transactions\r\n    function enableMetaTxns() public onlyOperator {\r\n        require(\r\n            !metaTxnsEnabled,\r\n            \"SolarVault: meta transactions are already enabled\"\r\n        );\r\n\r\n        metaTxnsEnabled = true;\r\n        emit MetaTxnsEnabled(_msgSender());\r\n    }\r\n\r\n    // Disable support for meta transactions\r\n    function disableMetaTxns() public onlyOperator {\r\n        require(\r\n            metaTxnsEnabled,\r\n            \"SolarVault: meta transactions are already disabled\"\r\n        );\r\n\r\n        metaTxnsEnabled = false;\r\n        emit MetaTxnsDisabled(_msgSender());\r\n    }\r\n}\r\n"
    },
    "contracts/eclipse/ICommonEclipse.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\n/** @title ICommonEclipse\r\n * @notice It is an interface for CommonEclipse.sol\r\n */\r\nabstract contract ICommonEclipse {\r\n    /**\r\n     * @notice It sets parameters for pool\r\n     * @param _offeringAmountPool: offering amount (in tokens)\r\n     * @param _raisingAmountPool: raising amount (in LP tokens)\r\n     * @param _baseLimitInLP: base limit per user (in LP tokens)\r\n     * @param _hasTax: if the pool has a tax\r\n     * @param _pid: poolId\r\n     * @dev This function is only callable by owner.\r\n     */\r\n    function setPool(\r\n        uint256 _offeringAmountPool,\r\n        uint256 _raisingAmountPool,\r\n        uint256 _baseLimitInLP,\r\n        bool _hasTax,\r\n        uint8 _pid\r\n    ) external virtual;\r\n\r\n    /**\r\n     * @notice It allows users to deposit LP tokens to pool\r\n     * @param _amount: the number of LP token used (18 decimals)\r\n     * @param _pid: pool id\r\n     */\r\n    function depositPool(uint256 _amount, uint8 _pid) external virtual;\r\n\r\n    /**\r\n     * @notice It allows users to harvest from pool\r\n     * @param _pid: pool id\r\n     * @param _harvestPeriod: chosen harvest period to claim\r\n     */\r\n    function harvestPool(uint8 _pid, uint8 _harvestPeriod) external virtual;\r\n\r\n    /**\r\n     * @notice It allows owner to update start and end blocks of the sale\r\n     * @param _startBlock: block number sale starts\r\n     * @param _endBlock: block number sale ends\r\n     */\r\n    function updateStartAndEndBlocks(uint256 _startBlock, uint256 _endBlock)\r\n        external\r\n        virtual;\r\n\r\n    /**\r\n     * @notice It allows owner to set the multiplier information\r\n     * @param _multipliers: encoded multipliers for zero, seven and thirty day vaults\r\n     * @dev encoded args are (uint8,uint8,uint8,uint8[2][3],uint8[2][3],uint8[2][3])\r\n     * (0 decimals)\r\n     */\r\n    function setMultipliers(bytes memory _multipliers) public virtual;\r\n\r\n    /**\r\n     * @notice It allows owner to set the threshold for eligibility\r\n     * @param _eligibilityThreshold: amount of solar staked in vaults to be eligibile\r\n     */\r\n    function setEligibilityThreshold(uint256 _eligibilityThreshold)\r\n        public\r\n        virtual;\r\n\r\n    /**\r\n     * @notice It allows the admin to withdraw funds\r\n     * @param _lpAmount: the number of LP token to withdraw (18 decimals)\r\n     * @param _offerAmount: the number of offering amount to withdraw\r\n     * @dev This function is only callable by owner.\r\n     */\r\n    function finalWithdraw(uint256 _lpAmount, uint256 _offerAmount)\r\n        external\r\n        virtual;\r\n\r\n    /**\r\n     * @notice It returns the tax overflow rate calculated for a pool\r\n     * @dev 100,000,000,000 means 0.1 (10%) / 1 means 0.0000000000001 (0.0000001%) / 1,000,000,000,000 means 1 (100%)\r\n     * @param _pid: poolId\r\n     * @return It returns the tax percentage\r\n     */\r\n    function viewPoolTaxRateOverflow(uint256 _pid)\r\n        external\r\n        virtual\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @notice External view function to see user allocations for both pools\r\n     * @param _user: user address\r\n     * @param _pids[]: array of pids\r\n     */\r\n    function viewUserAllocationPools(address _user, uint8[] calldata _pids)\r\n        external\r\n        virtual\r\n        returns (uint256[] memory);\r\n\r\n    /**\r\n     * @notice External view function to see user offering and refunding amounts for both pools\r\n     * @param _user: user address\r\n     * @param _pids: array of pids\r\n     */\r\n    function viewUserOfferingAndRefundingAmountsForPools(\r\n        address _user,\r\n        uint8[] calldata _pids\r\n    ) external virtual returns (uint256[3][] memory);\r\n\r\n    /**\r\n     * @notice It allows users to withdraw LP tokens to pool\r\n     * @param _amount: the number of LP token used (18 decimals)\r\n     * @param _pid: pool id\r\n     */\r\n    function withdrawPool(uint256 _amount, uint8 _pid) external virtual;\r\n\r\n    /**\r\n     * @notice It allows the admin to end sale and start claim\r\n     * @dev This function is only callable by owner.\r\n     */\r\n    function enableClaim() external virtual;\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) private pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "contracts/farm/ISolarERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.2;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface ISolarERC20 is IERC20 {\r\n    function mint(address to, uint256 amount) external;\r\n}\r\n"
    },
    "contracts/farm/SolarDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.2;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"./ISolarERC20.sol\";\r\n\r\ncontract SolarDistributor is Ownable, ReentrancyGuard {\r\n\r\n    // remember to change for mainnet deploy\r\n    address constant _trustedForwarder = 0x0D0b4862F5FfA3A47D04DDf0351356d20C830460; //TRUSTED FORWARDER\r\n\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    // Info of each user.\r\n    struct UserInfo {\r\n        uint256 amount; // How many LP tokens the user has provided.\r\n        uint256 rewardDebt; // Reward debt. See explanation below.\r\n        uint256 rewardLockedUp; // Reward locked up.\r\n        uint256 nextHarvestUntil; // When can the user harvest again.\r\n    }\r\n\r\n    // Info of each pool.\r\n    struct PoolInfo {\r\n        IERC20 lpToken; // Address of LP token contract.\r\n        uint256 allocPoint; // How many allocation points assigned to this pool. Solar to distribute per block.\r\n        uint256 lastRewardBlock; // Last block number that Solar distribution occurs.\r\n        uint256 accSolarPerShare; // Accumulated Solar per share, times 1e12. See below.\r\n        uint16 depositFeeBP; // Deposit fee in basis points\r\n        uint256 harvestInterval; // Harvest interval in seconds\r\n        uint256 totalLp; // Total token in Pool\r\n    }\r\n\r\n    ISolarERC20 public solar;\r\n\r\n    // The operator can only update EmissionRate and AllocPoint to protect tokenomics\r\n    //i.e some wrong setting and a pools get too much allocation accidentally\r\n    address private _operator;\r\n\r\n    // Dev address.\r\n    address public devAddress;\r\n\r\n    // Deposit Fee address\r\n    address public feeAddress;\r\n\r\n    // Solar tokens created per block\r\n    uint256 public solarPerBlock;\r\n\r\n    // Max harvest interval: 14 days\r\n    uint256 public constant MAXIMUM_HARVEST_INTERVAL = 14 days;\r\n\r\n    // Maximum deposit fee rate: 10%\r\n    uint16 public constant MAXIMUM_DEPOSIT_FEE_RATE = 1000;\r\n\r\n    // Info of each pool\r\n    PoolInfo[] public poolInfo;\r\n\r\n    // Info of each user that stakes LP tokens.\r\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\r\n\r\n    // Total allocation points. Must be the sum of all allocation points in all pools.\r\n    uint256 public totalAllocPoint = 0;\r\n\r\n    // The block number when Solar mining starts.\r\n    uint256 public startBlock;\r\n\r\n    // Total locked up rewards\r\n    uint256 public totalLockedUpRewards;\r\n\r\n    // Total Solar in Solar Pools (can be multiple pools)\r\n    uint256 public totalSolarInPools = 0;\r\n\r\n    // Control support for EIP-2771 Meta Transactions\r\n    bool public metaTxnsEnabled = false;\r\n\r\n\r\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event EmissionRateUpdated(address indexed caller, uint256 previousAmount, uint256 newAmount);\r\n    event RewardLockedUp(address indexed user, uint256 indexed pid, uint256 amountLockedUp);\r\n    event OperatorTransferred(address indexed previousOperator, address indexed newOperator);\r\n    event DevAddressChanged(address indexed caller, address oldAddress, address newAddress);\r\n    event FeeAddressChanged(address indexed caller, address oldAddress, address newAddress);\r\n    event AllocPointsUpdated(address indexed caller, uint256 previousAmount, uint256 newAmount);\r\n    event MetaTxnsEnabled(address indexed caller);\r\n    event MetaTxnsDisabled(address indexed caller);\r\n\r\n    modifier onlyOperator() {\r\n        require(_operator == msg.sender, \"Operator: caller is not the operator\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        ISolarERC20 _solar,\r\n        uint256 _solarPerBlock\r\n    ) {\r\n        //StartBlock always many years later from contract construct, will be set later in StartFarming function\r\n        startBlock = block.number + (10 * 365 * 24 * 60 * 60);\r\n\r\n        solar = _solar;\r\n        solarPerBlock = _solarPerBlock;\r\n\r\n        devAddress = msg.sender;\r\n        feeAddress = msg.sender;\r\n        _operator = msg.sender;\r\n        emit OperatorTransferred(address(0), _operator);\r\n    }\r\n\r\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\r\n        return metaTxnsEnabled && forwarder == _trustedForwarder;\r\n    }\r\n\r\n    function _msgSender() internal view virtual override returns (address sender) {\r\n        if (isTrustedForwarder(msg.sender)) {\r\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\r\n            assembly {\r\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\r\n            }\r\n        } else {\r\n            return super._msgSender();\r\n        }\r\n    }\r\n\r\n    function _msgData() internal view virtual override returns (bytes calldata) {\r\n        if (isTrustedForwarder(msg.sender)) {\r\n            return msg.data[:msg.data.length - 20];\r\n        } else {\r\n            return super._msgData();\r\n        }\r\n    }\r\n\r\n    function operator() public view returns (address) {\r\n        return _operator;\r\n    }\r\n\r\n    // Return reward multiplier over the given _from to _to block.\r\n    function getMultiplier(uint256 _from, uint256 _to) public pure returns (uint256) {\r\n        return _to.sub(_from);\r\n    }\r\n\r\n    function transferOperator(address newOperator) public onlyOperator {\r\n        require(newOperator != address(0), \"TransferOperator: new operator is the zero address\");\r\n        emit OperatorTransferred(_operator, newOperator);\r\n        _operator = newOperator;\r\n    }\r\n\r\n    // Set farming start, can call only once\r\n    function startFarming() public onlyOwner {\r\n        require(block.number < startBlock, \"Error::Farm started already\");\r\n\r\n        uint256 length = poolInfo.length;\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            PoolInfo storage pool = poolInfo[pid];\r\n            pool.lastRewardBlock = block.number;\r\n        }\r\n\r\n        startBlock = block.number;\r\n    }\r\n\r\n    function poolLength() external view returns (uint256) {\r\n        return poolInfo.length;\r\n    }\r\n\r\n    // Add a new lp to the pool. Can only be called by the owner.\r\n    // Can add multiple pool with same lp token without messing up rewards, because each pool's balance is tracked using its own totalLp\r\n    function add(\r\n        uint256 _allocPoint,\r\n        IERC20 _lpToken,\r\n        uint16 _depositFeeBP,\r\n        uint256 _harvestInterval,\r\n        bool _withUpdate\r\n    ) public onlyOwner {\r\n        require(_depositFeeBP <= MAXIMUM_DEPOSIT_FEE_RATE, \"add: deposit fee too high\");\r\n        require(_harvestInterval <= MAXIMUM_HARVEST_INTERVAL, \"add: invalid harvest interval\");\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\r\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\r\n        poolInfo.push(PoolInfo({lpToken: _lpToken, allocPoint: _allocPoint, lastRewardBlock: lastRewardBlock, accSolarPerShare: 0, depositFeeBP: _depositFeeBP, harvestInterval: _harvestInterval, totalLp: 0}));\r\n    }\r\n\r\n    // Update the given pool's Solar allocation point and deposit fee. Can only be called by the owner.\r\n    function set(\r\n        uint256 _pid,\r\n        uint256 _allocPoint,\r\n        uint16 _depositFeeBP,\r\n        uint256 _harvestInterval,\r\n        bool _withUpdate\r\n    ) public onlyOwner {\r\n        require(_depositFeeBP <= MAXIMUM_DEPOSIT_FEE_RATE, \"set: deposit fee too high\");\r\n        require(_harvestInterval <= MAXIMUM_HARVEST_INTERVAL, \"set: invalid harvest interval\");\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\r\n        poolInfo[_pid].allocPoint = _allocPoint;\r\n        poolInfo[_pid].depositFeeBP = _depositFeeBP;\r\n        poolInfo[_pid].harvestInterval = _harvestInterval;\r\n    }\r\n\r\n    // View function to see pending Solar on frontend.\r\n    function pendingSolar(uint256 _pid, address _user) external view returns (uint256) {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        uint256 accSolarPerShare = pool.accSolarPerShare;\r\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\r\n\r\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\r\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\r\n            uint256 solarReward = multiplier.mul(solarPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\r\n            accSolarPerShare = accSolarPerShare.add(solarReward.mul(1e12).div(lpSupply));\r\n        }\r\n\r\n        uint256 pending = user.amount.mul(accSolarPerShare).div(1e12).sub(user.rewardDebt);\r\n        return pending.add(user.rewardLockedUp);\r\n    }\r\n\r\n    // View function to see if user can harvest Solar.\r\n    function canHarvest(uint256 _pid, address _user) public view returns (bool) {\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        return block.number >= startBlock && block.timestamp >= user.nextHarvestUntil;\r\n    }\r\n\r\n    // Update reward vairables for all pools. Be careful of gas spending!\r\n    function massUpdatePools() public {\r\n        uint256 length = poolInfo.length;\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            updatePool(pid);\r\n        }\r\n    }\r\n\r\n    // Update reward variables of the given pool to be up-to-date.\r\n    function updatePool(uint256 _pid) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        if (block.number <= pool.lastRewardBlock) {\r\n            return;\r\n        }\r\n\r\n        uint256 lpSupply = pool.totalLp;\r\n        if (lpSupply == 0 || pool.allocPoint == 0) {\r\n            pool.lastRewardBlock = block.number;\r\n            return;\r\n        }\r\n\r\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\r\n        uint256 solarReward =\r\n            multiplier.mul(solarPerBlock).mul(pool.allocPoint).div(\r\n                totalAllocPoint\r\n            );\r\n\r\n        solar.mint(devAddress, solarReward.div(10));\r\n        solar.mint(address(this), solarReward);\r\n\r\n        pool.accSolarPerShare = pool.accSolarPerShare.add(\r\n            solarReward.mul(1e12).div(pool.totalLp)\r\n        );\r\n        pool.lastRewardBlock = block.number;\r\n\r\n\r\n    }\r\n\r\n    // Deposit LP tokens to MasterChef for Solar allocation.\r\n    function deposit(uint256 _pid, uint256 _amount) public nonReentrant {\r\n        require(block.number >= startBlock, \"SolarDistributor: Can not deposit before start\");\r\n\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_msgSender()];\r\n\r\n        updatePool(_pid);\r\n\r\n        payOrLockupPendingSolar(_pid);\r\n\r\n        if (_amount > 0) {\r\n            uint256 beforeDeposit = pool.lpToken.balanceOf(address(this));\r\n            pool.lpToken.safeTransferFrom(_msgSender(), address(this), _amount);\r\n            uint256 afterDeposit = pool.lpToken.balanceOf(address(this));\r\n\r\n            _amount = afterDeposit.sub(beforeDeposit);\r\n\r\n            if (pool.depositFeeBP > 0) {\r\n                uint256 depositFee = _amount.mul(pool.depositFeeBP).div(10000);\r\n                pool.lpToken.safeTransfer(feeAddress, depositFee);\r\n\r\n                _amount = _amount.sub(depositFee);\r\n            }\r\n\r\n            user.amount = user.amount.add(_amount);\r\n            pool.totalLp = pool.totalLp.add(_amount);\r\n\r\n            if (address(pool.lpToken) == address(solar)) {\r\n                totalSolarInPools = totalSolarInPools.add(_amount);\r\n            }\r\n        }\r\n        user.rewardDebt = user.amount.mul(pool.accSolarPerShare).div(1e12);\r\n        emit Deposit(_msgSender(), _pid, _amount);\r\n    }\r\n\r\n    // Withdraw tokens\r\n    function withdraw(uint256 _pid, uint256 _amount) public nonReentrant {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_msgSender()];\r\n\r\n        //this will make sure that user can only withdraw from his pool\r\n        require(user.amount >= _amount, \"Withdraw: User amount not enough\");\r\n\r\n        //Cannot withdraw more than pool's balance\r\n        require(pool.totalLp >= _amount, \"Withdraw: Pool total not enough\");\r\n\r\n        updatePool(_pid);\r\n\r\n        payOrLockupPendingSolar(_pid);\r\n\r\n        if (_amount > 0) {\r\n            user.amount = user.amount.sub(_amount);\r\n            pool.totalLp = pool.totalLp.sub(_amount);\r\n            if (address(pool.lpToken) == address(solar)) {\r\n                totalSolarInPools = totalSolarInPools.sub(_amount);\r\n            }\r\n            pool.lpToken.safeTransfer(_msgSender(), _amount);\r\n        }\r\n        user.rewardDebt = user.amount.mul(pool.accSolarPerShare).div(1e12);\r\n        emit Withdraw(_msgSender(), _pid, _amount);\r\n    }\r\n\r\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\r\n    function emergencyWithdraw(uint256 _pid) public nonReentrant {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_msgSender()];\r\n        uint256 amount = user.amount;\r\n\r\n        //Cannot withdraw more than pool's balance\r\n        require(pool.totalLp >= amount, \"EmergencyWithdraw: Pool total not enough\");\r\n\r\n        user.amount = 0;\r\n        user.rewardDebt = 0;\r\n        user.rewardLockedUp = 0;\r\n        user.nextHarvestUntil = 0;\r\n        pool.totalLp = pool.totalLp.sub(amount);\r\n\r\n        if (address(pool.lpToken) == address(solar)) {\r\n            totalSolarInPools = totalSolarInPools.sub(amount);\r\n        }\r\n        pool.lpToken.safeTransfer(_msgSender(), amount);\r\n\r\n        emit EmergencyWithdraw(_msgSender(), _pid, amount);\r\n    }\r\n\r\n    // Pay or lockup pending Solar.\r\n    function payOrLockupPendingSolar(uint256 _pid) internal {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_msgSender()];\r\n\r\n        if (user.nextHarvestUntil == 0 && block.number >= startBlock) {\r\n            user.nextHarvestUntil = block.timestamp.add(pool.harvestInterval);\r\n        }\r\n\r\n        uint256 pending = user.amount.mul(pool.accSolarPerShare).div(1e12).sub(user.rewardDebt);\r\n        if (canHarvest(_pid, _msgSender())) {\r\n            if (pending > 0 || user.rewardLockedUp > 0) {\r\n                uint256 totalRewards = pending.add(user.rewardLockedUp);\r\n\r\n                // reset lockup\r\n                totalLockedUpRewards = totalLockedUpRewards.sub(user.rewardLockedUp);\r\n                user.rewardLockedUp = 0;\r\n                user.nextHarvestUntil = block.timestamp.add(pool.harvestInterval);\r\n\r\n                // send rewards\r\n                safeSolarTransfer(_msgSender(), totalRewards);\r\n            }\r\n        } else if (pending > 0) {\r\n            user.rewardLockedUp = user.rewardLockedUp.add(pending);\r\n            totalLockedUpRewards = totalLockedUpRewards.add(pending);\r\n            emit RewardLockedUp(_msgSender(), _pid, pending);\r\n        }\r\n    }\r\n\r\n    // Safe Solar transfer function, just in case if rounding error causes pool do not have enough Solar.\r\n    function safeSolarTransfer(address _to, uint256 _amount) internal {\r\n        if (solar.balanceOf(address(this)) > totalSolarInPools) {\r\n            //SolarBal = total Solar in SolarDistributor - total Solar in Solar pools, this will make sure that SolarDistributor never transfer rewards from deposited Solar pools\r\n            uint256 SolarBal = solar.balanceOf(address(this)).sub(totalSolarInPools);\r\n            if (_amount >= SolarBal) {\r\n                solar.transfer(_to, SolarBal);\r\n            } else if (_amount > 0) {\r\n                solar.transfer(_to, _amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Update dev address by the previous dev.\r\n    function setDevAddress(address _devAddress) public {\r\n        require(_msgSender() == devAddress, \"setDevAddress: FORBIDDEN\");\r\n        require(_devAddress != address(0), \"setDevAddress: ZERO\");\r\n\r\n        emit DevAddressChanged(_msgSender(), devAddress, _devAddress);\r\n\r\n        devAddress = _devAddress;\r\n    }\r\n\r\n    function setFeeAddress(address _feeAddress) public {\r\n        require(_msgSender() == feeAddress, \"setFeeAddress: FORBIDDEN\");\r\n        require(_feeAddress != address(0), \"setFeeAddress: ZERO\");\r\n\r\n        emit FeeAddressChanged(_msgSender(), feeAddress, _feeAddress);\r\n\r\n        feeAddress = _feeAddress;\r\n    }\r\n\r\n    // Pancake has to add hidden dummy pools in order to alter the emission, here we make it simple and transparent to all.\r\n    function updateEmissionRate(uint256 _solarPerBlock) public onlyOperator {\r\n        massUpdatePools();\r\n\r\n        emit EmissionRateUpdated(msg.sender, solarPerBlock, _solarPerBlock);\r\n        solarPerBlock = _solarPerBlock;\r\n    }\r\n\r\n    function updateAllocPoint(\r\n        uint256 _pid,\r\n        uint256 _allocPoint,\r\n        bool _withUpdate\r\n    ) public onlyOperator {\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n\r\n        emit AllocPointsUpdated(_msgSender(), poolInfo[_pid].allocPoint, _allocPoint);\r\n\r\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\r\n        poolInfo[_pid].allocPoint = _allocPoint;\r\n    }\r\n\r\n    // Enable support for meta transactions\r\n    function enableMetaTxns() public onlyOperator {\r\n        require(!metaTxnsEnabled, \"Meta transactions are already enabled\");\r\n\r\n        metaTxnsEnabled = true;\r\n        emit MetaTxnsEnabled(_msgSender());\r\n    }\r\n\r\n    // Disable support for meta transactions\r\n    function disableMetaTxns() public onlyOperator {\r\n        require(metaTxnsEnabled, \"Meta transactions are already disabled\");\r\n\r\n        metaTxnsEnabled = false;\r\n        emit MetaTxnsDisabled(_msgSender());\r\n    }\r\n}\r\n"
    },
    "contracts/solar/SolarBeamToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.2;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\";\r\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\r\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/metatx/ERC2771Context.sol\";\r\n\r\ncontract SolarBeamToken is ERC20, ERC20Permit, Pausable, AccessControl {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\r\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\r\n    bytes32 public constant RESCUER_ROLE = keccak256(\"RESCUER_ROLE\");\r\n    bytes32 public constant TAKE_FEE_ROLE = keccak256(\"TAKE_FEE_ROLE\");\r\n    bytes32 public constant ROUTER_ROLE = keccak256(\"ROUTER_ROLE\");\r\n\r\n    uint256 private _maxSupply = 1000000000 * 10**decimals(); // 1 billion tokens is maximum supply\r\n    uint256 private _initialSupply = 100000 * 10**decimals(); // 100,000 tokens is the initial supply\r\n\r\n    address private _trustedForwarder;\r\n\r\n    // Control support for EIP-2771 Meta Transactions\r\n    bool public metaTxnsEnabled = false;\r\n\r\n    event TokensRescued(address indexed sender, address indexed token, uint256 value);\r\n    event MetaTxnsEnabled(address indexed caller);\r\n    event MetaTxnsDisabled(address indexed caller);\r\n\r\n    constructor(address trustedForwarder) ERC20(\"SolarBeam Token\", \"SOLAR\") ERC20Permit(\"SolarBeam Token\") {\r\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\r\n        _setupRole(PAUSER_ROLE, _msgSender());\r\n        _setupRole(MINTER_ROLE, _msgSender());\r\n        _setupRole(RESCUER_ROLE, _msgSender());\r\n\r\n        _trustedForwarder = trustedForwarder;\r\n\r\n        _mint(_msgSender(), _initialSupply);\r\n    }\r\n\r\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\r\n        return forwarder == _trustedForwarder;\r\n    }\r\n\r\n    function _msgSender() internal view override returns (address sender) {\r\n        if (isTrustedForwarder(msg.sender)) {\r\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\r\n            assembly {\r\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\r\n            }\r\n        } else {\r\n            return super._msgSender();\r\n        }\r\n    }\r\n\r\n    function _msgData() internal view override returns (bytes calldata) {\r\n        if (isTrustedForwarder(msg.sender)) {\r\n            return msg.data[:msg.data.length - 20];\r\n        } else {\r\n            return super._msgData();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the maximum amount of tokens that can be minted.\r\n     */\r\n    function maxSupply() public view returns (uint256) {\r\n        return _maxSupply;\r\n    }\r\n\r\n    function pause() public onlyRole(PAUSER_ROLE) {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() public onlyRole(PAUSER_ROLE) {\r\n        _unpause();\r\n    }\r\n\r\n    function mint(address to, uint256 amount) public onlyRole(MINTER_ROLE) {\r\n        require(totalSupply() + amount <= _maxSupply, \"ERC20: cannot mint more tokens, cap exceeded\");\r\n        _mint(to, amount);\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override whenNotPaused {\r\n        super._beforeTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    function rescueTokens(IERC20 token, uint256 value) external onlyRole(RESCUER_ROLE) {\r\n        token.transfer(_msgSender(), value);\r\n\r\n        emit TokensRescued(_msgSender(), address(token), value);\r\n    }\r\n\r\n    // Enable support for meta transactions\r\n    function enableMetaTxns() public onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        require(!metaTxnsEnabled, \"Meta transactions are already enabled\");\r\n\r\n        metaTxnsEnabled = true;\r\n        emit MetaTxnsEnabled(_msgSender());\r\n    }\r\n\r\n    // Disable support for meta transactions\r\n    function disableMetaTxns() public onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        require(metaTxnsEnabled, \"Meta transactions are already disabled\");\r\n\r\n        metaTxnsEnabled = false;\r\n        emit MetaTxnsDisabled(_msgSender());\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./draft-IERC20Permit.sol\";\nimport \"../ERC20.sol\";\nimport \"../../../utils/cryptography/draft-EIP712.sol\";\nimport \"../../../utils/cryptography/ECDSA.sol\";\nimport \"../../../utils/Counters.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n */\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\n    using Counters for Counters.Counter;\n\n    mapping(address => Counters.Counter) private _nonces;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private immutable _PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    constructor(string memory name) EIP712(name, \"1\") {}\n\n    /**\n     * @dev See {IERC20Permit-permit}.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    function nonces(address owner) public view virtual override returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev \"Consume a nonce\": return the current value and increment.\n     *\n     * _Available since v4.1._\n     */\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\n        Counters.Counter storage nonce = _nonces[owner];\n        current = nonce.current();\n        nonce.increment();\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    function grantRole(bytes32 role, address account) external;\n\n    function revokeRole(bytes32 role, address account) external;\n\n    function renounceRole(bytes32 role, address account) external;\n}\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\n        _roles[role].adminRole = adminRole;\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/metatx/ERC2771Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/*\n * @dev Context variant with ERC2771 support.\n */\nabstract contract ERC2771Context is Context {\n    address immutable _trustedForwarder;\n\n    constructor(address trustedForwarder) {\n        _trustedForwarder = trustedForwarder;\n    }\n\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\n        return forwarder == _trustedForwarder;\n    }\n\n    function _msgSender() internal view virtual override returns (address sender) {\n        if (isTrustedForwarder(msg.sender)) {\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\n            assembly {\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\n            }\n        } else {\n            return super._msgSender();\n        }\n    }\n\n    function _msgData() internal view virtual override returns (bytes calldata) {\n        if (isTrustedForwarder(msg.sender)) {\n            return msg.data[:msg.data.length - 20];\n        } else {\n            return super._msgData();\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712 {\n    /* solhint-disable var-name-mixedcase */\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        bytes32 typeHash = keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n        _CACHED_CHAIN_ID = block.chainid;\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\n        _TYPE_HASH = typeHash;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (block.chainid == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return recover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return recover(hash, r, vs);\n        } else {\n            revert(\"ECDSA: invalid signature length\");\n        }\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        bytes32 s;\n        uint8 v;\n        assembly {\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n            v := add(shr(255, vs), 27)\n        }\n        return recover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`, `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        require(\n            uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\n            \"ECDSA: invalid signature 's' value\"\n        );\n        require(v == 27 || v == 28, \"ECDSA: invalid signature 'v' value\");\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        require(signer != address(0), \"ECDSA: invalid signature\");\n\n        return signer;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver(to).onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "contracts/farm/v2/SolarDistributorV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.2;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"./rewarders/IComplexRewarder.sol\";\r\nimport \"./libraries/BoringERC20.sol\";\r\n\r\ncontract SolarDistributorV2 is Ownable, ReentrancyGuard {\r\n    using BoringERC20 for IBoringERC20;\r\n\r\n    // Info of each user.\r\n    struct UserInfo {\r\n        uint256 amount; // How many LP tokens the user has provided.\r\n        uint256 rewardDebt; // Reward debt. See explanation below.\r\n        uint256 rewardLockedUp; // Reward locked up.\r\n        uint256 nextHarvestUntil; // When can the user harvest again.\r\n    }\r\n\r\n    // Info of each pool.\r\n    struct PoolInfo {\r\n        IBoringERC20 lpToken; // Address of LP token contract.\r\n        uint256 allocPoint; // How many allocation points assigned to this pool. Solar to distribute per block.\r\n        uint256 lastRewardTimestamp; // Last block number that Solar distribution occurs.\r\n        uint256 accSolarPerShare; // Accumulated Solar per share, times 1e12. See below.\r\n        uint16 depositFeeBP; // Deposit fee in basis points\r\n        uint256 harvestInterval; // Harvest interval in seconds\r\n        uint256 totalLp; // Total token in Pool\r\n        IComplexRewarder[] rewarders; // Array of rewarder contract for pools with incentives\r\n    }\r\n\r\n    IBoringERC20 public solar;\r\n\r\n    // Solar tokens created per second\r\n    uint256 public solarPerSec;\r\n\r\n    // Max harvest interval: 14 days\r\n    uint256 public constant MAXIMUM_HARVEST_INTERVAL = 14 days;\r\n\r\n    // Maximum deposit fee rate: 10%\r\n    uint16 public constant MAXIMUM_DEPOSIT_FEE_RATE = 1000;\r\n\r\n    // Info of each pool\r\n    PoolInfo[] public poolInfo;\r\n\r\n    // Info of each user that stakes LP tokens.\r\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\r\n\r\n    // Total allocation points. Must be the sum of all allocation points in all pools.\r\n    uint256 public totalAllocPoint = 0;\r\n\r\n    // The timestamp when Solar mining starts.\r\n    uint256 public startTimestamp;\r\n\r\n    // Total locked up rewards\r\n    uint256 public totalLockedUpRewards;\r\n\r\n    // Total Solar in Solar Pools (can be multiple pools)\r\n    uint256 public totalSolarInPools = 0;\r\n\r\n    // Team address.\r\n    address public teamAddress;\r\n\r\n    // Treasury address.\r\n    address public treasuryAddress;\r\n\r\n    // Investor address.\r\n    address public investorAddress;\r\n\r\n    // Percentage of pool rewards that goto the team.\r\n    uint256 public teamPercent;\r\n\r\n    // Percentage of pool rewards that goes to the treasury.\r\n    uint256 public treasuryPercent;\r\n\r\n    // Percentage of pool rewards that goes to the investor.\r\n    uint256 public investorPercent;\r\n\r\n    modifier validatePoolByPid(uint256 _pid) {\r\n        require(_pid < poolInfo.length, \"Pool does not exist\");\r\n        _;\r\n    }\r\n\r\n    event Add(\r\n        uint256 indexed pid,\r\n        uint256 allocPoint,\r\n        IBoringERC20 indexed lpToken,\r\n        uint16 depositFeeBP,\r\n        uint256 harvestInterval,\r\n        IComplexRewarder[] indexed rewarders\r\n    );\r\n\r\n    event Set(\r\n        uint256 indexed pid,\r\n        uint256 allocPoint,\r\n        uint16 depositFeeBP,\r\n        uint256 harvestInterval,\r\n        IComplexRewarder[] indexed rewarders\r\n    );\r\n\r\n    event UpdatePool(\r\n        uint256 indexed pid,\r\n        uint256 lastRewardTimestamp,\r\n        uint256 lpSupply,\r\n        uint256 accSolarPerShare\r\n    );\r\n\r\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\r\n\r\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n\r\n    event EmergencyWithdraw(\r\n        address indexed user,\r\n        uint256 indexed pid,\r\n        uint256 amount\r\n    );\r\n\r\n    event EmissionRateUpdated(\r\n        address indexed caller,\r\n        uint256 previousValue,\r\n        uint256 newValue\r\n    );\r\n\r\n    event RewardLockedUp(\r\n        address indexed user,\r\n        uint256 indexed pid,\r\n        uint256 amountLockedUp\r\n    );\r\n\r\n    event AllocPointsUpdated(\r\n        address indexed caller,\r\n        uint256 previousAmount,\r\n        uint256 newAmount\r\n    );\r\n\r\n    event SetTeamAddress(\r\n        address indexed oldAddress,\r\n        address indexed newAddress\r\n    );\r\n\r\n    event SetTreasuryAddress(\r\n        address indexed oldAddress,\r\n        address indexed newAddress\r\n    );\r\n\r\n    event SetInvestorAddress(\r\n        address indexed oldAddress,\r\n        address indexed newAddress\r\n    );\r\n\r\n    event SetTeamPercent(uint256 oldPercent, uint256 newPercent);\r\n\r\n    event SetTreasuryPercent(uint256 oldPercent, uint256 newPercent);\r\n\r\n    event SetInvestorPercent(uint256 oldPercent, uint256 newPercent);\r\n\r\n    constructor(\r\n        IBoringERC20 _solar,\r\n        uint256 _solarPerSec,\r\n        address _teamAddress,\r\n        address _treasuryAddress,\r\n        address _investorAddress,\r\n        uint256 _teamPercent,\r\n        uint256 _treasuryPercent,\r\n        uint256 _investorPercent\r\n    ) {\r\n        require(\r\n            0 <= _teamPercent && _teamPercent <= 1000,\r\n            \"constructor: invalid team percent value\"\r\n        );\r\n        require(\r\n            0 <= _treasuryPercent && _treasuryPercent <= 1000,\r\n            \"constructor: invalid treasury percent value\"\r\n        );\r\n        require(\r\n            0 <= _investorPercent && _investorPercent <= 1000,\r\n            \"constructor: invalid investor percent value\"\r\n        );\r\n        require(\r\n            _teamPercent + _treasuryPercent + _investorPercent <= 1000,\r\n            \"constructor: total percent over max\"\r\n        );\r\n\r\n        //StartBlock always many years later from contract const ruct, will be set later in StartFarming function\r\n        startTimestamp = block.timestamp + (60 * 60 * 24 * 365);\r\n\r\n        solar = _solar;\r\n        solarPerSec = _solarPerSec;\r\n\r\n        teamAddress = _teamAddress;\r\n        treasuryAddress = _treasuryAddress;\r\n        investorAddress = _investorAddress;\r\n\r\n        teamPercent = _teamPercent;\r\n        treasuryPercent = _treasuryPercent;\r\n        investorPercent = _investorPercent;\r\n    }\r\n\r\n    // Set farming start, can call only once\r\n    function startFarming() public onlyOwner {\r\n        require(\r\n            block.timestamp < startTimestamp,\r\n            \"start farming: farm started already\"\r\n        );\r\n\r\n        uint256 length = poolInfo.length;\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            PoolInfo storage pool = poolInfo[pid];\r\n            pool.lastRewardTimestamp = block.timestamp;\r\n        }\r\n\r\n        startTimestamp = block.timestamp;\r\n    }\r\n\r\n    function poolLength() external view returns (uint256) {\r\n        return poolInfo.length;\r\n    }\r\n\r\n    // Add a new lp to the pool. Can only be called by the owner.\r\n    // Can add multiple pool with same lp token without messing up rewards, because each pool's balance is tracked using its own totalLp\r\n    function add(\r\n        uint256 _allocPoint,\r\n        IBoringERC20 _lpToken,\r\n        uint16 _depositFeeBP,\r\n        uint256 _harvestInterval,\r\n        IComplexRewarder[] calldata _rewarders\r\n    ) public onlyOwner {\r\n        require(\r\n            _depositFeeBP <= MAXIMUM_DEPOSIT_FEE_RATE,\r\n            \"add: deposit fee too high\"\r\n        );\r\n        require(\r\n            _harvestInterval <= MAXIMUM_HARVEST_INTERVAL,\r\n            \"add: invalid harvest interval\"\r\n        );\r\n        require(\r\n            Address.isContract(address(_lpToken)),\r\n            \"add: LP token must be a valid contract\"\r\n        );\r\n\r\n        for (\r\n            uint256 rewarderId = 0;\r\n            rewarderId < _rewarders.length;\r\n            ++rewarderId\r\n        ) {\r\n            require(\r\n                Address.isContract(address(_rewarders[rewarderId])),\r\n                \"add: rewarder must be contract\"\r\n            );\r\n        }\r\n\r\n        massUpdatePools();\r\n\r\n        uint256 lastRewardTimestamp = block.timestamp > startTimestamp\r\n            ? block.timestamp\r\n            : startTimestamp;\r\n\r\n        totalAllocPoint = totalAllocPoint + _allocPoint;\r\n\r\n        poolInfo.push(\r\n            PoolInfo({\r\n                lpToken: _lpToken,\r\n                allocPoint: _allocPoint,\r\n                lastRewardTimestamp: lastRewardTimestamp,\r\n                accSolarPerShare: 0,\r\n                depositFeeBP: _depositFeeBP,\r\n                harvestInterval: _harvestInterval,\r\n                totalLp: 0,\r\n                rewarders: _rewarders\r\n            })\r\n        );\r\n\r\n        emit Add(\r\n            poolInfo.length - 1,\r\n            _allocPoint,\r\n            _lpToken,\r\n            _depositFeeBP,\r\n            _harvestInterval,\r\n            _rewarders\r\n        );\r\n    }\r\n\r\n    // Update the given pool's Solar allocation point and deposit fee. Can only be called by the owner.\r\n    function set(\r\n        uint256 _pid,\r\n        uint256 _allocPoint,\r\n        uint16 _depositFeeBP,\r\n        uint256 _harvestInterval,\r\n        IComplexRewarder[] calldata _rewarders\r\n    ) public onlyOwner validatePoolByPid(_pid) {\r\n        require(\r\n            _depositFeeBP <= MAXIMUM_DEPOSIT_FEE_RATE,\r\n            \"set: deposit fee too high\"\r\n        );\r\n        require(\r\n            _harvestInterval <= MAXIMUM_HARVEST_INTERVAL,\r\n            \"set: invalid harvest interval\"\r\n        );\r\n\r\n        for (\r\n            uint256 rewarderId = 0;\r\n            rewarderId < _rewarders.length;\r\n            ++rewarderId\r\n        ) {\r\n            require(\r\n                Address.isContract(address(_rewarders[rewarderId])),\r\n                \"add: rewarder must be contract\"\r\n            );\r\n        }\r\n\r\n        massUpdatePools();\r\n\r\n        totalAllocPoint =\r\n            totalAllocPoint -\r\n            poolInfo[_pid].allocPoint +\r\n            _allocPoint;\r\n\r\n        poolInfo[_pid].allocPoint = _allocPoint;\r\n        poolInfo[_pid].depositFeeBP = _depositFeeBP;\r\n        poolInfo[_pid].harvestInterval = _harvestInterval;\r\n        poolInfo[_pid].rewarders = _rewarders;\r\n\r\n        emit Set(\r\n            _pid,\r\n            _allocPoint,\r\n            _depositFeeBP,\r\n            _harvestInterval,\r\n            _rewarders\r\n        );\r\n    }\r\n\r\n    // View function to see pending rewards on frontend.\r\n    function pendingTokens(uint256 _pid, address _user)\r\n        external\r\n        view\r\n        validatePoolByPid(_pid)\r\n        returns (\r\n            address[] memory addresses,\r\n            string[] memory symbols,\r\n            uint256[] memory amounts\r\n        )\r\n    {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        uint256 accSolarPerShare = pool.accSolarPerShare;\r\n        uint256 lpSupply = pool.totalLp;\r\n\r\n        if (block.number > pool.lastRewardTimestamp && lpSupply != 0) {\r\n            uint256 multiplier = block.timestamp - pool.lastRewardTimestamp;\r\n            uint256 lpPercent = 1000 -\r\n                teamPercent -\r\n                treasuryPercent -\r\n                investorPercent;\r\n\r\n            uint256 solarReward = ((((multiplier * solarPerSec) *\r\n                pool.allocPoint) / totalAllocPoint) * lpPercent) / 1000;\r\n\r\n            accSolarPerShare =\r\n                accSolarPerShare +\r\n                (((solarReward * 1e12) / lpSupply));\r\n        }\r\n\r\n        uint256 pendingSolar = (((user.amount * accSolarPerShare) / 1e12) -\r\n            user.rewardDebt) + user.rewardLockedUp;\r\n\r\n        addresses = new address[](pool.rewarders.length + 1);\r\n        symbols = new string[](pool.rewarders.length + 1);\r\n        amounts = new uint256[](pool.rewarders.length + 1);\r\n\r\n        addresses[0] = address(solar);\r\n        symbols[0] = IBoringERC20(solar).safeSymbol();\r\n        amounts[0] = pendingSolar;\r\n\r\n        for (\r\n            uint256 rewarderId = 0;\r\n            rewarderId < pool.rewarders.length;\r\n            ++rewarderId\r\n        ) {\r\n            addresses[rewarderId + 1] = address(\r\n                pool.rewarders[rewarderId].rewardToken()\r\n            );\r\n\r\n            symbols[rewarderId + 1] = IBoringERC20(\r\n                pool.rewarders[rewarderId].rewardToken()\r\n            ).safeSymbol();\r\n\r\n            amounts[rewarderId + 1] = pool.rewarders[rewarderId].pendingTokens(\r\n                _pid,\r\n                _user\r\n            );\r\n        }\r\n    }\r\n\r\n    // View function to see rewarders for a pool\r\n    function poolRewarders(uint256 _pid)\r\n        external\r\n        view\r\n        validatePoolByPid(_pid)\r\n        returns (address[] memory rewarders)\r\n    {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n\r\n        for (\r\n            uint256 rewarderId = 0;\r\n            rewarderId < pool.rewarders.length;\r\n            ++rewarderId\r\n        ) {\r\n            rewarders[rewarderId] = address(pool.rewarders[rewarderId]);\r\n        }\r\n    }\r\n\r\n    // View function to see if user can harvest Solar.\r\n    function canHarvest(uint256 _pid, address _user)\r\n        public\r\n        view\r\n        validatePoolByPid(_pid)\r\n        returns (bool)\r\n    {\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        return\r\n            block.timestamp >= startTimestamp &&\r\n            block.timestamp >= user.nextHarvestUntil;\r\n    }\r\n\r\n    // Update reward vairables for all pools. Be careful of gas spending!\r\n    function massUpdatePools() public {\r\n        uint256 length = poolInfo.length;\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            updatePool(pid);\r\n        }\r\n    }\r\n\r\n    // Update reward variables of the given pool to be up-to-date.\r\n    function updatePool(uint256 _pid) public validatePoolByPid(_pid) {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n\r\n        if (block.timestamp <= pool.lastRewardTimestamp) {\r\n            return;\r\n        }\r\n\r\n        uint256 lpSupply = pool.totalLp;\r\n\r\n        if (lpSupply == 0 || pool.allocPoint == 0) {\r\n            pool.lastRewardTimestamp = block.timestamp;\r\n            return;\r\n        }\r\n\r\n        uint256 multiplier = block.timestamp - pool.lastRewardTimestamp;\r\n\r\n        uint256 solarReward = ((multiplier * solarPerSec) * pool.allocPoint) /\r\n            totalAllocPoint;\r\n\r\n        uint256 lpPercent = 1000 -\r\n            teamPercent -\r\n            treasuryPercent -\r\n            investorPercent;\r\n\r\n        solar.mint(teamAddress, (solarReward * teamPercent) / 1000);\r\n        solar.mint(treasuryAddress, (solarReward * treasuryPercent) / 1000);\r\n        solar.mint(investorAddress, (solarReward * investorPercent) / 1000);\r\n        solar.mint(address(this), (solarReward * lpPercent) / 1000);\r\n\r\n        pool.accSolarPerShare =\r\n            pool.accSolarPerShare +\r\n            (((solarReward * 1e12) / pool.totalLp) * lpPercent) /\r\n            1000;\r\n        pool.lastRewardTimestamp = block.timestamp;\r\n\r\n        emit UpdatePool(\r\n            _pid,\r\n            pool.lastRewardTimestamp,\r\n            lpSupply,\r\n            pool.accSolarPerShare\r\n        );\r\n    }\r\n\r\n    // Deposit tokens for Solar allocation.\r\n    function deposit(uint256 _pid, uint256 _amount)\r\n        public\r\n        nonReentrant\r\n        validatePoolByPid(_pid)\r\n    {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n\r\n        updatePool(_pid);\r\n\r\n        payOrLockupPendingSolar(_pid);\r\n\r\n        if (_amount > 0) {\r\n            uint256 beforeDeposit = pool.lpToken.balanceOf(address(this));\r\n            pool.lpToken.safeTransferFrom(msg.sender, address(this), _amount);\r\n            uint256 afterDeposit = pool.lpToken.balanceOf(address(this));\r\n\r\n            _amount = afterDeposit - beforeDeposit;\r\n\r\n            if (pool.depositFeeBP > 0) {\r\n                uint256 depositFee = (_amount * pool.depositFeeBP) / 10000;\r\n                pool.lpToken.safeTransfer(treasuryAddress, depositFee);\r\n\r\n                _amount = _amount - depositFee;\r\n            }\r\n\r\n            user.amount = user.amount + _amount;\r\n            pool.totalLp = pool.totalLp + _amount;\r\n\r\n            if (address(pool.lpToken) == address(solar)) {\r\n                totalSolarInPools = totalSolarInPools + _amount;\r\n            }\r\n        }\r\n        user.rewardDebt = (user.amount * pool.accSolarPerShare) / 1e12;\r\n\r\n        for (\r\n            uint256 rewarderId = 0;\r\n            rewarderId < pool.rewarders.length;\r\n            ++rewarderId\r\n        ) {\r\n            pool.rewarders[rewarderId].onSolarReward(\r\n                _pid,\r\n                msg.sender,\r\n                user.amount\r\n            );\r\n        }\r\n\r\n        emit Deposit(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    //withdraw tokens\r\n    function withdraw(uint256 _pid, uint256 _amount)\r\n        public\r\n        nonReentrant\r\n        validatePoolByPid(_pid)\r\n    {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n\r\n        //this will make sure that user can only withdraw from his pool\r\n        require(user.amount >= _amount, \"withdraw: user amount not enough\");\r\n\r\n        //cannot withdraw more than pool's balance\r\n        require(pool.totalLp >= _amount, \"withdraw: pool total not enough\");\r\n\r\n        updatePool(_pid);\r\n\r\n        payOrLockupPendingSolar(_pid);\r\n\r\n        if (_amount > 0) {\r\n            user.amount = user.amount - _amount;\r\n            pool.totalLp = pool.totalLp - _amount;\r\n            if (address(pool.lpToken) == address(solar)) {\r\n                totalSolarInPools = totalSolarInPools - _amount;\r\n            }\r\n            pool.lpToken.safeTransfer(msg.sender, _amount);\r\n        }\r\n        user.rewardDebt = (user.amount * pool.accSolarPerShare) / 1e12;\r\n\r\n        for (\r\n            uint256 rewarderId = 0;\r\n            rewarderId < pool.rewarders.length;\r\n            ++rewarderId\r\n        ) {\r\n            pool.rewarders[rewarderId].onSolarReward(\r\n                _pid,\r\n                msg.sender,\r\n                user.amount\r\n            );\r\n        }\r\n\r\n        emit Withdraw(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\r\n    function emergencyWithdraw(uint256 _pid) public nonReentrant {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        uint256 amount = user.amount;\r\n\r\n        //Cannot withdraw more than pool's balance\r\n        require(\r\n            pool.totalLp >= amount,\r\n            \"emergency withdraw: pool total not enough\"\r\n        );\r\n\r\n        user.amount = 0;\r\n        user.rewardDebt = 0;\r\n        user.rewardLockedUp = 0;\r\n        user.nextHarvestUntil = 0;\r\n        pool.totalLp = pool.totalLp - amount;\r\n\r\n        if (address(pool.lpToken) == address(solar)) {\r\n            totalSolarInPools = totalSolarInPools - amount;\r\n        }\r\n\r\n        pool.lpToken.safeTransfer(msg.sender, amount);\r\n\r\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\r\n    }\r\n\r\n    // Pay or lockup pending Solar.\r\n    function payOrLockupPendingSolar(uint256 _pid) internal {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n\r\n        if (user.nextHarvestUntil == 0 && block.timestamp >= startTimestamp) {\r\n            user.nextHarvestUntil = block.timestamp + pool.harvestInterval;\r\n        }\r\n\r\n        uint256 pending = ((user.amount * pool.accSolarPerShare) / 1e12) -\r\n            user.rewardDebt;\r\n\r\n        if (canHarvest(_pid, msg.sender)) {\r\n            if (pending > 0 || user.rewardLockedUp > 0) {\r\n                uint256 totalRewards = pending + user.rewardLockedUp;\r\n\r\n                // reset lockup\r\n                totalLockedUpRewards =\r\n                    totalLockedUpRewards -\r\n                    user.rewardLockedUp;\r\n\r\n                user.rewardLockedUp = 0;\r\n                user.nextHarvestUntil = block.timestamp + pool.harvestInterval;\r\n\r\n                // send rewards\r\n                safeSolarTransfer(msg.sender, totalRewards);\r\n            }\r\n        } else if (pending > 0) {\r\n            user.rewardLockedUp = user.rewardLockedUp + pending;\r\n            totalLockedUpRewards = totalLockedUpRewards + pending;\r\n            emit RewardLockedUp(msg.sender, _pid, pending);\r\n        }\r\n    }\r\n\r\n    // Safe Solar transfer function, just in case if rounding error causes pool do not have enough Solar.\r\n    function safeSolarTransfer(address _to, uint256 _amount) internal {\r\n        if (solar.balanceOf(address(this)) > totalSolarInPools) {\r\n            //solarBal = total Solar in SolarDistributor - total Solar in Solar pools, this will make sure that SolarDistributor never transfer rewards from deposited Solar pools\r\n            uint256 solarBal = solar.balanceOf(address(this)) -\r\n                totalSolarInPools;\r\n            if (_amount >= solarBal) {\r\n                solar.safeTransfer(_to, solarBal);\r\n            } else if (_amount > 0) {\r\n                solar.safeTransfer(_to, _amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function updateEmissionRate(uint256 _solarPerSec) public onlyOwner {\r\n        massUpdatePools();\r\n\r\n        emit EmissionRateUpdated(msg.sender, solarPerSec, _solarPerSec);\r\n\r\n        solarPerSec = _solarPerSec;\r\n    }\r\n\r\n    function updateAllocPoint(uint256 _pid, uint256 _allocPoint)\r\n        public\r\n        onlyOwner\r\n    {\r\n        massUpdatePools();\r\n\r\n        emit AllocPointsUpdated(\r\n            msg.sender,\r\n            poolInfo[_pid].allocPoint,\r\n            _allocPoint\r\n        );\r\n\r\n        totalAllocPoint =\r\n            totalAllocPoint -\r\n            poolInfo[_pid].allocPoint +\r\n            _allocPoint;\r\n        poolInfo[_pid].allocPoint = _allocPoint;\r\n    }\r\n\r\n    function poolTotalLp(uint256 pid) external view returns (uint256) {\r\n        return poolInfo[pid].totalLp;\r\n    }\r\n\r\n    // Function to harvest many pools in a single transaction\r\n    function harvestMany(uint256[] calldata _pids) public {\r\n        for (uint256 index = 0; index < _pids.length; ++index) {\r\n            deposit(_pids[index], 0);\r\n        }\r\n    }\r\n\r\n    // Update team address by the previous team address.\r\n    function setTeamAddress(address _teamAddress) public {\r\n        require(\r\n            msg.sender == teamAddress,\r\n            \"set team address: only previous team address can call this method\"\r\n        );\r\n        teamAddress = _teamAddress;\r\n        emit SetTeamAddress(msg.sender, _teamAddress);\r\n    }\r\n\r\n    function setTeamPercent(uint256 _newTeamPercent) public onlyOwner {\r\n        require(\r\n            0 <= _newTeamPercent && _newTeamPercent <= 1000,\r\n            \"set team percent: invalid percent value\"\r\n        );\r\n        require(\r\n            treasuryPercent + _newTeamPercent + investorPercent <= 1000,\r\n            \"set team percent: total percent over max\"\r\n        );\r\n        emit SetTeamPercent(teamPercent, _newTeamPercent);\r\n        teamPercent = _newTeamPercent;\r\n    }\r\n\r\n    // Update treasury address by the previous treasury.\r\n    function setTreasuryAddr(address _treasuryAddress) public {\r\n        require(msg.sender == treasuryAddress, \"set treasury address: wut?\");\r\n        treasuryAddress = _treasuryAddress;\r\n        emit SetTreasuryAddress(msg.sender, _treasuryAddress);\r\n    }\r\n\r\n    function setTreasuryPercent(uint256 _newTreasuryPercent) public onlyOwner {\r\n        require(\r\n            0 <= _newTreasuryPercent && _newTreasuryPercent <= 1000,\r\n            \"set treasury percent: invalid percent value\"\r\n        );\r\n        require(\r\n            teamPercent + _newTreasuryPercent + investorPercent <= 1000,\r\n            \"set treasury percent: total percent over max\"\r\n        );\r\n        emit SetTeamPercent(treasuryPercent, _newTreasuryPercent);\r\n        treasuryPercent = _newTreasuryPercent;\r\n    }\r\n\r\n    // Update the investor address by the previous investor.\r\n    function setInvestorAddress(address _investorAddress) public {\r\n        require(\r\n            msg.sender == investorAddress,\r\n            \"set investor address: only previous investor can call this method\"\r\n        );\r\n        investorAddress = _investorAddress;\r\n        emit SetInvestorAddress(msg.sender, _investorAddress);\r\n    }\r\n\r\n    function setInvestorPercent(uint256 _newInvestorPercent) public onlyOwner {\r\n        require(\r\n            0 <= _newInvestorPercent && _newInvestorPercent <= 1000,\r\n            \"set investor percent: invalid percent value\"\r\n        );\r\n        require(\r\n            teamPercent + _newInvestorPercent + treasuryPercent <= 1000,\r\n            \"set investor percent: total percent over max\"\r\n        );\r\n        emit SetTeamPercent(investorPercent, _newInvestorPercent);\r\n        investorPercent = _newInvestorPercent;\r\n    }\r\n}\r\n"
    },
    "contracts/farm/v2/rewarders/IComplexRewarder.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.2;\r\n\r\nimport \"../libraries/IBoringERC20.sol\";\r\n\r\ninterface IComplexRewarder {\r\n    function onSolarReward(\r\n        uint256 pid,\r\n        address user,\r\n        uint256 newLpAmount\r\n    ) external;\r\n\r\n    function pendingTokens(uint256 pid, address user)\r\n        external\r\n        view\r\n        returns (uint256 pending);\r\n\r\n    function rewardToken() external view returns (IBoringERC20);\r\n}\r\n"
    },
    "contracts/farm/v2/libraries/BoringERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.2;\r\n\r\n// solhint-disable avoid-low-level-calls\r\nimport \"./IBoringERC20.sol\";\r\n\r\nlibrary BoringERC20 {\r\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\r\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\r\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\r\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\r\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\r\n\r\n    function returnDataToString(bytes memory data)\r\n        internal\r\n        pure\r\n        returns (string memory)\r\n    {\r\n        if (data.length >= 64) {\r\n            return abi.decode(data, (string));\r\n        } else if (data.length == 32) {\r\n            uint8 i = 0;\r\n            while (i < 32 && data[i] != 0) {\r\n                i++;\r\n            }\r\n            bytes memory bytesArray = new bytes(i);\r\n            for (i = 0; i < 32 && data[i] != 0; i++) {\r\n                bytesArray[i] = data[i];\r\n            }\r\n            return string(bytesArray);\r\n        } else {\r\n            return \"???\";\r\n        }\r\n    }\r\n\r\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\r\n    /// @param token The address of the ERC-20 token contract.\r\n    /// @return (string) Token symbol.\r\n    function safeSymbol(IBoringERC20 token)\r\n        internal\r\n        view\r\n        returns (string memory)\r\n    {\r\n        (bool success, bytes memory data) = address(token).staticcall(\r\n            abi.encodeWithSelector(SIG_SYMBOL)\r\n        );\r\n        return success ? returnDataToString(data) : \"???\";\r\n    }\r\n\r\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\r\n    /// @param token The address of the ERC-20 token contract.\r\n    /// @return (string) Token name.\r\n    function safeName(IBoringERC20 token)\r\n        internal\r\n        view\r\n        returns (string memory)\r\n    {\r\n        (bool success, bytes memory data) = address(token).staticcall(\r\n            abi.encodeWithSelector(SIG_NAME)\r\n        );\r\n        return success ? returnDataToString(data) : \"???\";\r\n    }\r\n\r\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\r\n    /// @param token The address of the ERC-20 token contract.\r\n    /// @return (uint8) Token decimals.\r\n    function safeDecimals(IBoringERC20 token) internal view returns (uint8) {\r\n        (bool success, bytes memory data) = address(token).staticcall(\r\n            abi.encodeWithSelector(SIG_DECIMALS)\r\n        );\r\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\r\n    }\r\n\r\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\r\n    /// Reverts on a failed transfer.\r\n    /// @param token The address of the ERC-20 token.\r\n    /// @param to Transfer tokens to.\r\n    /// @param amount The token amount.\r\n    function safeTransfer(\r\n        IBoringERC20 token,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        (bool success, bytes memory data) = address(token).call(\r\n            abi.encodeWithSelector(SIG_TRANSFER, to, amount)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"BoringERC20: Transfer failed\"\r\n        );\r\n    }\r\n\r\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\r\n    /// Reverts on a failed transfer.\r\n    /// @param token The address of the ERC-20 token.\r\n    /// @param from Transfer tokens from.\r\n    /// @param to Transfer tokens to.\r\n    /// @param amount The token amount.\r\n    function safeTransferFrom(\r\n        IBoringERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        (bool success, bytes memory data) = address(token).call(\r\n            abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"BoringERC20: TransferFrom failed\"\r\n        );\r\n    }\r\n}\r\n"
    },
    "contracts/farm/v2/libraries/IBoringERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.2;\r\n\r\ninterface IBoringERC20 {\r\n    function mint(address to, uint256 amount) external;\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    /// @notice EIP 2612\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n}\r\n"
    },
    "contracts/farm/v2/rewarders/SimpleRewarderPerSec.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.2;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"./IRewarder.sol\";\r\nimport \"../ISolarDistributorV2.sol\";\r\nimport \"../libraries/BoringERC20.sol\";\r\n\r\n/**\r\n * This is a sample contract to be used in the SolarDistributorV2 contract for partners to reward\r\n * stakers with their native token alongside SOLAR.\r\n *\r\n * It assumes no minting rights, so requires a set amount of YOUR_TOKEN to be transferred to this contract prior.\r\n * E.g. say you've allocated 100,000 XYZ to the SOLAR-XYZ farm over 30 days. Then you would need to transfer\r\n * 100,000 XYZ and set the block reward accordingly so it's fully distributed after 30 days.\r\n */\r\ncontract SimpleRewarderPerSec is IRewarder, Ownable, ReentrancyGuard {\r\n    using BoringERC20 for IBoringERC20;\r\n\r\n    IBoringERC20 public immutable override rewardToken;\r\n    uint256 public immutable pid;\r\n    bool public immutable isNative;\r\n    ISolarDistributorV2 public immutable distributorV2;\r\n\r\n    /// @notice Info of each distributorV2 user.\r\n    /// `amount` LP token amount the user has provided.\r\n    /// `rewardDebt` The amount of YOUR_TOKEN entitled to the user.\r\n    struct UserInfo {\r\n        uint256 amount;\r\n        uint256 rewardDebt;\r\n        uint256 unpaidRewards;\r\n    }\r\n\r\n    /// @notice Info of each distributorV2 poolInfo.\r\n    /// `accTokenPerShare` Amount of YOUR_TOKEN each LP token is worth.\r\n    /// `lastRewardTimestamp` The last timestamp YOUR_TOKEN was rewarded to the poolInfo.\r\n    struct PoolInfo {\r\n        uint256 accTokenPerShare;\r\n        uint256 lastRewardTimestamp;\r\n    }\r\n\r\n    /// @notice Info of the poolInfo.\r\n    PoolInfo public poolInfo;\r\n    /// @notice Info of each user that stakes LP tokens.\r\n    mapping(address => UserInfo) public userInfo;\r\n\r\n    uint256 public tokenPerSec;\r\n    uint256 private constant ACC_TOKEN_PRECISION = 1e12;\r\n\r\n    event OnReward(address indexed user, uint256 amount);\r\n    event RewardRateUpdated(uint256 oldRate, uint256 newRate);\r\n\r\n    modifier onlyDistributorV2() {\r\n        require(\r\n            msg.sender == address(distributorV2),\r\n            \"onlyDistributorV2: only SolarDistributorV2 can call this function\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        IBoringERC20 _rewardToken,\r\n        uint256 _tokenPerSec,\r\n        ISolarDistributorV2 _distributorV2,\r\n        uint256 _pid,\r\n        bool _isNative\r\n    ) {\r\n        require(\r\n            Address.isContract(address(_rewardToken)),\r\n            \"constructor: reward token must be a valid contract\"\r\n        );\r\n        require(\r\n            Address.isContract(address(_distributorV2)),\r\n            \"constructor: SolarDistributorV2 must be a valid contract\"\r\n        );\r\n        rewardToken = _rewardToken;\r\n        pid = _pid;\r\n        tokenPerSec = _tokenPerSec;\r\n        distributorV2 = _distributorV2;\r\n        isNative = _isNative;\r\n        poolInfo = PoolInfo({\r\n            lastRewardTimestamp: block.timestamp,\r\n            accTokenPerShare: 0\r\n        });\r\n    }\r\n\r\n    /// @notice Update reward variables of the given poolInfo.\r\n    /// @return pool Returns the pool that was updated.\r\n    function updatePool() public returns (PoolInfo memory pool) {\r\n        pool = poolInfo;\r\n\r\n        if (block.timestamp > pool.lastRewardTimestamp) {\r\n            uint256 lpSupply = distributorV2.poolTotalLp(pid);\r\n\r\n            if (lpSupply > 0) {\r\n                uint256 timeElapsed = block.timestamp -\r\n                    pool.lastRewardTimestamp;\r\n                uint256 tokenReward = timeElapsed * tokenPerSec;\r\n                pool.accTokenPerShare += ((tokenReward * ACC_TOKEN_PRECISION) /\r\n                    lpSupply);\r\n            }\r\n\r\n            pool.lastRewardTimestamp = block.timestamp;\r\n            poolInfo = pool;\r\n        }\r\n    }\r\n\r\n    /// @notice Sets the distribution reward rate. This will also update the poolInfo.\r\n    /// @param _tokenPerSec The number of tokens to distribute per second\r\n    function setRewardRate(uint256 _tokenPerSec) external onlyOwner {\r\n        updatePool();\r\n\r\n        emit RewardRateUpdated(tokenPerSec, _tokenPerSec);\r\n\r\n        tokenPerSec = _tokenPerSec;\r\n    }\r\n\r\n    /// @notice internal function to see balance of reward token.\r\n    function _balance() internal view returns (uint256) {\r\n        if (isNative) {\r\n            return address(this).balance;\r\n        } else {\r\n            return rewardToken.balanceOf(address(this));\r\n        }\r\n    }\r\n\r\n    /// @notice Function called by SolarDistributorV2 whenever staker claims SOLAR harvest. Allows staker to also receive a 2nd reward token.\r\n    /// @param _user Address of user\r\n    /// @param _lpAmount Number of LP tokens the user has\r\n    function onSolarReward(address _user, uint256 _lpAmount)\r\n        external\r\n        override\r\n        onlyDistributorV2\r\n        nonReentrant\r\n    {\r\n        updatePool();\r\n        PoolInfo memory pool = poolInfo;\r\n        UserInfo storage user = userInfo[_user];\r\n        uint256 pending;\r\n        uint256 rewardBalance = _balance();\r\n        if (user.amount > 0) {\r\n            pending =\r\n                (((user.amount * pool.accTokenPerShare) / ACC_TOKEN_PRECISION) -\r\n                    user.rewardDebt) +\r\n                user.unpaidRewards;\r\n\r\n            if (isNative) {\r\n                if (pending > rewardBalance) {\r\n                    (bool success, ) = _user.call{value: rewardBalance}(\"\");\r\n                    require(success, \"Transfer failed\");\r\n                    user.unpaidRewards = pending - rewardBalance;\r\n                } else {\r\n                    (bool success, ) = _user.call{value: pending}(\"\");\r\n                    require(success, \"Transfer failed\");\r\n                    user.unpaidRewards = 0;\r\n                }\r\n            } else {\r\n                if (pending > rewardBalance) {\r\n                    rewardToken.safeTransfer(_user, rewardBalance);\r\n                    user.unpaidRewards = pending - rewardBalance;\r\n                } else {\r\n                    rewardToken.safeTransfer(_user, pending);\r\n                    user.unpaidRewards = 0;\r\n                }\r\n            }\r\n        }\r\n        user.amount = _lpAmount;\r\n        user.rewardDebt =\r\n            (user.amount * pool.accTokenPerShare) /\r\n            ACC_TOKEN_PRECISION;\r\n\r\n        emit OnReward(_user, pending - user.unpaidRewards);\r\n    }\r\n\r\n    /// @notice View function to see pending tokens\r\n    /// @param _user Address of user.\r\n    /// @return pending reward for a given user.\r\n    function pendingTokens(address _user)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256 pending)\r\n    {\r\n        PoolInfo memory pool = poolInfo;\r\n        UserInfo storage user = userInfo[_user];\r\n\r\n        uint256 accTokenPerShare = pool.accTokenPerShare;\r\n        uint256 lpSupply = distributorV2.poolTotalLp(pid);\r\n\r\n        if (block.timestamp > pool.lastRewardTimestamp && lpSupply != 0) {\r\n            uint256 timeElapsed = block.timestamp - pool.lastRewardTimestamp;\r\n            uint256 tokenReward = timeElapsed * tokenPerSec;\r\n            accTokenPerShare += (tokenReward * ACC_TOKEN_PRECISION) / lpSupply;\r\n        }\r\n\r\n        pending =\r\n            (((user.amount * accTokenPerShare) / ACC_TOKEN_PRECISION) -\r\n                user.rewardDebt) +\r\n            user.unpaidRewards;\r\n    }\r\n\r\n    /// @notice In case rewarder is stopped before emissions finished, this function allows\r\n    /// withdrawal of remaining tokens.\r\n    function emergencyWithdraw() public onlyOwner {\r\n        if (isNative) {\r\n            (bool success, ) = msg.sender.call{value: address(this).balance}(\r\n                \"\"\r\n            );\r\n            require(success, \"Transfer failed\");\r\n        } else {\r\n            rewardToken.safeTransfer(\r\n                address(msg.sender),\r\n                rewardToken.balanceOf(address(this))\r\n            );\r\n        }\r\n    }\r\n\r\n    /// @notice View function to see balance of reward token.\r\n    function balance() external view returns (uint256) {\r\n        return _balance();\r\n    }\r\n\r\n    /// @notice payable function needed to receive MOVR\r\n    receive() external payable {}\r\n}\r\n"
    },
    "contracts/farm/v2/rewarders/IRewarder.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.2;\r\n\r\nimport \"../libraries/IBoringERC20.sol\";\r\n\r\ninterface IRewarder {\r\n    function onSolarReward(address user, uint256 newLpAmount) external;\r\n\r\n    function pendingTokens(address user)\r\n        external\r\n        view\r\n        returns (uint256 pending);\r\n\r\n    function rewardToken() external view returns (IBoringERC20);\r\n}\r\n"
    },
    "contracts/farm/v2/ISolarDistributorV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.2;\r\n\r\nimport \"./libraries/IBoringERC20.sol\";\r\nimport \"./rewarders/IComplexRewarder.sol\";\r\n\r\ninterface ISolarDistributorV2 {\r\n    function poolTotalLp(uint256 pid) external view returns (uint256);\r\n\r\n    function totalAllocPoint() external view returns (uint256);\r\n\r\n    function deposit(uint256 _pid, uint256 _amount) external;\r\n\r\n    function poolLength() external view returns (uint256);\r\n}\r\n"
    },
    "contracts/farm/v2/rewarders/ComplexRewarderPerSec.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.2;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"./IComplexRewarder.sol\";\r\nimport \"../ISolarDistributorV2.sol\";\r\nimport \"../libraries/BoringERC20.sol\";\r\n\r\n/**\r\n * This is a sample contract to be used in the SolarDistributorV2 contract for partners to reward\r\n * stakers with their native token alongside SOLAR.\r\n *\r\n * It assumes no minting rights, so requires a set amount of YOUR_TOKEN to be transferred to this contract prior.\r\n * E.g. say you've allocated 100,000 XYZ to the SOLAR-XYZ farm over 30 days. Then you would need to transfer\r\n * 100,000 XYZ and set the block reward accordingly so it's fully distributed after 30 days.\r\n */\r\ncontract ComplexRewarderPerSec is IComplexRewarder, Ownable, ReentrancyGuard {\r\n    using BoringERC20 for IBoringERC20;\r\n\r\n    IBoringERC20 public immutable override rewardToken;\r\n    bool public immutable isNative;\r\n    ISolarDistributorV2 public immutable distributorV2;\r\n\r\n    /// @notice Info of each distributorV2 user.\r\n    /// `amount` LP token amount the user has provided.\r\n    /// `rewardDebt` The amount of YOUR_TOKEN entitled to the user.\r\n    struct UserInfo {\r\n        uint256 amount;\r\n        uint256 rewardDebt;\r\n        uint256 unpaidRewards;\r\n    }\r\n\r\n    /// @notice Info of each distributorV2 poolInfo.\r\n    /// `accTokenPerShare` Amount of YOUR_TOKEN each LP token is worth.\r\n    /// `lastRewardTimestamp` The last timestamp YOUR_TOKEN was rewarded to the poolInfo.\r\n    /// `allocPoint` The amount of allocation points assigned to the pool.\r\n    struct PoolInfo {\r\n        uint256 accTokenPerShare;\r\n        uint256 lastRewardTimestamp;\r\n        uint256 allocPoint;\r\n    }\r\n\r\n    /// @notice Info of each pool.\r\n    mapping(uint256 => PoolInfo) public poolInfo;\r\n\r\n    uint256[] public poolIds;\r\n\r\n    /// @notice Info of each user that stakes LP tokens.\r\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\r\n\r\n    /// @dev Total allocation points. Must be the sum of all allocation points in all pools.\r\n    uint256 public totalAllocPoint = 0;\r\n\r\n    uint256 public tokenPerSec;\r\n    uint256 private constant ACC_TOKEN_PRECISION = 1e12;\r\n\r\n    event OnReward(address indexed user, uint256 amount);\r\n    event RewardRateUpdated(uint256 oldRate, uint256 newRate);\r\n    event AddPool(uint256 indexed pid, uint256 allocPoint);\r\n    event SetPool(uint256 indexed pid, uint256 allocPoint);\r\n    event UpdatePool(\r\n        uint256 indexed pid,\r\n        uint256 lastRewardTimestamp,\r\n        uint256 lpSupply,\r\n        uint256 accTokenPerShare\r\n    );\r\n\r\n    modifier onlyDistributorV2() {\r\n        require(\r\n            msg.sender == address(distributorV2),\r\n            \"onlyDistributorV2: only SolarDistributorV2 can call this function\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        IBoringERC20 _rewardToken,\r\n        uint256 _tokenPerSec,\r\n        ISolarDistributorV2 _distributorV2,\r\n        bool _isNative\r\n    ) {\r\n        require(\r\n            Address.isContract(address(_rewardToken)),\r\n            \"constructor: reward token must be a valid contract\"\r\n        );\r\n        require(\r\n            Address.isContract(address(_distributorV2)),\r\n            \"constructor: SolarDistributorV2 must be a valid contract\"\r\n        );\r\n        rewardToken = _rewardToken;\r\n        tokenPerSec = _tokenPerSec;\r\n        distributorV2 = _distributorV2;\r\n        isNative = _isNative;\r\n    }\r\n\r\n    /// @notice Add a new pool. Can only be called by the owner.\r\n    /// @param _pid pool id on DistributorV2\r\n    /// @param _allocPoint allocation of the new pool.\r\n    function add(uint256 _pid, uint256 _allocPoint) public onlyOwner {\r\n        require(poolInfo[_pid].lastRewardTimestamp == 0, \"pool already exists\");\r\n        totalAllocPoint += _allocPoint;\r\n\r\n        poolInfo[_pid] = PoolInfo({\r\n            allocPoint: _allocPoint,\r\n            lastRewardTimestamp: block.timestamp,\r\n            accTokenPerShare: 0\r\n        });\r\n        poolIds.push(_pid);\r\n        emit AddPool(_pid, _allocPoint);\r\n    }\r\n\r\n    /// @notice Update the given pool's allocation point and `IRewarder` contract. Can only be called by the owner.\r\n    /// @param _pid The index of the pool. See `poolInfo`.\r\n    /// @param _allocPoint New AP of the pool.\r\n    function set(uint256 _pid, uint256 _allocPoint) public onlyOwner {\r\n        totalAllocPoint =\r\n            totalAllocPoint -\r\n            poolInfo[_pid].allocPoint +\r\n            _allocPoint;\r\n        poolInfo[_pid].allocPoint = _allocPoint;\r\n        emit SetPool(_pid, _allocPoint);\r\n    }\r\n\r\n    /// @notice Sets the distribution reward rate. This will also update the poolInfo.\r\n    /// @param _tokenPerSec The number of tokens to distribute per second\r\n    function setRewardRate(uint256 _tokenPerSec) external onlyOwner {\r\n        massUpdatePools();\r\n        emit RewardRateUpdated(tokenPerSec, _tokenPerSec);\r\n        tokenPerSec = _tokenPerSec;\r\n    }\r\n\r\n    /// @notice Update reward variables of the given pool.\r\n    /// @param pid The index of the pool. See `poolInfo`.\r\n    /// @return pool Returns the pool that was updated.\r\n    function updatePool(uint256 pid) public returns (PoolInfo memory pool) {\r\n        pool = poolInfo[pid];\r\n\r\n        if (block.timestamp > pool.lastRewardTimestamp) {\r\n            uint256 lpSupply = distributorV2.poolTotalLp(pid);\r\n\r\n            if (lpSupply > 0) {\r\n                uint256 timeElapsed = block.timestamp -\r\n                    pool.lastRewardTimestamp;\r\n                uint256 tokenReward = (timeElapsed *\r\n                    tokenPerSec *\r\n                    pool.allocPoint) / totalAllocPoint;\r\n                pool.accTokenPerShare += ((tokenReward * ACC_TOKEN_PRECISION) /\r\n                    lpSupply);\r\n            }\r\n\r\n            pool.lastRewardTimestamp = block.timestamp;\r\n            poolInfo[pid] = pool;\r\n            emit UpdatePool(\r\n                pid,\r\n                pool.lastRewardTimestamp,\r\n                lpSupply,\r\n                pool.accTokenPerShare\r\n            );\r\n        }\r\n    }\r\n\r\n    // Update reward vairables for all pools. Be careful of gas spending!\r\n    function massUpdatePools() public {\r\n        uint256 length = poolIds.length;\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            updatePool(poolIds[pid]);\r\n        }\r\n    }\r\n\r\n    /// @notice internal function to see balance of reward token.\r\n    function _balance() internal view returns (uint256) {\r\n        if (isNative) {\r\n            return address(this).balance;\r\n        } else {\r\n            return rewardToken.balanceOf(address(this));\r\n        }\r\n    }\r\n\r\n    /// @notice Function called by SolarDistributorV2 whenever staker claims SOLAR harvest. Allows staker to also receive a 2nd reward token.\r\n    /// @param _user Address of user\r\n    /// @param _lpAmount Number of LP tokens the user has\r\n    function onSolarReward(\r\n        uint256 _pid,\r\n        address _user,\r\n        uint256 _lpAmount\r\n    ) external override onlyDistributorV2 nonReentrant {\r\n        PoolInfo memory pool = updatePool(_pid);\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        uint256 pending;\r\n        uint256 rewardBalance = _balance();\r\n        if (user.amount > 0) {\r\n            pending =\r\n                (((user.amount * pool.accTokenPerShare) / ACC_TOKEN_PRECISION) -\r\n                    user.rewardDebt) +\r\n                user.unpaidRewards;\r\n\r\n            if (isNative) {\r\n                if (pending > rewardBalance) {\r\n                    (bool success, ) = _user.call{value: rewardBalance}(\"\");\r\n                    require(success, \"Transfer failed\");\r\n                    user.unpaidRewards = pending - rewardBalance;\r\n                } else {\r\n                    (bool success, ) = _user.call{value: pending}(\"\");\r\n                    require(success, \"Transfer failed\");\r\n                    user.unpaidRewards = 0;\r\n                }\r\n            } else {\r\n                if (pending > rewardBalance) {\r\n                    rewardToken.safeTransfer(_user, rewardBalance);\r\n                    user.unpaidRewards = pending - rewardBalance;\r\n                } else {\r\n                    rewardToken.safeTransfer(_user, pending);\r\n                    user.unpaidRewards = 0;\r\n                }\r\n            }\r\n        }\r\n        user.amount = _lpAmount;\r\n        user.rewardDebt =\r\n            (user.amount * pool.accTokenPerShare) /\r\n            ACC_TOKEN_PRECISION;\r\n\r\n        emit OnReward(_user, pending - user.unpaidRewards);\r\n    }\r\n\r\n    /// @notice View function to see pending tokens\r\n    /// @param _pid pool id.\r\n    /// @param _user Address of user.\r\n    /// @return pending reward for a given user.\r\n    function pendingTokens(uint256 _pid, address _user)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256 pending)\r\n    {\r\n        PoolInfo memory pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n\r\n        uint256 accTokenPerShare = pool.accTokenPerShare;\r\n        uint256 lpSupply = distributorV2.poolTotalLp(_pid);\r\n\r\n        if (block.timestamp > pool.lastRewardTimestamp && lpSupply != 0) {\r\n            uint256 timeElapsed = block.timestamp - pool.lastRewardTimestamp;\r\n            uint256 tokenReward = (timeElapsed *\r\n                tokenPerSec *\r\n                pool.allocPoint) / totalAllocPoint;\r\n            accTokenPerShare += (tokenReward * ACC_TOKEN_PRECISION) / lpSupply;\r\n        }\r\n\r\n        pending =\r\n            (((user.amount * accTokenPerShare) / ACC_TOKEN_PRECISION) -\r\n                user.rewardDebt) +\r\n            user.unpaidRewards;\r\n    }\r\n\r\n    /// @notice In case rewarder is stopped before emissions finished, this function allows\r\n    /// withdrawal of remaining tokens.\r\n    function emergencyWithdraw() public onlyOwner {\r\n        if (isNative) {\r\n            (bool success, ) = msg.sender.call{value: address(this).balance}(\r\n                \"\"\r\n            );\r\n            require(success, \"Transfer failed\");\r\n        } else {\r\n            rewardToken.safeTransfer(\r\n                address(msg.sender),\r\n                rewardToken.balanceOf(address(this))\r\n            );\r\n        }\r\n    }\r\n\r\n    /// @notice View function to see balance of reward token.\r\n    function balance() external view returns (uint256) {\r\n        return _balance();\r\n    }\r\n\r\n    /// @notice payable function needed to receive MOVR\r\n    receive() external payable {}\r\n}\r\n"
    },
    "contracts/nft/NFTClaim.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.2;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\n\r\nlibrary Errors {\r\n    string constant C1 =\r\n        \"whitelist::whitelist length must be equal as amount length\";\r\n}\r\n\r\ncontract NFTClaim is Ownable, ReentrancyGuard {\r\n    // Info of each user for each pool.\r\n    struct UserInfo {\r\n        bool claimed;\r\n        uint256 amount;\r\n    }\r\n\r\n    // Info of each pool.\r\n    struct CampaignInfo {\r\n        IERC721 nft;\r\n    }\r\n\r\n    // userInfo[_campaignId][_who]\r\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\r\n\r\n    // mapping to keep track of nft rewards for sweep function\r\n    mapping(address => bool) public nft;\r\n\r\n    // CampainInfo[_campaignId];\r\n    CampaignInfo[] public campaignInfo;\r\n\r\n    event AddCampaignInfo(uint256 indexed campaignID, IERC721 nft);\r\n    event Whitelist(\r\n        uint256 indexed campaignID,\r\n        address indexed user,\r\n        uint256 indexed amount\r\n    );\r\n    event Claim(address indexed user, uint256 indexed campaignID);\r\n    event AdminRecovery(address indexed nftAddress, uint256 amount);\r\n\r\n    function addCampaignInfo(IERC721 _nft) external onlyOwner {\r\n        campaignInfo.push(CampaignInfo({nft: _nft}));\r\n        nft[address(_nft)] = true;\r\n        emit AddCampaignInfo(campaignInfo.length - 1, _nft);\r\n    }\r\n\r\n    function campaignInfoLen() external view returns (uint256) {\r\n        return campaignInfo.length;\r\n    }\r\n\r\n    function whitelist(\r\n        uint256 _campaignID,\r\n        address[] calldata _whitelist,\r\n        uint256[] calldata _amount\r\n    ) external onlyOwner {\r\n        require(_whitelist.length == _amount.length, Errors.C1);\r\n\r\n        for (uint256 i = 0; i < _whitelist.length; i++) {\r\n            UserInfo storage user = userInfo[_campaignID][_whitelist[i]];\r\n            user.amount = _amount[i];\r\n            user.claimed = false;\r\n            emit Whitelist(_campaignID, _whitelist[i], _amount[i]);\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/locker/SolarLocker.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.2;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract SolarLocker is Ownable{\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    \r\n    struct Items {\r\n        IERC20 token;\r\n        address withdrawer;\r\n        uint256 amount;\r\n        uint256 unlockTimestamp;\r\n        bool withdrawn;\r\n    }\r\n    \r\n    uint256 public depositsCount;\r\n    mapping (address => uint256[]) private depositsByTokenAddress;\r\n    mapping (address => uint256[]) public depositsByWithdrawer;\r\n    mapping (uint256 => Items) public lockedToken;\r\n    mapping (address => mapping(address => uint256)) public walletTokenBalance;\r\n    \r\n    uint256 public lockFee = 0.1 ether;\r\n    address public marketingAddress;\r\n    \r\n    event Withdraw(address withdrawer, uint256 amount);\r\n    event Lock(address token, uint256 amount, uint256 id);\r\n    \r\n    constructor() {\r\n        marketingAddress = msg.sender;\r\n    }\r\n    \r\n    function lockTokens(IERC20 _token, address _withdrawer, uint256 _amount, uint256 _unlockTimestamp) payable external returns (uint256 _id) {\r\n        require(_amount > 0, 'Token amount too low!');\r\n        require(_unlockTimestamp < 10000000000, 'Unlock timestamp is not in seconds!');\r\n        require(_unlockTimestamp > block.timestamp, 'Unlock timestamp is not in the future!');\r\n        require(_token.allowance(msg.sender, address(this)) >= _amount, 'Approve tokens first!');\r\n        require(msg.value >= lockFee, 'Need to pay lock fee!');\r\n\r\n        uint256 beforeDeposit = _token.balanceOf(address(this));\r\n        _token.safeTransferFrom(msg.sender, address(this), _amount);\r\n        uint256 afterDeposit = _token.balanceOf(address(this));\r\n        \r\n        _amount = afterDeposit.sub(beforeDeposit); \r\n\r\n        payable(marketingAddress).transfer(msg.value);\r\n                \r\n        walletTokenBalance[address(_token)][msg.sender] = walletTokenBalance[address(_token)][msg.sender].add(_amount);\r\n        \r\n        _id = ++depositsCount;\r\n        lockedToken[_id].token = _token;\r\n        lockedToken[_id].withdrawer = _withdrawer;\r\n        lockedToken[_id].amount = _amount;\r\n        lockedToken[_id].unlockTimestamp = _unlockTimestamp;\r\n        lockedToken[_id].withdrawn = false;\r\n        \r\n        depositsByTokenAddress[address(_token)].push(_id);\r\n        depositsByWithdrawer[_withdrawer].push(_id);\r\n\r\n        emit Lock(address(_token), _amount, _id);\r\n        \r\n        return _id;\r\n    }\r\n        \r\n    function withdrawTokens(uint256 _id) external {\r\n        require(block.timestamp >= lockedToken[_id].unlockTimestamp, 'Tokens are still locked!');\r\n        require(msg.sender == lockedToken[_id].withdrawer, 'You are not the withdrawer!');\r\n        require(!lockedToken[_id].withdrawn, 'Tokens are already withdrawn!');\r\n        \r\n        lockedToken[_id].withdrawn = true;\r\n        \r\n        walletTokenBalance[address(lockedToken[_id].token)][msg.sender] = walletTokenBalance[address(lockedToken[_id].token)][msg.sender].sub(lockedToken[_id].amount);\r\n        \r\n        emit Withdraw(msg.sender, lockedToken[_id].amount);\r\n        lockedToken[_id].token.safeTransfer(msg.sender, lockedToken[_id].amount);\r\n    }\r\n    \r\n    function setMarketingAddress(address _marketingAddress) external onlyOwner {\r\n        marketingAddress = _marketingAddress;\r\n    }\r\n    \r\n    function setLockFee(uint256 _lockFee) external onlyOwner {\r\n        lockFee = _lockFee;\r\n    }\r\n    \r\n    function getDepositsByTokenAddress(address _token) view external returns (uint256[] memory) {\r\n        return depositsByTokenAddress[_token];\r\n    }\r\n    \r\n    function getDepositsByWithdrawer(address _withdrawer) view external returns (uint256[] memory) {\r\n        return depositsByWithdrawer[_withdrawer];\r\n    }\r\n    \r\n    \r\n    function getTokenTotalLockedBalance(address _token) view external returns (uint256) {\r\n       return IERC20(_token).balanceOf(address(this));\r\n    }\r\n}"
    },
    "contracts/forwarder/Forwarder.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\r\npragma solidity ^0.8.2;\r\npragma abicoder v2;\r\n\r\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\r\nimport \"./IForwarder.sol\";\r\n\r\ncontract Forwarder is IForwarder {\r\n    using ECDSA for bytes32;\r\n\r\n    string public constant GENERIC_PARAMS = \"address from,address to,uint256 value,uint256 gas,uint256 nonce,bytes data,uint256 validUntil\";\r\n\r\n    string public constant EIP712_DOMAIN_TYPE = \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\";\r\n\r\n    mapping(bytes32 => bool) public typeHashes;\r\n    mapping(bytes32 => bool) public domains;\r\n\r\n    // Nonces of senders, used to prevent replay attacks\r\n    mapping(address => uint256) private nonces;\r\n\r\n    // solhint-disable-next-line no-empty-blocks\r\n    receive() external payable {}\r\n\r\n    function getNonce(address from)\r\n    public view override\r\n    returns (uint256) {\r\n        return nonces[from];\r\n    }\r\n\r\n    constructor() {     \r\n        string memory requestType = string(abi.encodePacked(\"ForwardRequest(\", GENERIC_PARAMS, \")\"));\r\n        registerRequestTypeInternal(requestType);\r\n    }\r\n\r\n    function verify(\r\n        ForwardRequest calldata req,\r\n        bytes32 domainSeparator,\r\n        bytes32 requestTypeHash,\r\n        bytes calldata suffixData,\r\n        bytes calldata sig)\r\n    external override view {\r\n\r\n        _verifyNonce(req);\r\n        _verifySig(req, domainSeparator, requestTypeHash, suffixData, sig);\r\n    }\r\n\r\n    function execute(\r\n        ForwardRequest calldata req,\r\n        bytes32 domainSeparator,\r\n        bytes32 requestTypeHash,\r\n        bytes calldata suffixData,\r\n        bytes calldata sig\r\n    )\r\n    external payable\r\n    override\r\n    returns (bool success, bytes memory ret) {\r\n        _verifySig(req, domainSeparator, requestTypeHash, suffixData, sig);\r\n        _verifyAndUpdateNonce(req);\r\n\r\n        require(req.validUntil == 0 || req.validUntil > block.number, \"FWD: request expired\");\r\n\r\n        uint gasForTransfer = 0;\r\n        if ( req.value != 0 ) {\r\n            gasForTransfer = 40000; //buffer in case we need to move eth after the transaction.\r\n        }\r\n        bytes memory callData = abi.encodePacked(req.data, req.from);\r\n        require(gasleft()*63/64 >= req.gas + gasForTransfer, \"FWD: insufficient gas\");\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (success,ret) = req.to.call{gas : req.gas, value : req.value}(callData);\r\n        if ( req.value != 0 && address(this).balance>0 ) {\r\n            // can't fail: req.from signed (off-chain) the request, so it must be an EOA...\r\n            payable(req.from).transfer(address(this).balance);\r\n        }\r\n\r\n        return (success,ret);\r\n    }\r\n\r\n\r\n    function _verifyNonce(ForwardRequest calldata req) internal view {\r\n        require(nonces[req.from] == req.nonce, \"FWD: nonce mismatch\");\r\n    }\r\n\r\n    function _verifyAndUpdateNonce(ForwardRequest calldata req) internal {\r\n        require(nonces[req.from]++ == req.nonce, \"FWD: nonce mismatch\");\r\n    }\r\n\r\n    function registerRequestType(string calldata typeName, string calldata typeSuffix) external override {\r\n\r\n        for (uint i = 0; i < bytes(typeName).length; i++) {\r\n            bytes1 c = bytes(typeName)[i];\r\n            require(c != \"(\" && c != \")\", \"FWD: invalid typename\");\r\n        }\r\n\r\n        string memory requestType = string(abi.encodePacked(typeName, \"(\", GENERIC_PARAMS, \",\", typeSuffix));\r\n        registerRequestTypeInternal(requestType);\r\n    }\r\n\r\n    function registerDomainSeparator(string calldata name, string calldata version) external override {\r\n        uint256 chainId;\r\n        /* solhint-disable-next-line no-inline-assembly */\r\n        assembly { chainId := chainid() }\r\n\r\n        bytes memory domainValue = abi.encode(\r\n            keccak256(bytes(EIP712_DOMAIN_TYPE)),\r\n            keccak256(bytes(name)),\r\n            keccak256(bytes(version)),\r\n            chainId,\r\n            address(this));\r\n\r\n        bytes32 domainHash = keccak256(domainValue);\r\n\r\n        domains[domainHash] = true;\r\n        emit DomainRegistered(domainHash, domainValue);\r\n    }\r\n\r\n    function registerRequestTypeInternal(string memory requestType) internal {\r\n\r\n        bytes32 requestTypehash = keccak256(bytes(requestType));\r\n        typeHashes[requestTypehash] = true;\r\n        emit RequestTypeRegistered(requestTypehash, requestType);\r\n    }\r\n\r\n    function _verifySig(\r\n        ForwardRequest calldata req,\r\n        bytes32 domainSeparator,\r\n        bytes32 requestTypeHash,\r\n        bytes calldata suffixData,\r\n        bytes calldata sig)\r\n    internal\r\n    view\r\n    {\r\n        require(domains[domainSeparator], \"FWD: unregistered domain sep.\");\r\n        require(typeHashes[requestTypeHash], \"FWD: unregistered typehash\");\r\n        bytes32 digest = keccak256(abi.encodePacked(\r\n                \"\\x19\\x01\", domainSeparator,\r\n                keccak256(_getEncoded(req, requestTypeHash, suffixData))\r\n            ));\r\n        require(digest.recover(sig) == req.from, \"FWD: signature mismatch\");\r\n    }\r\n\r\n    function _getEncoded(\r\n        ForwardRequest calldata req,\r\n        bytes32 requestTypeHash,\r\n        bytes calldata suffixData\r\n    )\r\n    public\r\n    pure\r\n    returns (\r\n        bytes memory\r\n    ) {\r\n        // we use encodePacked since we append suffixData as-is, not as dynamic param.\r\n        // still, we must make sure all first params are encoded as abi.encode()\r\n        // would encode them - as 256-bit-wide params.\r\n        return abi.encodePacked(\r\n            requestTypeHash,\r\n            uint256(uint160(req.from)),\r\n            uint256(uint160(req.to)),\r\n            req.value,\r\n            req.gas,\r\n            req.nonce,\r\n            keccak256(req.data),\r\n            req.validUntil,\r\n            suffixData\r\n        );\r\n    }\r\n}"
    },
    "contracts/forwarder/IForwarder.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\r\npragma solidity ^0.8.2;\r\npragma abicoder v2;\r\n\r\ninterface IForwarder {\r\n\r\n    struct ForwardRequest {\r\n        address from;\r\n        address to;\r\n        uint256 value;\r\n        uint256 gas;\r\n        uint256 nonce;\r\n        bytes data;\r\n        uint256 validUntil;\r\n    }\r\n\r\n    event DomainRegistered(bytes32 indexed domainSeparator, bytes domainValue);\r\n\r\n    event RequestTypeRegistered(bytes32 indexed typeHash, string typeStr);\r\n\r\n    function getNonce(address from)\r\n    external view\r\n    returns(uint256);\r\n\r\n    /**\r\n     * verify the transaction would execute.\r\n     * validate the signature and the nonce of the request.\r\n     * revert if either signature or nonce are incorrect.\r\n     * also revert if domainSeparator or requestTypeHash are not registered.\r\n     */\r\n    function verify(\r\n        ForwardRequest calldata forwardRequest,\r\n        bytes32 domainSeparator,\r\n        bytes32 requestTypeHash,\r\n        bytes calldata suffixData,\r\n        bytes calldata signature\r\n    ) external view;\r\n\r\n    /**\r\n     * execute a transaction\r\n     * @param forwardRequest - all transaction parameters\r\n     * @param domainSeparator - domain used when signing this request\r\n     * @param requestTypeHash - request type used when signing this request.\r\n     * @param suffixData - the extension data used when signing this request.\r\n     * @param signature - signature to validate.\r\n     *\r\n     * the transaction is verified, and then executed.\r\n     * the success and ret of \"call\" are returned.\r\n     * This method would revert only verification errors. target errors\r\n     * are reported using the returned \"success\" and ret string\r\n     */\r\n    function execute(\r\n        ForwardRequest calldata forwardRequest,\r\n        bytes32 domainSeparator,\r\n        bytes32 requestTypeHash,\r\n        bytes calldata suffixData,\r\n        bytes calldata signature\r\n    )\r\n    external payable\r\n    returns (bool success, bytes memory ret);\r\n\r\n    /**\r\n     * Register a new Request typehash.\r\n     * @param typeName - the name of the request type.\r\n     * @param typeSuffix - any extra data after the generic params.\r\n     *  (must add at least one param. The generic ForwardRequest type is always registered by the constructor)\r\n     */\r\n    function registerRequestType(string calldata typeName, string calldata typeSuffix) external;\r\n\r\n    /**\r\n     * Register a new domain separator.\r\n     * The domain separator must have the following fields: name,version,chainId, verifyingContract.\r\n     * the chainId is the current network's chainId, and the verifyingContract is this forwarder.\r\n     * This method is given the domain name and version to create and register the domain separator value.\r\n     * @param name the domain's display name\r\n     * @param version the domain/protocol version\r\n     */\r\n    function registerDomainSeparator(string calldata name, string calldata version) external;\r\n}"
    },
    "contracts/mock/MockERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.2;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\ncontract MockERC20 is ERC20 {\r\n    using SafeERC20 for IERC20;\r\n\r\n    constructor(\r\n        string memory name,\r\n        string memory symbol,\r\n        uint256 totalSupply\r\n    ) ERC20(name, symbol) {\r\n        _mint(msg.sender, totalSupply);\r\n    }\r\n\r\n    function mint(address _who, uint256 _amount) public {\r\n        _mint(_who, _amount);\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 999999
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}