{
  "address": "0x4c9AA719FCDaD69f78BED02542ac0F2850fE1b45",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IBoringERC20",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenPerSec",
          "type": "uint256"
        },
        {
          "internalType": "contract ISolarDistributorV2",
          "name": "_distributorV2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isNative",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "OnReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRate",
          "type": "uint256"
        }
      ],
      "name": "RewardRateUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "balance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributorV2",
      "outputs": [
        {
          "internalType": "contract ISolarDistributorV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isNative",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_lpAmount",
          "type": "uint256"
        }
      ],
      "name": "onSolarReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pending",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "accTokenPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IBoringERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenPerSec",
          "type": "uint256"
        }
      ],
      "name": "setRewardRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenPerSec",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updatePool",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "accTokenPerShare",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastRewardTimestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct SimpleRewarderPerSec.PoolInfo",
          "name": "pool",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unpaidRewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xfaa6e74654ec886dda5192d606b8e592dec55a0fd5337a6c35217ff3a002191e",
  "receipt": {
    "to": null,
    "from": "0xb152C1746543FdC63b308808497B64F52774f805",
    "contractAddress": "0x4c9AA719FCDaD69f78BED02542ac0F2850fE1b45",
    "transactionIndex": 9,
    "gasUsed": "1390832",
    "logsBloom": "0x
    "blockHash": "0xa303e6c9d92eb1c2ab1dc6cd55fed1a2f44d748898d96ff498b32aa4c9061340",
    "transactionHash": "0xfaa6e74654ec886dda5192d606b8e592dec55a0fd5337a6c35217ff3a002191e",
    "logs": [
      {
        "transactionIndex": 9,
        "blockNumber": 856597,
        "transactionHash": "0xfaa6e74654ec886dda5192d606b8e592dec55a0fd5337a6c35217ff3a002191e",
        "address": "0x4c9AA719FCDaD69f78BED02542ac0F2850fE1b45",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b152c1746543fdc63b308808497b64f52774f805"
        ],
        "data": "0x",
        "logIndex": 35,
        "blockHash": "0xa303e6c9d92eb1c2ab1dc6cd55fed1a2f44d748898d96ff498b32aa4c9061340"
      }
    ],
    "blockNumber": 856597,
    "cumulativeGasUsed": "2142898",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x579e6e41deaeed8f65768e161a0fd63d760cae5c",
    "833333333333333333",
    "0x359B8910490F5Ae811Ef56b8aB2E703e8A3cFAd7",
    0,
    false
  ],
  "solcInputHash": "de158983037c075cbe1fce046778e4fb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBoringERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenPerSec\",\"type\":\"uint256\"},{\"internalType\":\"contract ISolarDistributorV2\",\"name\":\"_distributorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isNative\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"RewardRateUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributorV2\",\"outputs\":[{\"internalType\":\"contract ISolarDistributorV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isNative\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lpAmount\",\"type\":\"uint256\"}],\"name\":\"onSolarReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accTokenPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IBoringERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenPerSec\",\"type\":\"uint256\"}],\"name\":\"setRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPerSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePool\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"accTokenPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct SimpleRewarderPerSec.PoolInfo\",\"name\":\"pool\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unpaidRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"onSolarReward(address,uint256)\":{\"params\":{\"_lpAmount\":\"Number of LP tokens the user has\",\"_user\":\"Address of user\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingTokens(address)\":{\"params\":{\"_user\":\"Address of user.\"},\"returns\":{\"pending\":\"reward for a given user.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setRewardRate(uint256)\":{\"params\":{\"_tokenPerSec\":\"The number of tokens to distribute per second\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updatePool()\":{\"returns\":{\"pool\":\"Returns the pool that was updated.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"balance()\":{\"notice\":\"View function to see balance of reward token.\"},\"emergencyWithdraw()\":{\"notice\":\"In case rewarder is stopped before emissions finished, this function allows withdrawal of remaining tokens.\"},\"onSolarReward(address,uint256)\":{\"notice\":\"Function called by SolarDistributorV2 whenever staker claims SOLAR harvest. Allows staker to also receive a 2nd reward token.\"},\"pendingTokens(address)\":{\"notice\":\"View function to see pending tokens\"},\"poolInfo()\":{\"notice\":\"Info of the poolInfo.\"},\"setRewardRate(uint256)\":{\"notice\":\"Sets the distribution reward rate. This will also update the poolInfo.\"},\"updatePool()\":{\"notice\":\"Update reward variables of the given poolInfo.\"},\"userInfo(address)\":{\"notice\":\"Info of each user that stakes LP tokens.\"}},\"notice\":\"This is a sample contract to be used in the SolarDistributorV2 contract for partners to reward stakers with their native token alongside SOLAR. It assumes no minting rights, so requires a set amount of YOUR_TOKEN to be transferred to this contract prior. E.g. say you've allocated 100,000 XYZ to the SOLAR-XYZ farm over 30 days. Then you would need to transfer 100,000 XYZ and set the block reward accordingly so it's fully distributed after 30 days.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/farm/v2/rewarders/SimpleRewarderPerSec.sol\":\"SimpleRewarderPerSec\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"contracts/farm/v2/ISolarDistributorV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\nimport \\\"./libraries/IBoringERC20.sol\\\";\\r\\n\\r\\ninterface ISolarDistributorV2 {\\r\\n    struct UserInfo {\\r\\n        uint256 amount; // How many LP tokens the user has provided.\\r\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\r\\n    }\\r\\n\\r\\n    struct PoolInfo {\\r\\n        IBoringERC20 lpToken; // Address of LP token contract.\\r\\n        uint256 allocPoint; // How many allocation points assigned to this poolInfo. SOLAR to distribute per block.\\r\\n        uint256 lastRewardTimestamp; // Last block timestamp that SOLAR distribution occurs.\\r\\n        uint256 accSolarPerShare; // Accumulated SOLAR per share, times 1e12. See below.\\r\\n        uint256 totalLp; // Total token in Pool\\r\\n    }\\r\\n\\r\\n    function poolInfo(uint256 pid) external view returns (PoolInfo memory);\\r\\n\\r\\n    function totalAllocPoint() external view returns (uint256);\\r\\n\\r\\n    function deposit(uint256 _pid, uint256 _amount) external;\\r\\n\\r\\n    function poolLength() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x0ada90dd4ac20f0a339fc249b77773b62494aa5fbbd9f70e50cd332ccca6c856\",\"license\":\"MIT\"},\"contracts/farm/v2/libraries/BoringERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\n// solhint-disable avoid-low-level-calls\\r\\nimport \\\"./IBoringERC20.sol\\\";\\r\\n\\r\\nlibrary BoringERC20 {\\r\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\r\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\r\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\r\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\r\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\r\\n\\r\\n    function returnDataToString(bytes memory data)\\r\\n        internal\\r\\n        pure\\r\\n        returns (string memory)\\r\\n    {\\r\\n        if (data.length >= 64) {\\r\\n            return abi.decode(data, (string));\\r\\n        } else if (data.length == 32) {\\r\\n            uint8 i = 0;\\r\\n            while (i < 32 && data[i] != 0) {\\r\\n                i++;\\r\\n            }\\r\\n            bytes memory bytesArray = new bytes(i);\\r\\n            for (i = 0; i < 32 && data[i] != 0; i++) {\\r\\n                bytesArray[i] = data[i];\\r\\n            }\\r\\n            return string(bytesArray);\\r\\n        } else {\\r\\n            return \\\"???\\\";\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\\r\\n    /// @param token The address of the ERC-20 token contract.\\r\\n    /// @return (string) Token symbol.\\r\\n    function safeSymbol(IBoringERC20 token)\\r\\n        internal\\r\\n        view\\r\\n        returns (string memory)\\r\\n    {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(\\r\\n            abi.encodeWithSelector(SIG_SYMBOL)\\r\\n        );\\r\\n        return success ? returnDataToString(data) : \\\"???\\\";\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\\r\\n    /// @param token The address of the ERC-20 token contract.\\r\\n    /// @return (string) Token name.\\r\\n    function safeName(IBoringERC20 token)\\r\\n        internal\\r\\n        view\\r\\n        returns (string memory)\\r\\n    {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(\\r\\n            abi.encodeWithSelector(SIG_NAME)\\r\\n        );\\r\\n        return success ? returnDataToString(data) : \\\"???\\\";\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\\r\\n    /// @param token The address of the ERC-20 token contract.\\r\\n    /// @return (uint8) Token decimals.\\r\\n    function safeDecimals(IBoringERC20 token) internal view returns (uint8) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(\\r\\n            abi.encodeWithSelector(SIG_DECIMALS)\\r\\n        );\\r\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\r\\n    /// Reverts on a failed transfer.\\r\\n    /// @param token The address of the ERC-20 token.\\r\\n    /// @param to Transfer tokens to.\\r\\n    /// @param amount The token amount.\\r\\n    function safeTransfer(\\r\\n        IBoringERC20 token,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = address(token).call(\\r\\n            abi.encodeWithSelector(SIG_TRANSFER, to, amount)\\r\\n        );\\r\\n        require(\\r\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\r\\n            \\\"BoringERC20: Transfer failed\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\r\\n    /// Reverts on a failed transfer.\\r\\n    /// @param token The address of the ERC-20 token.\\r\\n    /// @param from Transfer tokens from.\\r\\n    /// @param to Transfer tokens to.\\r\\n    /// @param amount The token amount.\\r\\n    function safeTransferFrom(\\r\\n        IBoringERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = address(token).call(\\r\\n            abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount)\\r\\n        );\\r\\n        require(\\r\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\r\\n            \\\"BoringERC20: TransferFrom failed\\\"\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8d7fdeae919fa55b40b1d6da668d1ae791137deb154b68f24d75fe6b1901a44d\",\"license\":\"MIT\"},\"contracts/farm/v2/libraries/IBoringERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\ninterface IBoringERC20 {\\r\\n    function mint(address to, uint256 amount) external;\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n    /// @notice EIP 2612\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xf47947a40bd436a7d24bd22f3cf673977512966a6cbae11e551e48bb618044c7\",\"license\":\"MIT\"},\"contracts/farm/v2/rewarders/IRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\nimport \\\"../libraries/IBoringERC20.sol\\\";\\r\\n\\r\\ninterface IRewarder {\\r\\n    function onSolarReward(address user, uint256 newLpAmount) external;\\r\\n\\r\\n    function pendingTokens(address user)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 pending);\\r\\n\\r\\n    function rewardToken() external view returns (IBoringERC20);\\r\\n}\\r\\n\",\"keccak256\":\"0xdec362347027a4a9f8ff2f6c0d961f85d1fabba01aea9452b67b4b03f8819156\",\"license\":\"MIT\"},\"contracts/farm/v2/rewarders/SimpleRewarderPerSec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.2;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"./IRewarder.sol\\\";\\r\\nimport \\\"../ISolarDistributorV2.sol\\\";\\r\\nimport \\\"../libraries/BoringERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * This is a sample contract to be used in the SolarDistributorV2 contract for partners to reward\\r\\n * stakers with their native token alongside SOLAR.\\r\\n *\\r\\n * It assumes no minting rights, so requires a set amount of YOUR_TOKEN to be transferred to this contract prior.\\r\\n * E.g. say you've allocated 100,000 XYZ to the SOLAR-XYZ farm over 30 days. Then you would need to transfer\\r\\n * 100,000 XYZ and set the block reward accordingly so it's fully distributed after 30 days.\\r\\n */\\r\\ncontract SimpleRewarderPerSec is IRewarder, Ownable, ReentrancyGuard {\\r\\n    using BoringERC20 for IBoringERC20;\\r\\n\\r\\n    IBoringERC20 public immutable override rewardToken;\\r\\n    uint256 public immutable pid;\\r\\n    bool public immutable isNative;\\r\\n    ISolarDistributorV2 public immutable distributorV2;\\r\\n\\r\\n    /// @notice Info of each distributorV2 user.\\r\\n    /// `amount` LP token amount the user has provided.\\r\\n    /// `rewardDebt` The amount of YOUR_TOKEN entitled to the user.\\r\\n    struct UserInfo {\\r\\n        uint256 amount;\\r\\n        uint256 rewardDebt;\\r\\n        uint256 unpaidRewards;\\r\\n    }\\r\\n\\r\\n    /// @notice Info of each distributorV2 poolInfo.\\r\\n    /// `accTokenPerShare` Amount of YOUR_TOKEN each LP token is worth.\\r\\n    /// `lastRewardTimestamp` The last timestamp YOUR_TOKEN was rewarded to the poolInfo.\\r\\n    struct PoolInfo {\\r\\n        uint256 accTokenPerShare;\\r\\n        uint256 lastRewardTimestamp;\\r\\n    }\\r\\n\\r\\n    /// @notice Info of the poolInfo.\\r\\n    PoolInfo public poolInfo;\\r\\n    /// @notice Info of each user that stakes LP tokens.\\r\\n    mapping(address => UserInfo) public userInfo;\\r\\n\\r\\n    uint256 public tokenPerSec;\\r\\n    uint256 private constant ACC_TOKEN_PRECISION = 1e12;\\r\\n\\r\\n    event OnReward(address indexed user, uint256 amount);\\r\\n    event RewardRateUpdated(uint256 oldRate, uint256 newRate);\\r\\n\\r\\n    modifier onlyDistributorV2() {\\r\\n        require(\\r\\n            msg.sender == address(distributorV2),\\r\\n            \\\"onlyDistributorV2: only SolarDistributorV2 can call this function\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        IBoringERC20 _rewardToken,\\r\\n        uint256 _tokenPerSec,\\r\\n        ISolarDistributorV2 _distributorV2,\\r\\n        uint256 _pid,\\r\\n        bool _isNative\\r\\n    ) {\\r\\n        require(\\r\\n            Address.isContract(address(_rewardToken)),\\r\\n            \\\"constructor: reward token must be a valid contract\\\"\\r\\n        );\\r\\n        require(\\r\\n            Address.isContract(address(_distributorV2)),\\r\\n            \\\"constructor: SolarDistributorV2 must be a valid contract\\\"\\r\\n        );\\r\\n        rewardToken = _rewardToken;\\r\\n        pid = _pid;\\r\\n        tokenPerSec = _tokenPerSec;\\r\\n        distributorV2 = _distributorV2;\\r\\n        isNative = _isNative;\\r\\n        poolInfo = PoolInfo({\\r\\n            lastRewardTimestamp: block.timestamp,\\r\\n            accTokenPerShare: 0\\r\\n        });\\r\\n    }\\r\\n\\r\\n    /// @notice Update reward variables of the given poolInfo.\\r\\n    /// @return pool Returns the pool that was updated.\\r\\n    function updatePool() public returns (PoolInfo memory pool) {\\r\\n        pool = poolInfo;\\r\\n\\r\\n        if (block.timestamp > pool.lastRewardTimestamp) {\\r\\n            uint256 lpSupply = distributorV2.poolInfo(pid).totalLp;\\r\\n\\r\\n            if (lpSupply > 0) {\\r\\n                uint256 timeElapsed = block.timestamp -\\r\\n                    pool.lastRewardTimestamp;\\r\\n                uint256 tokenReward = timeElapsed * tokenPerSec;\\r\\n                pool.accTokenPerShare += ((tokenReward * ACC_TOKEN_PRECISION) /\\r\\n                    lpSupply);\\r\\n            }\\r\\n\\r\\n            pool.lastRewardTimestamp = block.timestamp;\\r\\n            poolInfo = pool;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Sets the distribution reward rate. This will also update the poolInfo.\\r\\n    /// @param _tokenPerSec The number of tokens to distribute per second\\r\\n    function setRewardRate(uint256 _tokenPerSec) external onlyOwner {\\r\\n        updatePool();\\r\\n\\r\\n        emit RewardRateUpdated(tokenPerSec, _tokenPerSec);\\r\\n\\r\\n        tokenPerSec = _tokenPerSec;\\r\\n    }\\r\\n\\r\\n    /// @notice internal function to see balance of reward token.\\r\\n    function _balance() internal view returns (uint256) {\\r\\n        if (isNative) {\\r\\n            return address(this).balance;\\r\\n        } else {\\r\\n            return rewardToken.balanceOf(address(this));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Function called by SolarDistributorV2 whenever staker claims SOLAR harvest. Allows staker to also receive a 2nd reward token.\\r\\n    /// @param _user Address of user\\r\\n    /// @param _lpAmount Number of LP tokens the user has\\r\\n    function onSolarReward(address _user, uint256 _lpAmount)\\r\\n        external\\r\\n        override\\r\\n        onlyDistributorV2\\r\\n        nonReentrant\\r\\n    {\\r\\n        updatePool();\\r\\n        PoolInfo memory pool = poolInfo;\\r\\n        UserInfo storage user = userInfo[_user];\\r\\n        uint256 pending;\\r\\n        uint256 rewardBalance = _balance();\\r\\n        if (user.amount > 0) {\\r\\n            pending =\\r\\n                (((user.amount * pool.accTokenPerShare) / ACC_TOKEN_PRECISION) -\\r\\n                    user.rewardDebt) +\\r\\n                user.unpaidRewards;\\r\\n\\r\\n            if (isNative) {\\r\\n                if (pending > rewardBalance) {\\r\\n                    (bool success, ) = _user.call{value: rewardBalance}(\\\"\\\");\\r\\n                    require(success, \\\"Transfer failed\\\");\\r\\n                    user.unpaidRewards = pending - rewardBalance;\\r\\n                } else {\\r\\n                    (bool success, ) = _user.call{value: pending}(\\\"\\\");\\r\\n                    require(success, \\\"Transfer failed\\\");\\r\\n                    user.unpaidRewards = 0;\\r\\n                }\\r\\n            } else {\\r\\n                if (pending > rewardBalance) {\\r\\n                    rewardToken.safeTransfer(_user, rewardBalance);\\r\\n                    user.unpaidRewards = pending - rewardBalance;\\r\\n                } else {\\r\\n                    rewardToken.safeTransfer(_user, pending);\\r\\n                    user.unpaidRewards = 0;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        user.amount = _lpAmount;\\r\\n        user.rewardDebt =\\r\\n            (user.amount * pool.accTokenPerShare) /\\r\\n            ACC_TOKEN_PRECISION;\\r\\n\\r\\n        emit OnReward(_user, pending - user.unpaidRewards);\\r\\n    }\\r\\n\\r\\n    /// @notice View function to see pending tokens\\r\\n    /// @param _user Address of user.\\r\\n    /// @return pending reward for a given user.\\r\\n    function pendingTokens(address _user)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (uint256 pending)\\r\\n    {\\r\\n        PoolInfo memory pool = poolInfo;\\r\\n        UserInfo storage user = userInfo[_user];\\r\\n\\r\\n        uint256 accTokenPerShare = pool.accTokenPerShare;\\r\\n        uint256 lpSupply = distributorV2.poolInfo(pid).totalLp;\\r\\n\\r\\n        if (block.timestamp > pool.lastRewardTimestamp && lpSupply != 0) {\\r\\n            uint256 timeElapsed = block.timestamp - pool.lastRewardTimestamp;\\r\\n            uint256 tokenReward = timeElapsed * tokenPerSec;\\r\\n            accTokenPerShare += (tokenReward * ACC_TOKEN_PRECISION) / lpSupply;\\r\\n        }\\r\\n\\r\\n        pending =\\r\\n            (((user.amount * accTokenPerShare) / ACC_TOKEN_PRECISION) -\\r\\n                user.rewardDebt) +\\r\\n            user.unpaidRewards;\\r\\n    }\\r\\n\\r\\n    /// @notice In case rewarder is stopped before emissions finished, this function allows\\r\\n    /// withdrawal of remaining tokens.\\r\\n    function emergencyWithdraw() public onlyOwner {\\r\\n        if (isNative) {\\r\\n            (bool success, ) = msg.sender.call{value: address(this).balance}(\\r\\n                \\\"\\\"\\r\\n            );\\r\\n            require(success, \\\"Transfer failed\\\");\\r\\n        } else {\\r\\n            rewardToken.safeTransfer(\\r\\n                address(msg.sender),\\r\\n                rewardToken.balanceOf(address(this))\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice View function to see balance of reward token.\\r\\n    function balance() external view returns (uint256) {\\r\\n        return _balance();\\r\\n    }\\r\\n\\r\\n    /// @notice payable function needed to receive MOVR\\r\\n    receive() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0x65da32794e196a1149b3c156bd6b9d1984ab02a90987792f8a56beae1f38a759\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b50604051620019cc380380620019cc8339810160408190526200003591620001fe565b6200004033620001a8565b600180819055506200005d85620001f860201b620011291760201c565b620000ca5760405162461bcd60e51b815260206004820152603260248201527f636f6e7374727563746f723a2072657761726420746f6b656e206d7573742062604482015271194818481d985b1a590818dbdb9d1c9858dd60721b60648201526084015b60405180910390fd5b620000e083620001f860201b620011291760201c565b620001545760405162461bcd60e51b815260206004820152603860248201527f636f6e7374727563746f723a20536f6c61724469737472696275746f7256322060448201527f6d75737420626520612076616c696420636f6e747261637400000000000000006064820152608401620000c1565b6001600160601b0319606095861b811660805260a092909252600593909355921b90911660e052151560f81b60c0526040805180820190915260008082524260209290920182905260025560035562000283565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b3b151590565b600080600080600060a086880312156200021757600080fd5b855162000224816200026a565b6020870151604088015191965094506200023e816200026a565b60608701516080880151919450925080151581146200025c57600080fd5b809150509295509295909350565b6001600160a01b03811681146200028057600080fd5b50565b60805160601c60a05160c05160f81c60e05160601c6116ab62000321600039600081816102200152818161047e01528181610abd0152610ef70152600081816101dc0152818161065f01528181610c9b01526111a801526000818161035e01528181610aec0152610ece0152600081816103b201528181610863015281816108b801528181610dbd01528181610e4e01526111ff01526116ab6000f3fe6080604052600436106100f75760003560e01c80639e447fc61161008a578063e3161ddd11610059578063e3161ddd1461031c578063f10684541461034c578063f2fde38b14610380578063f7c618c1146103a057600080fd5b80639e447fc6146102b2578063b69ef8a8146102d2578063c031a66f146102e7578063db2e21bc1461030757600080fd5b806373cfc6b2116100c657806373cfc6b2146101ca5780637d0d9d5f1461020e5780638da5cb5b146102675780639cd009771461029257600080fd5b80631959a0021461010357806350fd1f3e1461015f5780635a2f3d0914610183578063715018a6146101b357600080fd5b366100fe57005b600080fd5b34801561010f57600080fd5b5061013f61011e3660046113fe565b60046020526000908152604090208054600182015460029092015490919083565b604080519384526020840192909252908201526060015b60405180910390f35b34801561016b57600080fd5b5061017560055481565b604051908152602001610156565b34801561018f57600080fd5b5060025460035461019e919082565b60408051928352602083019190915201610156565b3480156101bf57600080fd5b506101c86103d4565b005b3480156101d657600080fd5b506101fe7f000000000000000000000000000000000000000000000000000000000000000081565b6040519015158152602001610156565b34801561021a57600080fd5b506102427f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610156565b34801561027357600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff16610242565b34801561029e57600080fd5b506101c86102ad366004611422565b610466565b3480156102be57600080fd5b506101c86102cd366004611510565b610972565b3480156102de57600080fd5b50610175610a3d565b3480156102f357600080fd5b506101756103023660046113fe565b610a4c565b34801561031357600080fd5b506101c8610c18565b34801561032857600080fd5b50610331610e75565b60408051825181526020928301519281019290925201610156565b34801561035857600080fd5b506101757f000000000000000000000000000000000000000000000000000000000000000081565b34801561038c57600080fd5b506101c861039b3660046113fe565b610ffc565b3480156103ac57600080fd5b506102427f000000000000000000000000000000000000000000000000000000000000000081565b60005473ffffffffffffffffffffffffffffffffffffffff16331461045a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b610464600061112f565b565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610551576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604160248201527f6f6e6c794469737472696275746f7256323a206f6e6c7920536f6c617244697360448201527f7472696275746f7256322063616e2063616c6c20746869732066756e6374696f60648201527f6e00000000000000000000000000000000000000000000000000000000000000608482015260a401610451565b600260015414156105be576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610451565b60026001556105cb610e75565b50604080518082018252600254815260035460208083019190915273ffffffffffffffffffffffffffffffffffffffff8516600090815260049091529182209091806106156111a4565b8354909150156108e757600283015460018401548551855464e8d4a510009161063d916115d0565b6106479190611595565b610651919061160d565b61065b919061157d565b91507f000000000000000000000000000000000000000000000000000000000000000015610841578082111561076a5760008673ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d80600081146106e5576040519150601f19603f3d011682016040523d82523d6000602084013e6106ea565b606091505b5050905080610755576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5472616e73666572206661696c656400000000000000000000000000000000006044820152606401610451565b61075f828461160d565b6002850155506108e7565b60008673ffffffffffffffffffffffffffffffffffffffff168360405160006040518083038185875af1925050503d80600081146107c4576040519150601f19603f3d011682016040523d82523d6000602084013e6107c9565b606091505b5050905080610834576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5472616e73666572206661696c656400000000000000000000000000000000006044820152606401610451565b50600060028401556108e7565b8082111561089e5761088a73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016878361128e565b610894818361160d565b60028401556108e7565b6108df73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016878461128e565b600060028401555b848355835164e8d4a51000906108fd90876115d0565b6109079190611595565b6001840155600283015473ffffffffffffffffffffffffffffffffffffffff8716907fd1072bb52c3131d0c96197b73fb8a45637e30f8b6664fc142310cc9b242859b490610955908561160d565b60405190815260200160405180910390a250506001805550505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146109f3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610451565b6109fb610e75565b5060055460408051918252602082018390527fc390a98ace15a7bb6bab611eedfdbb2685043b241a869420043cdfb23ccfee50910160405180910390a1600555565b6000610a476111a4565b905090565b604080518082018252600254815260035460208083019190915273ffffffffffffffffffffffffffffffffffffffff8085166000908152600492839052848120845195517f1526fe2700000000000000000000000000000000000000000000000000000000815291959093909286927f000000000000000000000000000000000000000000000000000000000000000090911691631526fe2791610b16917f0000000000000000000000000000000000000000000000000000000000000000910190815260200190565b60a06040518083038186803b158015610b2e57600080fd5b505afa158015610b42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b669190611470565b608001519050836020015142118015610b7e57508015155b15610bd2576000846020015142610b95919061160d565b9050600060055482610ba791906115d0565b905082610bb964e8d4a51000836115d0565b610bc39190611595565b610bcd908561157d565b935050505b60028301546001840154845464e8d4a5100090610bf09086906115d0565b610bfa9190611595565b610c04919061160d565b610c0e919061157d565b9695505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610c99576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610451565b7f000000000000000000000000000000000000000000000000000000000000000015610d7457604051600090339047908381818185875af1925050503d8060008114610d01576040519150601f19603f3d011682016040523d82523d6000602084013e610d06565b606091505b5050905080610d71576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5472616e73666572206661696c656400000000000000000000000000000000006044820152606401610451565b50565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015261046490339073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b158015610dff57600080fd5b505afa158015610e13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e379190611529565b73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016919061128e565b604080518082018252600080825260209182015281518083019092526002548252600354908201819052421115610ff9576040517f1526fe270000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000000060048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690631526fe279060240160a06040518083038186803b158015610f4e57600080fd5b505afa158015610f62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f869190611470565b6080015190508015610fe7576000826020015142610fa4919061160d565b9050600060055482610fb691906115d0565b905082610fc864e8d4a51000836115d0565b610fd29190611595565b84518590610fe190839061157d565b90525050505b50426020820181905281516002556003555b90565b60005473ffffffffffffffffffffffffffffffffffffffff16331461107d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610451565b73ffffffffffffffffffffffffffffffffffffffff8116611120576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610451565b610d718161112f565b3b151590565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60007f0000000000000000000000000000000000000000000000000000000000000000156111d157504790565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b15801561125657600080fd5b505afa15801561126a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a479190611529565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905291516000928392908716916113259190611542565b6000604051808303816000865af19150503d8060008114611362576040519150601f19603f3d011682016040523d82523d6000602084013e611367565b606091505b5091509150818015611391575080511580611391575080806020019051810190611391919061144e565b6113f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f426f72696e6745524332303a205472616e73666572206661696c6564000000006044820152606401610451565b5050505050565b60006020828403121561141057600080fd5b813561141b81611653565b9392505050565b6000806040838503121561143557600080fd5b823561144081611653565b946020939093013593505050565b60006020828403121561146057600080fd5b8151801515811461141b57600080fd5b600060a0828403121561148257600080fd5b60405160a0810181811067ffffffffffffffff821117156114cc577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405282516114da81611653565b80825250602083015160208201526040830151604082015260608301516060820152608083015160808201528091505092915050565b60006020828403121561152257600080fd5b5035919050565b60006020828403121561153b57600080fd5b5051919050565b6000825160005b818110156115635760208186018101518583015201611549565b81811115611572576000828501525b509190910192915050565b6000821982111561159057611590611624565b500190565b6000826115cb577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561160857611608611624565b500290565b60008282101561161f5761161f611624565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114610d7157600080fdfea2646970667358221220dcff51d8005ef6dbed9a5b8c5b40222b8991595fb3c937337c667ca95db4fc3c64736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106100f75760003560e01c80639e447fc61161008a578063e3161ddd11610059578063e3161ddd1461031c578063f10684541461034c578063f2fde38b14610380578063f7c618c1146103a057600080fd5b80639e447fc6146102b2578063b69ef8a8146102d2578063c031a66f146102e7578063db2e21bc1461030757600080fd5b806373cfc6b2116100c657806373cfc6b2146101ca5780637d0d9d5f1461020e5780638da5cb5b146102675780639cd009771461029257600080fd5b80631959a0021461010357806350fd1f3e1461015f5780635a2f3d0914610183578063715018a6146101b357600080fd5b366100fe57005b600080fd5b34801561010f57600080fd5b5061013f61011e3660046113fe565b60046020526000908152604090208054600182015460029092015490919083565b604080519384526020840192909252908201526060015b60405180910390f35b34801561016b57600080fd5b5061017560055481565b604051908152602001610156565b34801561018f57600080fd5b5060025460035461019e919082565b60408051928352602083019190915201610156565b3480156101bf57600080fd5b506101c86103d4565b005b3480156101d657600080fd5b506101fe7f000000000000000000000000000000000000000000000000000000000000000081565b6040519015158152602001610156565b34801561021a57600080fd5b506102427f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610156565b34801561027357600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff16610242565b34801561029e57600080fd5b506101c86102ad366004611422565b610466565b3480156102be57600080fd5b506101c86102cd366004611510565b610972565b3480156102de57600080fd5b50610175610a3d565b3480156102f357600080fd5b506101756103023660046113fe565b610a4c565b34801561031357600080fd5b506101c8610c18565b34801561032857600080fd5b50610331610e75565b60408051825181526020928301519281019290925201610156565b34801561035857600080fd5b506101757f000000000000000000000000000000000000000000000000000000000000000081565b34801561038c57600080fd5b506101c861039b3660046113fe565b610ffc565b3480156103ac57600080fd5b506102427f000000000000000000000000000000000000000000000000000000000000000081565b60005473ffffffffffffffffffffffffffffffffffffffff16331461045a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b610464600061112f565b565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610551576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604160248201527f6f6e6c794469737472696275746f7256323a206f6e6c7920536f6c617244697360448201527f7472696275746f7256322063616e2063616c6c20746869732066756e6374696f60648201527f6e00000000000000000000000000000000000000000000000000000000000000608482015260a401610451565b600260015414156105be576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610451565b60026001556105cb610e75565b50604080518082018252600254815260035460208083019190915273ffffffffffffffffffffffffffffffffffffffff8516600090815260049091529182209091806106156111a4565b8354909150156108e757600283015460018401548551855464e8d4a510009161063d916115d0565b6106479190611595565b610651919061160d565b61065b919061157d565b91507f000000000000000000000000000000000000000000000000000000000000000015610841578082111561076a5760008673ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d80600081146106e5576040519150601f19603f3d011682016040523d82523d6000602084013e6106ea565b606091505b5050905080610755576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5472616e73666572206661696c656400000000000000000000000000000000006044820152606401610451565b61075f828461160d565b6002850155506108e7565b60008673ffffffffffffffffffffffffffffffffffffffff168360405160006040518083038185875af1925050503d80600081146107c4576040519150601f19603f3d011682016040523d82523d6000602084013e6107c9565b606091505b5050905080610834576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5472616e73666572206661696c656400000000000000000000000000000000006044820152606401610451565b50600060028401556108e7565b8082111561089e5761088a73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016878361128e565b610894818361160d565b60028401556108e7565b6108df73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016878461128e565b600060028401555b848355835164e8d4a51000906108fd90876115d0565b6109079190611595565b6001840155600283015473ffffffffffffffffffffffffffffffffffffffff8716907fd1072bb52c3131d0c96197b73fb8a45637e30f8b6664fc142310cc9b242859b490610955908561160d565b60405190815260200160405180910390a250506001805550505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146109f3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610451565b6109fb610e75565b5060055460408051918252602082018390527fc390a98ace15a7bb6bab611eedfdbb2685043b241a869420043cdfb23ccfee50910160405180910390a1600555565b6000610a476111a4565b905090565b604080518082018252600254815260035460208083019190915273ffffffffffffffffffffffffffffffffffffffff8085166000908152600492839052848120845195517f1526fe2700000000000000000000000000000000000000000000000000000000815291959093909286927f000000000000000000000000000000000000000000000000000000000000000090911691631526fe2791610b16917f0000000000000000000000000000000000000000000000000000000000000000910190815260200190565b60a06040518083038186803b158015610b2e57600080fd5b505afa158015610b42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b669190611470565b608001519050836020015142118015610b7e57508015155b15610bd2576000846020015142610b95919061160d565b9050600060055482610ba791906115d0565b905082610bb964e8d4a51000836115d0565b610bc39190611595565b610bcd908561157d565b935050505b60028301546001840154845464e8d4a5100090610bf09086906115d0565b610bfa9190611595565b610c04919061160d565b610c0e919061157d565b9695505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610c99576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610451565b7f000000000000000000000000000000000000000000000000000000000000000015610d7457604051600090339047908381818185875af1925050503d8060008114610d01576040519150601f19603f3d011682016040523d82523d6000602084013e610d06565b606091505b5050905080610d71576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5472616e73666572206661696c656400000000000000000000000000000000006044820152606401610451565b50565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015261046490339073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b158015610dff57600080fd5b505afa158015610e13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e379190611529565b73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016919061128e565b604080518082018252600080825260209182015281518083019092526002548252600354908201819052421115610ff9576040517f1526fe270000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000000060048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690631526fe279060240160a06040518083038186803b158015610f4e57600080fd5b505afa158015610f62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f869190611470565b6080015190508015610fe7576000826020015142610fa4919061160d565b9050600060055482610fb691906115d0565b905082610fc864e8d4a51000836115d0565b610fd29190611595565b84518590610fe190839061157d565b90525050505b50426020820181905281516002556003555b90565b60005473ffffffffffffffffffffffffffffffffffffffff16331461107d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610451565b73ffffffffffffffffffffffffffffffffffffffff8116611120576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610451565b610d718161112f565b3b151590565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60007f0000000000000000000000000000000000000000000000000000000000000000156111d157504790565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b15801561125657600080fd5b505afa15801561126a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a479190611529565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905291516000928392908716916113259190611542565b6000604051808303816000865af19150503d8060008114611362576040519150601f19603f3d011682016040523d82523d6000602084013e611367565b606091505b5091509150818015611391575080511580611391575080806020019051810190611391919061144e565b6113f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f426f72696e6745524332303a205472616e73666572206661696c6564000000006044820152606401610451565b5050505050565b60006020828403121561141057600080fd5b813561141b81611653565b9392505050565b6000806040838503121561143557600080fd5b823561144081611653565b946020939093013593505050565b60006020828403121561146057600080fd5b8151801515811461141b57600080fd5b600060a0828403121561148257600080fd5b60405160a0810181811067ffffffffffffffff821117156114cc577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405282516114da81611653565b80825250602083015160208201526040830151604082015260608301516060820152608083015160808201528091505092915050565b60006020828403121561152257600080fd5b5035919050565b60006020828403121561153b57600080fd5b5051919050565b6000825160005b818110156115635760208186018101518583015201611549565b81811115611572576000828501525b509190910192915050565b6000821982111561159057611590611624565b500190565b6000826115cb577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561160857611608611624565b500290565b60008282101561161f5761161f611624565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114610d7157600080fdfea2646970667358221220dcff51d8005ef6dbed9a5b8c5b40222b8991595fb3c937337c667ca95db4fc3c64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "onSolarReward(address,uint256)": {
        "params": {
          "_lpAmount": "Number of LP tokens the user has",
          "_user": "Address of user"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingTokens(address)": {
        "params": {
          "_user": "Address of user."
        },
        "returns": {
          "pending": "reward for a given user."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setRewardRate(uint256)": {
        "params": {
          "_tokenPerSec": "The number of tokens to distribute per second"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updatePool()": {
        "returns": {
          "pool": "Returns the pool that was updated."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "balance()": {
        "notice": "View function to see balance of reward token."
      },
      "emergencyWithdraw()": {
        "notice": "In case rewarder is stopped before emissions finished, this function allows withdrawal of remaining tokens."
      },
      "onSolarReward(address,uint256)": {
        "notice": "Function called by SolarDistributorV2 whenever staker claims SOLAR harvest. Allows staker to also receive a 2nd reward token."
      },
      "pendingTokens(address)": {
        "notice": "View function to see pending tokens"
      },
      "poolInfo()": {
        "notice": "Info of the poolInfo."
      },
      "setRewardRate(uint256)": {
        "notice": "Sets the distribution reward rate. This will also update the poolInfo."
      },
      "updatePool()": {
        "notice": "Update reward variables of the given poolInfo."
      },
      "userInfo(address)": {
        "notice": "Info of each user that stakes LP tokens."
      }
    },
    "notice": "This is a sample contract to be used in the SolarDistributorV2 contract for partners to reward stakers with their native token alongside SOLAR. It assumes no minting rights, so requires a set amount of YOUR_TOKEN to be transferred to this contract prior. E.g. say you've allocated 100,000 XYZ to the SOLAR-XYZ farm over 30 days. Then you would need to transfer 100,000 XYZ and set the block reward accordingly so it's fully distributed after 30 days.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 375,
        "contract": "contracts/farm/v2/rewarders/SimpleRewarderPerSec.sol:SimpleRewarderPerSec",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 650,
        "contract": "contracts/farm/v2/rewarders/SimpleRewarderPerSec.sol:SimpleRewarderPerSec",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 12041,
        "contract": "contracts/farm/v2/rewarders/SimpleRewarderPerSec.sol:SimpleRewarderPerSec",
        "label": "poolInfo",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(PoolInfo)12037_storage"
      },
      {
        "astId": 12047,
        "contract": "contracts/farm/v2/rewarders/SimpleRewarderPerSec.sol:SimpleRewarderPerSec",
        "label": "userInfo",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(UserInfo)12032_storage)"
      },
      {
        "astId": 12049,
        "contract": "contracts/farm/v2/rewarders/SimpleRewarderPerSec.sol:SimpleRewarderPerSec",
        "label": "tokenPerSec",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)12032_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SimpleRewarderPerSec.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)12032_storage"
      },
      "t_struct(PoolInfo)12037_storage": {
        "encoding": "inplace",
        "label": "struct SimpleRewarderPerSec.PoolInfo",
        "members": [
          {
            "astId": 12034,
            "contract": "contracts/farm/v2/rewarders/SimpleRewarderPerSec.sol:SimpleRewarderPerSec",
            "label": "accTokenPerShare",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 12036,
            "contract": "contracts/farm/v2/rewarders/SimpleRewarderPerSec.sol:SimpleRewarderPerSec",
            "label": "lastRewardTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UserInfo)12032_storage": {
        "encoding": "inplace",
        "label": "struct SimpleRewarderPerSec.UserInfo",
        "members": [
          {
            "astId": 12027,
            "contract": "contracts/farm/v2/rewarders/SimpleRewarderPerSec.sol:SimpleRewarderPerSec",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 12029,
            "contract": "contracts/farm/v2/rewarders/SimpleRewarderPerSec.sol:SimpleRewarderPerSec",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 12031,
            "contract": "contracts/farm/v2/rewarders/SimpleRewarderPerSec.sol:SimpleRewarderPerSec",
            "label": "unpaidRewards",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}