{
  "address": "0x022Bcb66662Bb3854b6f16bAbD4c13BFa3dB0b08",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_offeringToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_startBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_vestingBlockOffset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_eligibilityThreshold",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_solarVault",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_harvestReleasePercent",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "_multipliers",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AdminTokenRecovery",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountLP",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOfferingToken",
          "type": "uint256"
        }
      ],
      "name": "AdminWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "ClaimEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "offeringAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "excessAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "pid",
          "type": "uint8"
        }
      ],
      "name": "Harvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16[3]",
          "name": "poolStakedThresholds",
          "type": "uint16[3]"
        },
        {
          "indexed": false,
          "internalType": "uint8[3]",
          "name": "poolBaseMultiplier",
          "type": "uint8[3]"
        },
        {
          "indexed": false,
          "internalType": "uint8[3][3]",
          "name": "poolStakedMultipliers",
          "type": "uint8[3][3]"
        }
      ],
      "name": "MultiplierParametersSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endBlock",
          "type": "uint256"
        }
      ],
      "name": "NewStartAndEndBlocks",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "raisingAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "offeringAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "pid",
          "type": "uint8"
        }
      ],
      "name": "PoolParametersSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "HARVEST_PERIODS",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NUMBER_THRESHOLDS",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NUMBER_VAULT_POOLS",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_pid",
          "type": "uint8"
        }
      ],
      "name": "depositPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eligibilityThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lpAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_offerAmount",
          "type": "uint256"
        }
      ],
      "name": "finalWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserEligibility",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserMultiplier",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_pid",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_harvestPeriod",
          "type": "uint8"
        }
      ],
      "name": "harvestPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "harvestReleaseBlocks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "harvestReleasePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_pid",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_harvestPeriod",
          "type": "uint8"
        }
      ],
      "name": "hasHarvested",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberPools",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "offeringToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "raisingAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "offeringAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "baseLimitInLP",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "hasTax",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "totalAmountPool",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sumTaxesOverflow",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalAllocPoints",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eligibilityThreshold",
          "type": "uint256"
        }
      ],
      "name": "setEligibilityThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_multipliers",
          "type": "bytes"
        }
      ],
      "name": "setMultipliers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_offeringToken",
          "type": "address"
        }
      ],
      "name": "setOfferingToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_raisingAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_offeringAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_baseLimitInLP",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_hasTax",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "_pid",
          "type": "uint8"
        }
      ],
      "name": "setPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "sweep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endBlock",
          "type": "uint256"
        }
      ],
      "name": "updateStartAndEndBlocks",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "allocPoints",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isRefunded",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "contract SolarVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "viewMultipliers",
      "outputs": [
        {
          "internalType": "uint16[]",
          "name": "",
          "type": "uint16[]"
        },
        {
          "internalType": "uint8[]",
          "name": "",
          "type": "uint8[]"
        },
        {
          "internalType": "uint8[][]",
          "name": "",
          "type": "uint8[][]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "viewPoolTaxRateOverflow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint8[]",
          "name": "_pids",
          "type": "uint8[]"
        }
      ],
      "name": "viewUserAllocationPools",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint8[]",
          "name": "_pids",
          "type": "uint8[]"
        }
      ],
      "name": "viewUserOfferingAndRefundingAmountsForPools",
      "outputs": [
        {
          "internalType": "uint256[3][]",
          "name": "",
          "type": "uint256[3][]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_pid",
          "type": "uint8"
        }
      ],
      "name": "withdrawPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x617f063181e2edaa638f0097e32a9d971b85ed72d8b3ffe530a54559ac977b0f",
  "receipt": {
    "to": null,
    "from": "0xf884c8774b09b3302f98e38C944eB352264024F8",
    "contractAddress": "0x022Bcb66662Bb3854b6f16bAbD4c13BFa3dB0b08",
    "transactionIndex": 4,
    "gasUsed": "4579750",
    "logsBloom": "0x
    "blockHash": "0x7ada216dbeb2b0da6f2feaca7cf896d7e8b84ec83f4b6b2805a14b55e1ea40ff",
    "transactionHash": "0x617f063181e2edaa638f0097e32a9d971b85ed72d8b3ffe530a54559ac977b0f",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 807763,
        "transactionHash": "0x617f063181e2edaa638f0097e32a9d971b85ed72d8b3ffe530a54559ac977b0f",
        "address": "0x022Bcb66662Bb3854b6f16bAbD4c13BFa3dB0b08",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f884c8774b09b3302f98e38c944eb352264024f8"
        ],
        "data": "0x",
        "logIndex": 25,
        "blockHash": "0x7ada216dbeb2b0da6f2feaca7cf896d7e8b84ec83f4b6b2805a14b55e1ea40ff"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 807763,
        "transactionHash": "0x617f063181e2edaa638f0097e32a9d971b85ed72d8b3ffe530a54559ac977b0f",
        "address": "0x022Bcb66662Bb3854b6f16bAbD4c13BFa3dB0b08",
        "topics": [
          "0xbfd876ad455399d10dc2d1788e56b9526a9ca9d32b9e5c6dc9b7a8d63f8d2ef1"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000009600000000000000000000000000000000000000000000000000000000000001f400000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000a",
        "logIndex": 26,
        "blockHash": "0x7ada216dbeb2b0da6f2feaca7cf896d7e8b84ec83f4b6b2805a14b55e1ea40ff"
      }
    ],
    "blockNumber": 807763,
    "cumulativeGasUsed": "5528930",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7eDA899b3522683636746a2f3a7814e6fFca75e1",
    "0x1e0F2A75Be02c025Bd84177765F89200c04337Da",
    809480,
    810960,
    177534,
    "50000000000000000000",
    "0x7e6E03822D0077F3C417D33caeAc900Fc2645679",
    [
      3000,
      2333,
      2333,
      2334
    ],
    "0x000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000009600000000000000000000000000000000000000000000000000000000000001f4000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000a"
  ],
  "solcInputHash": "08ce50431086bdfe518be638679460b0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_offeringToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingBlockOffset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_eligibilityThreshold\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_solarVault\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_harvestReleasePercent\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_multipliers\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AdminTokenRecovery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOfferingToken\",\"type\":\"uint256\"}],\"name\":\"AdminWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ClaimEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offeringAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"excessAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"pid\",\"type\":\"uint8\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16[3]\",\"name\":\"poolStakedThresholds\",\"type\":\"uint16[3]\"},{\"indexed\":false,\"internalType\":\"uint8[3]\",\"name\":\"poolBaseMultiplier\",\"type\":\"uint8[3]\"},{\"indexed\":false,\"internalType\":\"uint8[3][3]\",\"name\":\"poolStakedMultipliers\",\"type\":\"uint8[3][3]\"}],\"name\":\"MultiplierParametersSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"}],\"name\":\"NewStartAndEndBlocks\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"raisingAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offeringAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"pid\",\"type\":\"uint8\"}],\"name\":\"PoolParametersSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"HARVEST_PERIODS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NUMBER_THRESHOLDS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NUMBER_VAULT_POOLS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_pid\",\"type\":\"uint8\"}],\"name\":\"depositPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eligibilityThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_offerAmount\",\"type\":\"uint256\"}],\"name\":\"finalWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserEligibility\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserMultiplier\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pid\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_harvestPeriod\",\"type\":\"uint8\"}],\"name\":\"harvestPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"harvestReleaseBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"harvestReleasePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_pid\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_harvestPeriod\",\"type\":\"uint8\"}],\"name\":\"hasHarvested\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberPools\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"offeringToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"raisingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offeringAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseLimitInLP\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasTax\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sumTaxesOverflow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocPoints\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eligibilityThreshold\",\"type\":\"uint256\"}],\"name\":\"setEligibilityThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_multipliers\",\"type\":\"bytes\"}],\"name\":\"setMultipliers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_offeringToken\",\"type\":\"address\"}],\"name\":\"setOfferingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_raisingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_offeringAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_baseLimitInLP\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_hasTax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"_pid\",\"type\":\"uint8\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endBlock\",\"type\":\"uint256\"}],\"name\":\"updateStartAndEndBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocPoints\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isRefunded\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract SolarVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewMultipliers\",\"outputs\":[{\"internalType\":\"uint16[]\",\"name\":\"\",\"type\":\"uint16[]\"},{\"internalType\":\"uint8[]\",\"name\":\"\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[][]\",\"name\":\"\",\"type\":\"uint8[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"viewPoolTaxRateOverflow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"_pids\",\"type\":\"uint8[]\"}],\"name\":\"viewUserAllocationPools\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"_pids\",\"type\":\"uint8[]\"}],\"name\":\"viewUserOfferingAndRefundingAmountsForPools\",\"outputs\":[{\"internalType\":\"uint256[3][]\",\"name\":\"\",\"type\":\"uint256[3][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_pid\",\"type\":\"uint8\"}],\"name\":\"withdrawPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"depositPool(uint256,uint8)\":{\"details\":\"cannot withdraw LP tokens or Offering tokens\",\"params\":{\"_amount\":\": amount of LP tokens to deposit\",\"_pid\":\": pool to depoist in\"}},\"enableClaim()\":{\"details\":\"This function is only callable by owner.\"},\"finalWithdraw(uint256,uint256)\":{\"details\":\"can only withdraw after the sale is finished\",\"params\":{\"_lpAmount\":\": amount of LP token to withdraw\",\"_offerAmount\":\": amount of IDO tokens to withdraw\"}},\"harvestPool(uint8,uint8)\":{\"params\":{\"_harvestPeriod\":\": chosen harvest period to claim\",\"_pid\":\": pool id\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setEligibilityThreshold(uint256)\":{\"params\":{\"_eligibilityThreshold\":\": Number of solar staked to be eligibile. (1e18)\"}},\"setMultipliers(bytes)\":{\"params\":{\"_multipliers\":\": abi encoded arrays\"}},\"setPool(uint256,uint256,uint256,bool,uint8)\":{\"details\":\"If _baseLimitInLP is set to zero, the allocation will be weighted by allocation points. (see below)\",\"params\":{\"_baseLimitInLP\":\": base limit of tokens per eligible user (if 0, it is ignored) (1e18)\",\"_hasTax\":\": true if a pool is to be taxed on overflow\",\"_offeringAmount\":\": amount of IDO tokens the pool is offering (1e18)\",\"_pid\":\": pool identification number\",\"_raisingAmount\":\": amount of LP token the pool aims to raise (1e18)\"}},\"sweep(address,uint256)\":{\"details\":\"cannot withdraw LP tokens or Offering tokens\",\"params\":{\"_amount\":\": amount to withdraw\",\"_tokenAddress\":\": address of ERC20 token to withdraw\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"viewPoolTaxRateOverflow(uint256)\":{\"details\":\"100,000,000,000 means 0.1 (10%) / 1 means 0.0000000000001 (0.0000001%) / 1,000,000,000,000 means 1 (100%)\",\"params\":{\"_pid\":\": poolId\"},\"returns\":{\"_0\":\"It returns the tax percentage\"}},\"viewUserAllocationPools(address,uint8[])\":{\"params\":{\"_pids\":\"[]: array of pids\",\"_user\":\": user address\"},\"returns\":{\"_0\":\"\"}},\"viewUserOfferingAndRefundingAmountsForPools(address,uint8[])\":{\"params\":{\"_pids\":\": array of pids\",\"_user\":\": user address\"}},\"withdrawPool(uint256,uint8)\":{\"params\":{\"_amount\":\": the number of LP token used (18 decimals)\",\"_pid\":\": pool id\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"depositPool(uint256,uint8)\":{\"notice\":\"It lets users deposit into a pool for a share of offering tokens\"},\"enableClaim()\":{\"notice\":\"It allows the admin to end sale and start claim\"},\"finalWithdraw(uint256,uint256)\":{\"notice\":\"It allows the owner to withdraw LPtokens and Offering tokens after the sale\"},\"harvestPool(uint8,uint8)\":{\"notice\":\"It allows users to harvest from pool\"},\"setEligibilityThreshold(uint256)\":{\"notice\":\"It sets the threshold of solar staked to be eligible to participate.\"},\"setMultipliers(bytes)\":{\"notice\":\"It sets the multiplier matrix.\"},\"setPool(uint256,uint256,uint256,bool,uint8)\":{\"notice\":\"It creates a pool.\"},\"sweep(address,uint256)\":{\"notice\":\"It allows the owner to withdraw ERC20 tokens\"},\"updateStartAndEndBlocks(uint256,uint256)\":{\"notice\":\"It sets the start and end blocks of the sale.\"},\"viewPoolTaxRateOverflow(uint256)\":{\"notice\":\"It returns the tax overflow rate calculated for a pool\"},\"viewUserAllocationPools(address,uint8[])\":{\"notice\":\"External view function to see user allocations for both pools\"},\"viewUserOfferingAndRefundingAmountsForPools(address,uint8[])\":{\"notice\":\"External view function to see user offering and refunding amounts for both pools\"},\"withdrawPool(uint256,uint8)\":{\"notice\":\"It allows users to withdraw LP tokens to pool\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/eclipse/CommonEclipse.sol\":\"CommonEclipse\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/eclipse/CommonEclipse.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"../farm/SolarVault.sol\\\";\\r\\nimport \\\"./ICommonEclipse.sol\\\";\\r\\n\\r\\ncontract CommonEclipse is ICommonEclipse, ReentrancyGuard, Ownable {\\r\\n  using SafeERC20 for IERC20;\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                                STORAGE\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    IERC20 public lpToken;\\r\\n    IERC20 public offeringToken;\\r\\n\\r\\n    SolarVault public vault;\\r\\n\\r\\n    uint8 public constant HARVEST_PERIODS = 4; // number of periods to split offering token to vest.\\r\\n\\r\\n    uint8 public constant NUMBER_VAULT_POOLS = 3; // number of solar vault pools to check for stake.\\r\\n\\r\\n    uint8 public constant NUMBER_THRESHOLDS = 3; // number of solar staked threshold for multipliers per pool.\\r\\n\\r\\n    uint256[HARVEST_PERIODS] public harvestReleaseBlocks;\\r\\n    uint256[HARVEST_PERIODS] public harvestReleasePercent;\\r\\n\\r\\n    uint256 public startBlock;\\r\\n\\r\\n    uint256 public endBlock;\\r\\n\\r\\n    uint256 public eligibilityThreshold; // minimum solar staked to be eligible.\\r\\n\\r\\n    bool public claimEnabled = false; // flag to enable harvests after liquidity is added.\\r\\n\\r\\n    /**\\r\\n     * @dev The struct stores the each pools base multiplier, and additional\\r\\n     * multipliers based on meeting staked threshold requirements.\\r\\n     */\\r\\n    struct Multipliers {\\r\\n        uint16[NUMBER_THRESHOLDS] poolThresholds;\\r\\n        uint8[NUMBER_VAULT_POOLS] poolBaseMult;\\r\\n        uint8[NUMBER_THRESHOLDS][NUMBER_VAULT_POOLS] poolMultipliers;\\r\\n    }\\r\\n\\r\\n    struct UserInfo {\\r\\n        uint256 amount; // How many tokens the user has provided for pool\\r\\n        uint256 allocPoints; // Used to weight user allocation based on amount locked in solar vaults\\r\\n        bool[HARVEST_PERIODS] claimed; // Whether the user has claimed (default: false) for pool\\r\\n        bool isRefunded; // Wheter the user has been refunded or not.\\r\\n    }\\r\\n\\r\\n    struct PoolInfo {\\r\\n        uint256 raisingAmount; // amount of tokens raised for the pool (in LP tokens)\\r\\n        uint256 offeringAmount; // amount of tokens offered for the pool (in offeringTokens)\\r\\n        uint256 baseLimitInLP; // base limit of tokens per eligible user (if 0, it is ignored)\\r\\n        bool hasTax; // if a pool is to be taxed on overflow or not\\r\\n        uint256 totalAmountPool; // total amount pool deposited (in LP tokens)\\r\\n        uint256 sumTaxesOverflow; // total taxes collected (starts at 0, increases with each harvest if overflow)\\r\\n        uint256 totalAllocPoints;\\r\\n    }\\r\\n\\r\\n    uint8 public constant numberPools = 2; // max number of pools that are to be created.\\r\\n\\r\\n    mapping(address => mapping(uint8 => UserInfo)) public userInfo;\\r\\n\\r\\n    PoolInfo[numberPools] public poolInfo;\\r\\n\\r\\n    Multipliers private _multiplierInfo;\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                                EVENTS\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n    event Deposit(address indexed user, uint256 amount, uint256 indexed pid);\\r\\n    event Withdraw(address indexed user, uint256 amount, uint256 indexed pid);\\r\\n    event Harvest(address indexed user, uint256 offeringAmount, uint256 excessAmount, uint8 indexed pid);\\r\\n    event NewStartAndEndBlocks(uint256 startBlock, uint256 endBlock);\\r\\n    event PoolParametersSet(uint256 raisingAmount, uint256 offeringAmount, uint8 pid);\\r\\n    event MultiplierParametersSet(\\r\\n        uint16[NUMBER_THRESHOLDS] poolStakedThresholds,\\r\\n        uint8[NUMBER_VAULT_POOLS] poolBaseMultiplier,\\r\\n        uint8[NUMBER_THRESHOLDS][NUMBER_VAULT_POOLS] poolStakedMultipliers\\r\\n        );\\r\\n    event AdminWithdraw(uint256 amountLP, uint256 amountOfferingToken);\\r\\n    event AdminTokenRecovery(address token, uint256 amount);\\r\\n    event ClaimEnabled();\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                               MODIFIERS\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n    /**\\r\\n     * @notice It checks if the current block is within the sale period.\\r\\n     */\\r\\n    modifier onlyWhenActive() {\\r\\n        require(\\r\\n            block.number >= startBlock && block.number < endBlock,\\r\\n            \\\"Sale not active\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n    /**\\r\\n     * @notice It checks if sale ended and claim is enabled\\r\\n     */\\r\\n    modifier onlyFinished() {\\r\\n        require(block.number >= endBlock && claimEnabled, \\\"sale not finished\\\");\\r\\n        _;\\r\\n    }\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                              CONSTRUCTOR\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    constructor(\\r\\n        IERC20 _lpToken,\\r\\n        IERC20 _offeringToken,\\r\\n        uint256 _startBlock,\\r\\n        uint256 _endBlock,\\r\\n        uint256 _vestingBlockOffset, // Number of Blocks to offset for each harvest period\\r\\n        uint256 _eligibilityThreshold, // (1e18)\\r\\n        address _solarVault,\\r\\n        uint256[] memory _harvestReleasePercent,\\r\\n        bytes memory _multipliers\\r\\n    ){\\r\\n        require(_lpToken.totalSupply() >= 0);\\r\\n        require(_offeringToken.totalSupply() >= 0);\\r\\n        require(_lpToken != _offeringToken, \\\"Tokens must be different\\\");\\r\\n        require(_harvestReleasePercent.length == HARVEST_PERIODS, \\\"harvest schedule must match\\\");\\r\\n\\r\\n        uint256 totalPercent = 0;\\r\\n        for (uint256 i = 0; i < _harvestReleasePercent.length; i++) {\\r\\n            totalPercent += _harvestReleasePercent[i];\\r\\n        }\\r\\n\\r\\n        require(totalPercent == 10000, \\\"harvest percent must total 10000\\\");\\r\\n\\r\\n        lpToken = _lpToken;\\r\\n        offeringToken = _offeringToken;\\r\\n        startBlock = _startBlock;\\r\\n        endBlock = _endBlock;\\r\\n        eligibilityThreshold = _eligibilityThreshold;\\r\\n        vault = SolarVault(_solarVault);\\r\\n\\r\\n        _setMultipliers(_multipliers);\\r\\n\\r\\n        for (uint256 i = 0; i < HARVEST_PERIODS; i++) {\\r\\n            harvestReleaseBlocks[i] = endBlock + (_vestingBlockOffset * i);\\r\\n            harvestReleasePercent[i] = _harvestReleasePercent[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setOfferingToken(IERC20 _offeringToken) public onlyOwner {\\r\\n        require(block.number < startBlock, \\\"sale is already active\\\");        \\r\\n        require(_offeringToken.totalSupply() >= 0);\\r\\n        offeringToken = _offeringToken;\\r\\n    }\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                            POOL MANAGEMENT\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n    /**\\r\\n     * @notice It sets the threshold of solar staked to be eligible to participate.\\r\\n     * @param _eligibilityThreshold: Number of solar staked to be eligibile. (1e18)\\r\\n     */\\r\\n    function setEligibilityThreshold(uint256 _eligibilityThreshold) public override onlyOwner {\\r\\n        require(block.number < startBlock, \\\"sale is already active\\\");\\r\\n        eligibilityThreshold = _eligibilityThreshold;\\r\\n    }\\r\\n    /**\\r\\n     * @notice It sets the multiplier matrix.\\r\\n     * @param _multipliers: abi encoded arrays\\r\\n     */\\r\\n    function setMultipliers(bytes memory _multipliers) public override onlyOwner {\\r\\n        require(block.number < startBlock, \\\"sale is already active\\\");\\r\\n        _setMultipliers(_multipliers);\\r\\n    }\\r\\n    /**\\r\\n     * @notice Private helper to set multiplier matrix.\\r\\n     */\\r\\n    function _setMultipliers(bytes memory _multipliers) private {\\r\\n        (\\r\\n            uint16[] memory thresholds,\\r\\n            uint8[] memory base,\\r\\n            uint8[][] memory mults\\r\\n\\r\\n            ) = abi.decode(_multipliers,(\\r\\n                uint16[],\\r\\n                uint8[],\\r\\n                uint8[][]\\r\\n            ));\\r\\n        require(\\r\\n            base.length == NUMBER_VAULT_POOLS && mults.length == NUMBER_VAULT_POOLS,\\r\\n            \\\"bad vault pool length\\\"\\r\\n        );\\r\\n        require(thresholds.length == NUMBER_THRESHOLDS ,\\\"bad threshold length\\\");\\r\\n\\r\\n        for (uint8 i = 0; i < NUMBER_THRESHOLDS; i++) {\\r\\n            _multiplierInfo.poolThresholds[i] =  thresholds[i];\\r\\n        }\\r\\n\\r\\n        for (uint8 i = 0; i < NUMBER_VAULT_POOLS; i++){\\r\\n            _multiplierInfo.poolBaseMult[i] = base[i];\\r\\n            require(mults[i].length == NUMBER_THRESHOLDS, \\\"bad threshold length\\\");\\r\\n            for ( uint8 j = 0; j < NUMBER_THRESHOLDS; j++) {\\r\\n               _multiplierInfo.poolMultipliers[i][j] =  mults[i][j];\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit MultiplierParametersSet(\\r\\n            _multiplierInfo.poolThresholds,\\r\\n            _multiplierInfo.poolBaseMult,\\r\\n            _multiplierInfo.poolMultipliers\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice It creates a pool.\\r\\n     * @dev If _baseLimitInLP is set to zero, the allocation will be weighted by allocation points. (see below)\\r\\n     * @param _raisingAmount: amount of LP token the pool aims to raise (1e18)\\r\\n     * @param _offeringAmount: amount of IDO tokens the pool is offering (1e18)\\r\\n     * @param _baseLimitInLP: base limit of tokens per eligible user (if 0, it is ignored) (1e18)\\r\\n     * @param _hasTax: true if a pool is to be taxed on overflow\\r\\n     * @param _pid: pool identification number\\r\\n     */\\r\\n    function setPool(\\r\\n        uint256 _raisingAmount,\\r\\n        uint256 _offeringAmount,\\r\\n        uint256 _baseLimitInLP,\\r\\n        bool _hasTax,\\r\\n        uint8 _pid\\r\\n    ) external override onlyOwner{\\r\\n        require(block.number < startBlock, \\\"sale is already active\\\");\\r\\n        require(_pid < numberPools, \\\"pool does not exist\\\");\\r\\n\\r\\n        poolInfo[_pid].raisingAmount = _raisingAmount;\\r\\n        poolInfo[_pid].offeringAmount = _offeringAmount;\\r\\n        poolInfo[_pid].baseLimitInLP = _baseLimitInLP;\\r\\n        poolInfo[_pid].hasTax = _hasTax;\\r\\n\\r\\n        emit PoolParametersSet(_offeringAmount, _raisingAmount, _pid);\\r\\n    }\\r\\n    /**\\r\\n     * @notice It sets the start and end blocks of the sale.\\r\\n     */\\r\\n    function updateStartAndEndBlocks(uint256 _startBlock, uint256 _endBlock) external override onlyOwner {\\r\\n        require(block.number < startBlock, \\\"sale is already active\\\");\\r\\n        require(_startBlock < _endBlock, \\\"new startBlock must be lower than new endBlock\\\");\\r\\n        require(block.number < _startBlock, \\\"New startBlock must be higher than current block\\\");\\r\\n\\r\\n        startBlock = _startBlock;\\r\\n        endBlock = _endBlock;\\r\\n\\r\\n        emit NewStartAndEndBlocks(_startBlock, _endBlock);\\r\\n    }\\r\\n    /**\\r\\n     * @notice It allows the owner to withdraw LPtokens and Offering tokens after the sale\\r\\n     * @dev can only withdraw after the sale is finished\\r\\n     * @param _lpAmount: amount of LP token to withdraw\\r\\n     * @param _offerAmount: amount of IDO tokens to withdraw\\r\\n     */\\r\\n    function finalWithdraw(uint256 _lpAmount, uint256 _offerAmount) external override onlyOwner {\\r\\n        require(block.number > endBlock, \\\"sale has not finished\\\");\\r\\n        require(_lpAmount <= lpToken.balanceOf(address(this)), \\\"Not enough LP tokens\\\");\\r\\n        require(_offerAmount <= offeringToken.balanceOf(address(this)), \\\"Not enough offering tokens\\\");\\r\\n\\r\\n        if (_lpAmount > 0) {\\r\\n            lpToken.safeTransfer(address(msg.sender), _lpAmount);\\r\\n        }\\r\\n\\r\\n        if (_offerAmount > 0) {\\r\\n            offeringToken.safeTransfer(address(msg.sender), _offerAmount);\\r\\n        }\\r\\n\\r\\n        emit AdminWithdraw(_lpAmount, _offerAmount);\\r\\n    }\\r\\n    /**\\r\\n     * @notice It allows the owner to withdraw ERC20 tokens\\r\\n     * @dev cannot withdraw LP tokens or Offering tokens\\r\\n     * @param _tokenAddress: address of ERC20 token to withdraw\\r\\n     * @param _amount: amount to withdraw\\r\\n     */\\r\\n    function sweep(address _tokenAddress, uint256 _amount) external onlyOwner {\\r\\n        require(\\r\\n            _tokenAddress != address(lpToken) && _tokenAddress != address(offeringToken),\\r\\n            \\\"Cannot be LP or Offering token\\\"\\r\\n        );\\r\\n        IERC20(_tokenAddress).safeTransfer(address(msg.sender), _amount);\\r\\n\\r\\n        emit AdminTokenRecovery(_tokenAddress, _amount);\\r\\n    }\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                            DEPOSIT LOGIC\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n    /**\\r\\n     * @notice It lets users deposit into a pool for a share of offering tokens\\r\\n     * @dev cannot withdraw LP tokens or Offering tokens\\r\\n     * @param _amount: amount of LP tokens to deposit\\r\\n     * @param _pid: pool to depoist in\\r\\n     */\\r\\n    function depositPool(uint256 _amount, uint8 _pid) external override onlyWhenActive nonReentrant {\\r\\n        UserInfo storage user = userInfo[msg.sender][_pid];\\r\\n\\r\\n        require(_pid < numberPools, \\\"pool does not exist\\\");\\r\\n\\r\\n        require(\\r\\n            poolInfo[_pid].offeringAmount > 0 && poolInfo[_pid].raisingAmount > 0,\\r\\n            \\\"Pool not set\\\"\\r\\n        );\\r\\n\\r\\n        for (uint8 i = 0; i < numberPools; i++) {\\r\\n          if (i != _pid) {\\r\\n            require(userInfo[msg.sender][i].amount == 0, \\\"already commited in another pool\\\");\\r\\n          }\\r\\n        }\\r\\n\\r\\n        for (uint256 i=0; i<NUMBER_VAULT_POOLS; i++) {\\r\\n            vault.deposit(i,0);\\r\\n        }\\r\\n        (bool success) = getUserEligibility(address(msg.sender));\\r\\n        require(success, \\\"user not eligible\\\");\\r\\n\\r\\n        lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\\r\\n\\r\\n        user.amount += _amount;\\r\\n\\r\\n        if (poolInfo[_pid].baseLimitInLP > 0) {\\r\\n            (uint16 multiplier) = getUserMultiplier(msg.sender);\\r\\n            require(\\r\\n                user.amount <= (poolInfo[_pid].baseLimitInLP * uint256(multiplier)), \\\"New amount above user limit\\\"\\r\\n            );\\r\\n        } else {\\r\\n            (uint16 multiplier) = getUserMultiplier(msg.sender);\\r\\n            poolInfo[_pid].totalAllocPoints -= userInfo[msg.sender][_pid].allocPoints;\\r\\n            userInfo[msg.sender][_pid].allocPoints = user.amount * uint256(multiplier);\\r\\n            poolInfo[_pid].totalAllocPoints += userInfo[msg.sender][_pid].allocPoints;\\r\\n        }\\r\\n        poolInfo[_pid].totalAmountPool += _amount;\\r\\n\\r\\n        emit Deposit(msg.sender,_amount,_pid);\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n    function getUserEligibility(address _user) public view returns(bool) {\\r\\n        uint256 amount;\\r\\n\\r\\n        for (uint256 i=0; i<NUMBER_VAULT_POOLS; i++) {\\r\\n            (amount,,,,) = vault.userInfo(i,_user);\\r\\n            if(amount >= eligibilityThreshold) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n    \\r\\n    function getUserMultiplier(address _user) public view returns(uint16) {\\r\\n        uint16 userMult;\\r\\n        uint16 mult;\\r\\n        uint256 amount;\\r\\n        for (uint8 i=0; i<NUMBER_VAULT_POOLS; i++) {\\r\\n            (amount,,,,) = vault.userInfo(i,_user);\\r\\n            for (uint8 j=0; j<NUMBER_THRESHOLDS; j++) {\\r\\n                mult = uint16(_multiplierInfo.poolBaseMult[i]) * uint16(_multiplierInfo.poolMultipliers[i][j]);\\r\\n                if(amount >= uint256(_multiplierInfo.poolThresholds[j])*1e18) {\\r\\n                    if(mult > userMult) {\\r\\n                        userMult = mult;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        return (userMult);\\r\\n    }\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                            WITHDRAW LOGIC\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n    function withdrawPool(uint256 _amount, uint8 _pid)\\r\\n        external\\r\\n        override\\r\\n        nonReentrant\\r\\n        onlyWhenActive\\r\\n    {\\r\\n        UserInfo storage user = userInfo[msg.sender][_pid];\\r\\n        require(_pid < numberPools, \\\"pool does not exist\\\");\\r\\n        require(\\r\\n            poolInfo[_pid].offeringAmount > 0 &&\\r\\n                poolInfo[_pid].raisingAmount > 0,\\r\\n            \\\"pool not set\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            _amount > 0 && user.amount > 0 && user.amount >= _amount,\\r\\n            \\\"withdraw: amount higher than user balance\\\"\\r\\n        );\\r\\n\\r\\n        user.amount -= _amount;\\r\\n        poolInfo[_pid].totalAmountPool -= _amount;\\r\\n\\r\\n        if (poolInfo[_pid].baseLimitInLP == 0) {\\r\\n            (uint16 multiplier) = getUserMultiplier(msg.sender);\\r\\n            poolInfo[_pid].totalAllocPoints -= userInfo[msg.sender][_pid].allocPoints;\\r\\n            userInfo[msg.sender][_pid].allocPoints = user.amount * uint256(multiplier);\\r\\n            poolInfo[_pid].totalAllocPoints += userInfo[msg.sender][_pid].allocPoints;\\r\\n        }\\r\\n\\r\\n        lpToken.safeTransfer(address(msg.sender), _amount);\\r\\n\\r\\n        emit Withdraw(msg.sender, _amount, _pid);\\r\\n    }\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                            HARVEST LOGIC\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n    function harvestPool(uint8 _pid, uint8 _harvestPeriod) external override nonReentrant onlyFinished {\\r\\n        require(_pid < numberPools, \\\"pool does not exist\\\");\\r\\n        require(_harvestPeriod < HARVEST_PERIODS, \\\"harvest period out of range\\\");\\r\\n        require(block.number > harvestReleaseBlocks[_harvestPeriod], \\\"not harvest time\\\");\\r\\n        require(userInfo[msg.sender][_pid].amount > 0, \\\"did not participate\\\");\\r\\n        require(!userInfo[msg.sender][_pid].claimed[_harvestPeriod], \\\"harvest for period already claimed\\\");\\r\\n\\r\\n        userInfo[msg.sender][_pid].claimed[_harvestPeriod] = true;\\r\\n\\r\\n        uint256 offeringTokenAmount;\\r\\n        uint256 refundingTokenAmount;\\r\\n        uint256 userTaxOverflow;\\r\\n        (offeringTokenAmount, refundingTokenAmount, userTaxOverflow) = _calcOfferingAndRefundingAmounts(\\r\\n            msg.sender,\\r\\n            _pid\\r\\n        );\\r\\n        if (userTaxOverflow > 0 && !userInfo[msg.sender][_pid].isRefunded) {\\r\\n            poolInfo[_pid].sumTaxesOverflow += userTaxOverflow;\\r\\n        }\\r\\n        if (refundingTokenAmount > 0 && !userInfo[msg.sender][_pid].isRefunded) {\\r\\n            userInfo[msg.sender][_pid].isRefunded = true;\\r\\n            lpToken.safeTransfer(address(msg.sender), refundingTokenAmount);\\r\\n        }\\r\\n\\r\\n        uint256 offeringTokenAmountPerPeriod;\\r\\n        if (offeringTokenAmount > 0) {\\r\\n            offeringTokenAmountPerPeriod = offeringTokenAmount * harvestReleasePercent[_harvestPeriod] / 1e4;\\r\\n            offeringToken.safeTransfer(address(msg.sender), offeringTokenAmountPerPeriod);\\r\\n        }\\r\\n        userInfo[msg.sender][_pid].claimed[_harvestPeriod] = true;\\r\\n\\r\\n        emit Harvest(msg.sender, offeringTokenAmountPerPeriod, refundingTokenAmount,_pid);\\r\\n\\r\\n\\r\\n    }\\r\\n\\r\\n    function _calcOfferingAndRefundingAmounts(address _user, uint8 _pid)\\r\\n        internal\\r\\n        view\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        uint256 userOfferingAmount;\\r\\n        uint256 userRefundingAmount;\\r\\n        uint256 taxAmount;\\r\\n\\r\\n        if (poolInfo[_pid].totalAmountPool > poolInfo[_pid].raisingAmount) {\\r\\n\\r\\n            uint256 allocation = _getUserAllocation(_user,_pid);\\r\\n\\r\\n            userOfferingAmount = poolInfo[_pid].offeringAmount * allocation / 1e12;\\r\\n\\r\\n            uint256 payAmount = poolInfo[_pid].raisingAmount * userInfo[_user][_pid].amount * 1e18 / poolInfo[_pid].totalAmountPool  / 1e18;\\r\\n\\r\\n            userRefundingAmount = userInfo[_user][_pid].amount - payAmount;\\r\\n            if (poolInfo[_pid].hasTax) {\\r\\n                uint256 taxOverflow =\\r\\n                    _calculateTaxOverflow(\\r\\n                        poolInfo[_pid].totalAmountPool,\\r\\n                        poolInfo[_pid].raisingAmount\\r\\n                    );\\r\\n                taxAmount = userRefundingAmount * taxOverflow / 1e12;\\r\\n\\r\\n                userRefundingAmount -= taxAmount;\\r\\n            }\\r\\n        } else {\\r\\n            userRefundingAmount = 0;\\r\\n            taxAmount = 0;\\r\\n            if (poolInfo[_pid].baseLimitInLP > 0) {\\r\\n                userOfferingAmount = userInfo[_user][_pid].amount * poolInfo[_pid].offeringAmount / poolInfo[_pid].raisingAmount;\\r\\n            } else {\\r\\n                userOfferingAmount = poolInfo[_pid].offeringAmount * _getUserAllocation(_user,_pid) / 1e12;\\r\\n            }\\r\\n        }\\r\\n        return (userOfferingAmount, userRefundingAmount, taxAmount);\\r\\n    }\\r\\n    /**\\r\\n     * @notice It returns the user allocation for pool\\r\\n     * @dev (1e8) 10,000,000 means 0.1 (10%) / 1 means 0.000000001 (0.0000001%) / 100,000,000 means 1 (100%)\\r\\n     * @param _user: user address\\r\\n     * @param _pid: pool id\\r\\n     * @return it returns the user's share of pool\\r\\n     */\\r\\n    function _getUserAllocation(address _user, uint8 _pid) view internal  returns (uint256) {\\r\\n        if (poolInfo[_pid].totalAmountPool > 0) {\\r\\n            if(poolInfo[_pid].baseLimitInLP > 0) {\\r\\n                return userInfo[_user][_pid].amount * 1e18 / poolInfo[_pid].totalAmountPool / 1e6;\\r\\n            } else {\\r\\n                return userInfo[_user][_pid].allocPoints * 1e18 / poolInfo[_pid].totalAllocPoints / 1e6;\\r\\n            }\\r\\n        } else {\\r\\n            return 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice It calculates the tax overflow given the raisingAmountPool and the totalAmountPool.\\r\\n     * @dev 100,000,000,000 means 0.1 (10%) / 1 means 0.0000000000001 (0.0000001%) / 1,000,000,000,000 means 1 (100%)\\r\\n     * @return It returns the tax percentage\\r\\n     */\\r\\n    function _calculateTaxOverflow(uint256 _totalAmountPool, uint256 _raisingAmountPool)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 ratioOverflow = _totalAmountPool / _raisingAmountPool;\\r\\n\\r\\n        if (ratioOverflow >= 500) {\\r\\n            return 2000000000; // 0.2%\\r\\n        } else if (ratioOverflow >= 250) {\\r\\n            return 2500000000; // 0.25%\\r\\n        } else if (ratioOverflow >= 100) {\\r\\n            return 3000000000; // 0.3%\\r\\n        } else if (ratioOverflow >= 50) {\\r\\n            return 5000000000; // 0.5%\\r\\n        } else {\\r\\n            return 10000000000; // 1%\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                            PUBLIC GETTERS\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n    function hasHarvested(address _user, uint8 _pid, uint8 _harvestPeriod) public view returns (bool) {\\r\\n        return userInfo[_user][_pid].claimed[_harvestPeriod];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice It returns the tax overflow rate calculated for a pool\\r\\n     * @dev 100,000,000,000 means 0.1 (10%) / 1 means 0.0000000000001 (0.0000001%) / 1,000,000,000,000 means 1 (100%)\\r\\n     * @param _pid: poolId\\r\\n     * @return It returns the tax percentage\\r\\n     */\\r\\n    function viewPoolTaxRateOverflow(uint256 _pid) external view override returns (uint256) {\\r\\n        if (!poolInfo[_pid].hasTax) {\\r\\n            return 0;\\r\\n        } else {\\r\\n            return\\r\\n                _calculateTaxOverflow(poolInfo[_pid].totalAmountPool, poolInfo[_pid].raisingAmount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice External view function to see user allocations for both pools\\r\\n     * @param _user: user address\\r\\n     * @param _pids[]: array of pids\\r\\n     * @return\\r\\n     */\\r\\n    function viewUserAllocationPools(address _user, uint8[] calldata _pids)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (uint256[] memory)\\r\\n    {\\r\\n        uint256[] memory allocationPools = new uint256[](_pids.length);\\r\\n        for (uint8 i = 0; i < _pids.length; i++) {\\r\\n            allocationPools[i] = _getUserAllocation(_user, _pids[i]);\\r\\n        }\\r\\n        return allocationPools;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice External view function to see user offering and refunding amounts for both pools\\r\\n     * @param _user: user address\\r\\n     * @param _pids: array of pids\\r\\n     */\\r\\n    function viewUserOfferingAndRefundingAmountsForPools(address _user, uint8[] calldata _pids)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (uint256[3][] memory)\\r\\n    {\\r\\n        uint256[3][] memory amountPools = new uint256[3][](_pids.length);\\r\\n\\r\\n        for (uint8 i = 0; i < _pids.length; i++) {\\r\\n            uint256 userOfferingAmountPool;\\r\\n            uint256 userRefundingAmountPool;\\r\\n            uint256 userTaxAmountPool;\\r\\n\\r\\n            if (poolInfo[_pids[i]].raisingAmount > 0) {\\r\\n                (\\r\\n                    userOfferingAmountPool,\\r\\n                    userRefundingAmountPool,\\r\\n                    userTaxAmountPool\\r\\n                ) = _calcOfferingAndRefundingAmounts(_user, _pids[i]);\\r\\n            }\\r\\n\\r\\n            amountPools[i] = [userOfferingAmountPool, userRefundingAmountPool, userTaxAmountPool];\\r\\n        }\\r\\n        return amountPools;\\r\\n    }\\r\\n\\r\\n    function viewMultipliers()\\r\\n        public\\r\\n        view\\r\\n        returns(\\r\\n            uint16[] memory,\\r\\n            uint8[] memory,\\r\\n            uint8[][] memory\\r\\n        )\\r\\n    {\\r\\n        uint16[] memory _poolThresholds = new uint16[](_multiplierInfo.poolThresholds.length);\\r\\n        for (uint16 i = 0; i < _multiplierInfo.poolThresholds.length ;i++) {\\r\\n            _poolThresholds[i] = _multiplierInfo.poolThresholds[i];\\r\\n        }\\r\\n\\r\\n        uint8[] memory _poolBaseMult = new uint8[](_multiplierInfo.poolBaseMult.length);\\r\\n        for (uint8 i = 0; i < _multiplierInfo.poolBaseMult.length ;i++) {\\r\\n            _poolBaseMult[i] = _multiplierInfo.poolBaseMult[i];\\r\\n        }\\r\\n\\r\\n        uint8[][] memory _poolMultipliers = new uint8[][](_multiplierInfo.poolMultipliers.length);\\r\\n        for (uint8 i = 0; i < _multiplierInfo.poolMultipliers.length;i++) {\\r\\n            _poolMultipliers[i] = new uint8[](_multiplierInfo.poolMultipliers[i].length);\\r\\n            for (uint8 j = 0;j < _multiplierInfo.poolMultipliers[i].length;j++) {\\r\\n                _poolMultipliers[i][j] = _multiplierInfo.poolMultipliers[i][j];\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return(\\r\\n            _poolThresholds,\\r\\n            _poolBaseMult,\\r\\n            _poolMultipliers\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function enableClaim() external override onlyOwner {\\r\\n        require(block.number >= endBlock, \\\"sale still active\\\");\\r\\n        require(!claimEnabled, \\\"claim is already enabled\\\");\\r\\n\\r\\n        claimEnabled = true;\\r\\n\\r\\n        emit ClaimEnabled();\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xee700430a90447cd35d16dc53bf890cdf1c3d1df8a7b1f6808d447cb05c2a586\",\"license\":\"MIT\"},\"contracts/eclipse/ICommonEclipse.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\n/** @title ICommonEclipse\\r\\n * @notice It is an interface for CommonEclipse.sol\\r\\n */\\r\\nabstract contract ICommonEclipse {\\r\\n    /**\\r\\n     * @notice It sets parameters for pool\\r\\n     * @param _offeringAmountPool: offering amount (in tokens)\\r\\n     * @param _raisingAmountPool: raising amount (in LP tokens)\\r\\n     * @param _baseLimitInLP: base limit per user (in LP tokens)\\r\\n     * @param _hasTax: if the pool has a tax\\r\\n     * @param _pid: poolId\\r\\n     * @dev This function is only callable by owner.\\r\\n     */\\r\\n    function setPool(\\r\\n        uint256 _offeringAmountPool,\\r\\n        uint256 _raisingAmountPool,\\r\\n        uint256 _baseLimitInLP,\\r\\n        bool _hasTax,\\r\\n        uint8 _pid\\r\\n    ) external virtual;\\r\\n\\r\\n    /**\\r\\n     * @notice It allows users to deposit LP tokens to pool\\r\\n     * @param _amount: the number of LP token used (18 decimals)\\r\\n     * @param _pid: pool id\\r\\n     */\\r\\n    function depositPool(uint256 _amount, uint8 _pid) external virtual;\\r\\n\\r\\n    /**\\r\\n     * @notice It allows users to harvest from pool\\r\\n     * @param _pid: pool id\\r\\n     * @param _harvestPeriod: chosen harvest period to claim\\r\\n     */\\r\\n    function harvestPool(uint8 _pid, uint8 _harvestPeriod) external virtual;\\r\\n\\r\\n    /**\\r\\n     * @notice It allows owner to update start and end blocks of the sale\\r\\n     * @param _startBlock: block number sale starts\\r\\n     * @param _endBlock: block number sale ends\\r\\n     */\\r\\n    function updateStartAndEndBlocks(uint256 _startBlock, uint256 _endBlock)\\r\\n        external\\r\\n        virtual;\\r\\n\\r\\n    /**\\r\\n     * @notice It allows owner to set the multiplier information\\r\\n     * @param _multipliers: encoded multipliers for zero, seven and thirty day vaults\\r\\n     * @dev encoded args are (uint8,uint8,uint8,uint8[2][3],uint8[2][3],uint8[2][3])\\r\\n     * (0 decimals)\\r\\n     */\\r\\n    function setMultipliers(bytes memory _multipliers) public virtual;\\r\\n\\r\\n    /**\\r\\n     * @notice It allows owner to set the threshold for eligibility\\r\\n     * @param _eligibilityThreshold: amount of solar staked in vaults to be eligibile\\r\\n     */\\r\\n    function setEligibilityThreshold(uint256 _eligibilityThreshold)\\r\\n        public\\r\\n        virtual;\\r\\n\\r\\n    /**\\r\\n     * @notice It allows the admin to withdraw funds\\r\\n     * @param _lpAmount: the number of LP token to withdraw (18 decimals)\\r\\n     * @param _offerAmount: the number of offering amount to withdraw\\r\\n     * @dev This function is only callable by owner.\\r\\n     */\\r\\n    function finalWithdraw(uint256 _lpAmount, uint256 _offerAmount)\\r\\n        external\\r\\n        virtual;\\r\\n\\r\\n    /**\\r\\n     * @notice It returns the tax overflow rate calculated for a pool\\r\\n     * @dev 100,000,000,000 means 0.1 (10%) / 1 means 0.0000000000001 (0.0000001%) / 1,000,000,000,000 means 1 (100%)\\r\\n     * @param _pid: poolId\\r\\n     * @return It returns the tax percentage\\r\\n     */\\r\\n    function viewPoolTaxRateOverflow(uint256 _pid)\\r\\n        external\\r\\n        virtual\\r\\n        returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice External view function to see user allocations for both pools\\r\\n     * @param _user: user address\\r\\n     * @param _pids[]: array of pids\\r\\n     */\\r\\n    function viewUserAllocationPools(address _user, uint8[] calldata _pids)\\r\\n        external\\r\\n        virtual\\r\\n        returns (uint256[] memory);\\r\\n\\r\\n    /**\\r\\n     * @notice External view function to see user offering and refunding amounts for both pools\\r\\n     * @param _user: user address\\r\\n     * @param _pids: array of pids\\r\\n     */\\r\\n    function viewUserOfferingAndRefundingAmountsForPools(\\r\\n        address _user,\\r\\n        uint8[] calldata _pids\\r\\n    ) external virtual returns (uint256[3][] memory);\\r\\n\\r\\n    /**\\r\\n     * @notice It allows users to withdraw LP tokens to pool\\r\\n     * @param _amount: the number of LP token used (18 decimals)\\r\\n     * @param _pid: pool id\\r\\n     */\\r\\n    function withdrawPool(uint256 _amount, uint8 _pid) external virtual;\\r\\n\\r\\n    /**\\r\\n     * @notice It allows the admin to end sale and start claim\\r\\n     * @dev This function is only callable by owner.\\r\\n     */\\r\\n    function enableClaim() external virtual;\\r\\n}\\r\\n\",\"keccak256\":\"0x8ae7755567733b073a286f40a3e41a53e1d1b76e1c519ac94154f519b75bbb1b\",\"license\":\"MIT\"},\"contracts/farm/ISolarERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface ISolarERC20 is IERC20 {\\r\\n    function mint(address to, uint256 amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x7abce2d745d5007ecc44d2bf2c622458ef8ee7a9233055c66c3b5715b867af33\",\"license\":\"MIT\"},\"contracts/farm/SolarVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"./ISolarERC20.sol\\\";\\r\\n\\r\\ncontract SolarVault is Ownable, ReentrancyGuard {\\r\\n    address constant _trustedForwarder =\\r\\n        0x0D0b4862F5FfA3A47D04DDf0351356d20C830460; //Trusted forwarder\\r\\n\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    // Info of each user.\\r\\n    struct UserInfo {\\r\\n        uint256 amount; // How many LP tokens the user has provided.\\r\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\r\\n        uint256 rewardLockedUp; // Reward locked up.\\r\\n        uint256 nextHarvestUntil; // When can the user harvest again.\\r\\n        uint256 lastInteraction; // Last time when user deposited or claimed rewards, renewing the lock\\r\\n    }\\r\\n\\r\\n    // Info of each pool.\\r\\n    struct PoolInfo {\\r\\n        IERC20 lpToken; // Address of LP token contract\\r\\n        uint256 allocPoint; // How many allocation points assigned to this pool. Solar to distribute per block.\\r\\n        uint256 lastRewardBlock; // Last block number that Solar distribution occurs.\\r\\n        uint256 accSolarPerShare; // Accumulated Solar per share, times 1e12. See below.\\r\\n        uint16 depositFeeBP; // Deposit fee in basis points\\r\\n        uint256 harvestInterval; // Harvest interval in seconds\\r\\n        uint256 totalLp; // Total token in Pool\\r\\n        uint256 lockupDuration; // Amount of time the participant will be locked in the pool after depositing or claiming rewards\\r\\n    }\\r\\n\\r\\n    ISolarERC20 public solar;\\r\\n\\r\\n    // The operator can only update EmissionRate and AllocPoint to protect tokenomics\\r\\n    //i.e some wrong setting and a pools get too much allocation accidentally\\r\\n    address private _operator;\\r\\n\\r\\n    // Dev address.\\r\\n    address public devAddress;\\r\\n\\r\\n    // Deposit Fee address\\r\\n    address public feeAddress;\\r\\n\\r\\n    // Solar tokens created per block\\r\\n    uint256 public solarPerBlock;\\r\\n\\r\\n    // Max harvest interval: 14 days\\r\\n    uint256 public constant MAXIMUM_HARVEST_INTERVAL = 14 days;\\r\\n\\r\\n    // Maximum deposit fee rate: 10%\\r\\n    uint16 public constant MAXIMUM_DEPOSIT_FEE_RATE = 1000;\\r\\n\\r\\n    // Info of each pool\\r\\n    PoolInfo[] public poolInfo;\\r\\n\\r\\n    // Info of each user that stakes LP tokens.\\r\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\r\\n\\r\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\r\\n    uint256 public totalAllocPoint = 0;\\r\\n\\r\\n    // The block number when Solar mining starts.\\r\\n    uint256 public startBlock;\\r\\n\\r\\n    // Total locked up rewards\\r\\n    uint256 public totalLockedUpRewards;\\r\\n\\r\\n    // Total Solar in Solar Pools (can be multiple pools)\\r\\n    uint256 public totalSolarInPools = 0;\\r\\n\\r\\n    // Control support for EIP-2771 Meta Transactions\\r\\n    bool public metaTxnsEnabled = false;\\r\\n\\r\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n    event EmergencyWithdraw(\\r\\n        address indexed user,\\r\\n        uint256 indexed pid,\\r\\n        uint256 amount\\r\\n    );\\r\\n    event EmissionRateUpdated(\\r\\n        address indexed caller,\\r\\n        uint256 previousAmount,\\r\\n        uint256 newAmount\\r\\n    );\\r\\n    event RewardLockedUp(\\r\\n        address indexed user,\\r\\n        uint256 indexed pid,\\r\\n        uint256 amountLockedUp\\r\\n    );\\r\\n    event OperatorTransferred(\\r\\n        address indexed previousOperator,\\r\\n        address indexed newOperator\\r\\n    );\\r\\n    event DevAddressChanged(\\r\\n        address indexed caller,\\r\\n        address oldAddress,\\r\\n        address newAddress\\r\\n    );\\r\\n    event FeeAddressChanged(\\r\\n        address indexed caller,\\r\\n        address oldAddress,\\r\\n        address newAddress\\r\\n    );\\r\\n    event AllocPointsUpdated(\\r\\n        address indexed caller,\\r\\n        uint256 previousAmount,\\r\\n        uint256 newAmount\\r\\n    );\\r\\n    event MetaTxnsEnabled(address indexed caller);\\r\\n    event MetaTxnsDisabled(address indexed caller);\\r\\n\\r\\n    modifier onlyOperator() {\\r\\n        require(\\r\\n            _operator == msg.sender,\\r\\n            \\\"Operator: caller is not the operator\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(ISolarERC20 _solar, uint256 _solarPerBlock) {\\r\\n        //StartBlock always many years later from contract construct, will be set later in StartFarming function\\r\\n        startBlock = block.number + (10 * 365 * 24 * 60 * 60);\\r\\n\\r\\n        solar = _solar;\\r\\n        solarPerBlock = _solarPerBlock;\\r\\n\\r\\n        devAddress = msg.sender;\\r\\n        feeAddress = msg.sender;\\r\\n        _operator = msg.sender;\\r\\n        emit OperatorTransferred(address(0), _operator);\\r\\n    }\\r\\n\\r\\n    function isTrustedForwarder(address forwarder)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        returns (bool)\\r\\n    {\\r\\n        return metaTxnsEnabled && forwarder == _trustedForwarder;\\r\\n    }\\r\\n\\r\\n    function _msgSender()\\r\\n        internal\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (address sender)\\r\\n    {\\r\\n        if (isTrustedForwarder(msg.sender)) {\\r\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\r\\n            assembly {\\r\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\r\\n            }\\r\\n        } else {\\r\\n            return super._msgSender();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _msgData()\\r\\n        internal\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (bytes calldata)\\r\\n    {\\r\\n        if (isTrustedForwarder(msg.sender)) {\\r\\n            return msg.data[:msg.data.length - 20];\\r\\n        } else {\\r\\n            return super._msgData();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function operator() public view returns (address) {\\r\\n        return _operator;\\r\\n    }\\r\\n\\r\\n    // Return reward multiplier over the given _from to _to block.\\r\\n    function getMultiplier(uint256 _from, uint256 _to)\\r\\n        public\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _to.sub(_from);\\r\\n    }\\r\\n\\r\\n    function transferOperator(address newOperator) public onlyOperator {\\r\\n        require(\\r\\n            newOperator != address(0),\\r\\n            \\\"TransferOperator: new operator is the zero address\\\"\\r\\n        );\\r\\n        emit OperatorTransferred(_operator, newOperator);\\r\\n        _operator = newOperator;\\r\\n    }\\r\\n\\r\\n    // Set farming start, can call only once\\r\\n    function startFarming() public onlyOwner {\\r\\n        require(block.number < startBlock, \\\"Error: farm started already\\\");\\r\\n\\r\\n        uint256 length = poolInfo.length;\\r\\n        for (uint256 pid = 0; pid < length; ++pid) {\\r\\n            PoolInfo storage pool = poolInfo[pid];\\r\\n            pool.lastRewardBlock = block.number;\\r\\n        }\\r\\n\\r\\n        startBlock = block.number;\\r\\n    }\\r\\n\\r\\n    function poolLength() external view returns (uint256) {\\r\\n        return poolInfo.length;\\r\\n    }\\r\\n\\r\\n    // Add a new lp to the pool. Can only be called by the owner.\\r\\n    // Can add multiple pool with same lp token without messing up rewards, because each pool's balance is tracked using its own totalLp\\r\\n    function add(\\r\\n        uint256 _allocPoint,\\r\\n        IERC20 _lpToken,\\r\\n        uint16 _depositFeeBP,\\r\\n        uint256 _harvestInterval,\\r\\n        uint256 _lockupDuration,\\r\\n        bool _withUpdate\\r\\n    ) public onlyOwner {\\r\\n        require(\\r\\n            _depositFeeBP <= MAXIMUM_DEPOSIT_FEE_RATE,\\r\\n            \\\"Add: deposit fee too high\\\"\\r\\n        );\\r\\n        require(\\r\\n            _harvestInterval <= MAXIMUM_HARVEST_INTERVAL,\\r\\n            \\\"Add: invalid harvest interval\\\"\\r\\n        );\\r\\n        if (_withUpdate) {\\r\\n            massUpdatePools();\\r\\n        }\\r\\n        uint256 lastRewardBlock = block.number > startBlock\\r\\n            ? block.number\\r\\n            : startBlock;\\r\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\r\\n        poolInfo.push(\\r\\n            PoolInfo({\\r\\n                lpToken: _lpToken,\\r\\n                allocPoint: _allocPoint,\\r\\n                lastRewardBlock: lastRewardBlock,\\r\\n                accSolarPerShare: 0,\\r\\n                depositFeeBP: _depositFeeBP,\\r\\n                harvestInterval: _harvestInterval,\\r\\n                totalLp: 0,\\r\\n                lockupDuration: _lockupDuration\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // View function to see pending Solar on frontend.\\r\\n    function pendingSolar(uint256 _pid, address _user)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][_user];\\r\\n        uint256 accSolarPerShare = pool.accSolarPerShare;\\r\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\r\\n\\r\\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\\r\\n            uint256 multiplier = getMultiplier(\\r\\n                pool.lastRewardBlock,\\r\\n                block.number\\r\\n            );\\r\\n            uint256 solarReward = multiplier\\r\\n                .mul(solarPerBlock)\\r\\n                .mul(pool.allocPoint)\\r\\n                .div(totalAllocPoint);\\r\\n            accSolarPerShare = accSolarPerShare.add(\\r\\n                solarReward.mul(1e12).div(lpSupply)\\r\\n            );\\r\\n        }\\r\\n\\r\\n        uint256 pending = user.amount.mul(accSolarPerShare).div(1e12).sub(\\r\\n            user.rewardDebt\\r\\n        );\\r\\n        return pending.add(user.rewardLockedUp);\\r\\n    }\\r\\n\\r\\n    // View function to see when user will be unlocked from pool\\r\\n    function userLockedUntil(uint256 _pid, address _user)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        UserInfo storage user = userInfo[_pid][_user];\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n\\r\\n        return user.lastInteraction + pool.lockupDuration;\\r\\n    }\\r\\n\\r\\n    // View function to see if user can harvest Solar.\\r\\n    function canHarvest(uint256 _pid, address _user)\\r\\n        public\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        UserInfo storage user = userInfo[_pid][_user];\\r\\n        return\\r\\n            block.number >= startBlock &&\\r\\n            block.timestamp >= user.nextHarvestUntil;\\r\\n    }\\r\\n\\r\\n    // Update reward vairables for all pools. Be careful of gas spending!\\r\\n    function massUpdatePools() public {\\r\\n        uint256 length = poolInfo.length;\\r\\n        for (uint256 pid = 0; pid < length; ++pid) {\\r\\n            updatePool(pid);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Update reward variables of the given pool to be up-to-date.\\r\\n    function updatePool(uint256 _pid) public {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        if (block.number <= pool.lastRewardBlock) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 lpSupply = pool.totalLp;\\r\\n        if (lpSupply == 0 || pool.allocPoint == 0) {\\r\\n            pool.lastRewardBlock = block.number;\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\\r\\n        uint256 solarReward = multiplier\\r\\n            .mul(solarPerBlock)\\r\\n            .mul(pool.allocPoint)\\r\\n            .div(totalAllocPoint);\\r\\n\\r\\n        solar.mint(devAddress, solarReward.div(10));\\r\\n        solar.mint(address(this), solarReward);\\r\\n\\r\\n        pool.accSolarPerShare = pool.accSolarPerShare.add(\\r\\n            solarReward.mul(1e12).div(pool.totalLp)\\r\\n        );\\r\\n        pool.lastRewardBlock = block.number;\\r\\n    }\\r\\n\\r\\n    // Deposit LP tokens to SolarVault for Solar allocation\\r\\n    function deposit(uint256 _pid, uint256 _amount) public nonReentrant {\\r\\n        require(\\r\\n            block.number >= startBlock,\\r\\n            \\\"SolarVault: cannot deposit before farming start\\\"\\r\\n        );\\r\\n\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][_msgSender()];\\r\\n\\r\\n        updatePool(_pid);\\r\\n\\r\\n        payOrLockupPendingSolar(_pid);\\r\\n\\r\\n        if (_amount > 0) {\\r\\n            uint256 beforeDeposit = pool.lpToken.balanceOf(address(this));\\r\\n            pool.lpToken.safeTransferFrom(_msgSender(), address(this), _amount);\\r\\n            uint256 afterDeposit = pool.lpToken.balanceOf(address(this));\\r\\n\\r\\n            _amount = afterDeposit.sub(beforeDeposit);\\r\\n\\r\\n            if (pool.depositFeeBP > 0) {\\r\\n                uint256 depositFee = _amount.mul(pool.depositFeeBP).div(10000);\\r\\n                pool.lpToken.safeTransfer(feeAddress, depositFee);\\r\\n\\r\\n                _amount = _amount.sub(depositFee);\\r\\n            }\\r\\n\\r\\n            user.amount = user.amount.add(_amount);\\r\\n            pool.totalLp = pool.totalLp.add(_amount);\\r\\n\\r\\n            if (address(pool.lpToken) == address(solar)) {\\r\\n                totalSolarInPools = totalSolarInPools.add(_amount);\\r\\n            }\\r\\n        }\\r\\n        user.rewardDebt = user.amount.mul(pool.accSolarPerShare).div(1e12);\\r\\n        user.lastInteraction = block.timestamp;\\r\\n        emit Deposit(_msgSender(), _pid, _amount);\\r\\n    }\\r\\n\\r\\n    // Withdraw tokens\\r\\n    function withdraw(uint256 _pid, uint256 _amount) public nonReentrant {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][_msgSender()];\\r\\n\\r\\n        //this will make sure that user can only withdraw from his pool\\r\\n        require(user.amount >= _amount, \\\"Withdraw: user amount is not enough\\\");\\r\\n\\r\\n        //Cannot withdraw more than pool's balance\\r\\n        require(pool.totalLp >= _amount, \\\"Withdraw: pool total is not enough\\\");\\r\\n\\r\\n        //Cannot withdraw before lock time\\r\\n        require(\\r\\n            block.timestamp > user.lastInteraction + pool.lockupDuration,\\r\\n            \\\"Withdraw: you cannot withdraw yet\\\"\\r\\n        );\\r\\n\\r\\n        updatePool(_pid);\\r\\n\\r\\n        payOrLockupPendingSolar(_pid);\\r\\n\\r\\n        if (_amount > 0) {\\r\\n            user.amount = user.amount.sub(_amount);\\r\\n            pool.totalLp = pool.totalLp.sub(_amount);\\r\\n            if (address(pool.lpToken) == address(solar)) {\\r\\n                totalSolarInPools = totalSolarInPools.sub(_amount);\\r\\n            }\\r\\n            pool.lpToken.safeTransfer(_msgSender(), _amount);\\r\\n        }\\r\\n        user.rewardDebt = user.amount.mul(pool.accSolarPerShare).div(1e12);\\r\\n        user.lastInteraction = block.timestamp;\\r\\n        emit Withdraw(_msgSender(), _pid, _amount);\\r\\n    }\\r\\n\\r\\n    // Pay or lockup pending Solar.\\r\\n    function payOrLockupPendingSolar(uint256 _pid) internal {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][_msgSender()];\\r\\n\\r\\n        if (user.nextHarvestUntil == 0 && block.number >= startBlock) {\\r\\n            user.nextHarvestUntil = block.timestamp.add(pool.harvestInterval);\\r\\n        }\\r\\n\\r\\n        uint256 pending = user.amount.mul(pool.accSolarPerShare).div(1e12).sub(\\r\\n            user.rewardDebt\\r\\n        );\\r\\n        if (canHarvest(_pid, _msgSender())) {\\r\\n            if (pending > 0 || user.rewardLockedUp > 0) {\\r\\n                uint256 totalRewards = pending.add(user.rewardLockedUp);\\r\\n\\r\\n                // reset lockup\\r\\n                totalLockedUpRewards = totalLockedUpRewards.sub(\\r\\n                    user.rewardLockedUp\\r\\n                );\\r\\n                user.rewardLockedUp = 0;\\r\\n                user.lastInteraction = block.timestamp;\\r\\n                user.nextHarvestUntil = block.timestamp.add(\\r\\n                    pool.harvestInterval\\r\\n                );\\r\\n\\r\\n                // send rewards\\r\\n                safeSolarTransfer(_msgSender(), totalRewards);\\r\\n            }\\r\\n        } else if (pending > 0) {\\r\\n            user.rewardLockedUp = user.rewardLockedUp.add(pending);\\r\\n            user.lastInteraction = block.timestamp;\\r\\n            totalLockedUpRewards = totalLockedUpRewards.add(pending);\\r\\n            emit RewardLockedUp(_msgSender(), _pid, pending);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Safe Solar transfer function, just in case if rounding error causes pool do not have enough Solar.\\r\\n    function safeSolarTransfer(address _to, uint256 _amount) internal {\\r\\n        if (solar.balanceOf(address(this)) > totalSolarInPools) {\\r\\n            //SolarBal = total Solar in SolarVault - total Solar in Solar pools, this will make sure that SolarVault never transfer rewards from deposited Solar pools\\r\\n            uint256 SolarBal = solar.balanceOf(address(this)).sub(\\r\\n                totalSolarInPools\\r\\n            );\\r\\n            if (_amount >= SolarBal) {\\r\\n                solar.transfer(_to, SolarBal);\\r\\n            } else if (_amount > 0) {\\r\\n                solar.transfer(_to, _amount);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Update dev address by the previous dev.\\r\\n    function setDevAddress(address _devAddress) public {\\r\\n        require(_msgSender() == devAddress, \\\"setDevAddress: FORBIDDEN\\\");\\r\\n        require(_devAddress != address(0), \\\"setDevAddress: ZERO\\\");\\r\\n\\r\\n        emit DevAddressChanged(_msgSender(), devAddress, _devAddress);\\r\\n\\r\\n        devAddress = _devAddress;\\r\\n    }\\r\\n\\r\\n    function setFeeAddress(address _feeAddress) public {\\r\\n        require(_msgSender() == feeAddress, \\\"setFeeAddress: FORBIDDEN\\\");\\r\\n        require(_feeAddress != address(0), \\\"setFeeAddress: ZERO\\\");\\r\\n\\r\\n        emit FeeAddressChanged(_msgSender(), feeAddress, _feeAddress);\\r\\n\\r\\n        feeAddress = _feeAddress;\\r\\n    }\\r\\n\\r\\n    // Pancake has to add hidden dummy pools in order to alter the emission, here we make it simple and transparent to all.\\r\\n    function updateEmissionRate(uint256 _solarPerBlock) public onlyOperator {\\r\\n        massUpdatePools();\\r\\n\\r\\n        emit EmissionRateUpdated(msg.sender, solarPerBlock, _solarPerBlock);\\r\\n        solarPerBlock = _solarPerBlock;\\r\\n    }\\r\\n\\r\\n    function updateAllocPoint(\\r\\n        uint256 _pid,\\r\\n        uint256 _allocPoint,\\r\\n        bool _withUpdate\\r\\n    ) public onlyOperator {\\r\\n        if (_withUpdate) {\\r\\n            massUpdatePools();\\r\\n        }\\r\\n\\r\\n        emit AllocPointsUpdated(\\r\\n            _msgSender(),\\r\\n            poolInfo[_pid].allocPoint,\\r\\n            _allocPoint\\r\\n        );\\r\\n\\r\\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(\\r\\n            _allocPoint\\r\\n        );\\r\\n        poolInfo[_pid].allocPoint = _allocPoint;\\r\\n    }\\r\\n\\r\\n    // Enable support for meta transactions\\r\\n    function enableMetaTxns() public onlyOperator {\\r\\n        require(\\r\\n            !metaTxnsEnabled,\\r\\n            \\\"SolarVault: meta transactions are already enabled\\\"\\r\\n        );\\r\\n\\r\\n        metaTxnsEnabled = true;\\r\\n        emit MetaTxnsEnabled(_msgSender());\\r\\n    }\\r\\n\\r\\n    // Disable support for meta transactions\\r\\n    function disableMetaTxns() public onlyOperator {\\r\\n        require(\\r\\n            metaTxnsEnabled,\\r\\n            \\\"SolarVault: meta transactions are already disabled\\\"\\r\\n        );\\r\\n\\r\\n        metaTxnsEnabled = false;\\r\\n        emit MetaTxnsDisabled(_msgSender());\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x89c7c1aeefbad54e579a75a84048eb7002b73af08bc868a6556e05279e1e4797\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061025c5760003560e01c80638da5cb5b11610145578063b7813607116100bd578063dc8d31b61161008c578063f2fde38b11610071578063f2fde38b14610587578063f9cd5c121461059a578063fbfa77cf146105ba57600080fd5b8063dc8d31b61461056b578063efccd9ac1461057457600080fd5b8063b781360714610505578063c5e22f3f14610525578063ca463ca41461054b578063d08d66bd1461045e57600080fd5b80639f1b524811610114578063b1c97194116100f9578063b1c9719414610490578063b2151071146104ea578063b42392f1146104fd57600080fd5b80639f1b524814610466578063a330ebc01461047957600080fd5b80638da5cb5b1461041a5780639513997f14610438578063973540d91461044b5780639ccb28341461045e57600080fd5b8063362b297c116101d857806348cd4cb1116101a75780636ea056a91161018c5780636ea056a9146103ec578063715018a6146103ff5780637f1bdd761461040757600080fd5b806348cd4cb11461039e5780635fcbd285146103a757600080fd5b8063362b297c1461035257806337f859b8146103655780633c7d0d961461037857806345b8bf911461038b57600080fd5b80631526fe271161022f5780632799d8df116102145780632799d8df1461031a5780632866ed211461033d57806328dae6e31461034a57600080fd5b80631526fe27146102bf5780631adad1a11461030757600080fd5b8063083c632314610261578063089a6fb81461027d5780630e1da786146102925780631025bff8146102ac575b600080fd5b61026a600e5481565b6040519081526020015b60405180910390f35b61029061028b366004614275565b6105da565b005b61029a600481565b60405160ff9091168152602001610274565b61026a6102ba36600461418b565b610a46565b6102d26102cd36600461418b565b610a5d565b604080519788526020880196909652948601939093529015156060850152608084015260a083015260c082015260e001610274565b61026a61031536600461418b565b610aa4565b61032d610328366004613f79565b610ab4565b6040519015158152602001610274565b60105461032d9060ff1681565b610290610b1d565b6102906103603660046140d8565b610ccd565b61026a61037336600461418b565b610dc5565b61029061038636600461418b565b610e32565b6102906103993660046141df565b610f23565b61026a600d5481565b6002546103c79073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610274565b6102906103fa366004613f14565b611174565b610290611316565b610290610415366004614275565b6113a3565b60015473ffffffffffffffffffffffffffffffffffffffff166103c7565b6102906104463660046141bd565b6119da565b6102906104593660046142b7565b611c24565b61029a600381565b6102906104743660046141bd565b61225f565b6104816125e9565b60405161027493929190614440565b6104cd61049e366004613f40565b601160209081526000928352604080842090915290825290208054600182015460039092015490919060ff1683565b604080519384526020840192909252151590820152606001610274565b61032d6104f8366004613e6f565b61289a565b61029a600281565b6003546103c79073ffffffffffffffffffffffffffffffffffffffff1681565b610538610533366004613e6f565b612987565b60405161ffff9091168152602001610274565b61055e610559366004613e8c565b612b69565b604051610274919061432f565b61026a600f5481565b610290610582366004613e6f565b612cb5565b610290610595366004613e6f565b612e73565b6105ad6105a8366004613e8c565b612fa0565b6040516102749190614510565b6004546103c79073ffffffffffffffffffffffffffffffffffffffff1681565b6002600054141561064c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002600055600d5443108015906106645750600e5443105b6106ca576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f53616c65206e6f742061637469766500000000000000000000000000000000006044820152606401610643565b33600090815260116020908152604080832060ff8516808552925290912090600211610752576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f706f6f6c20646f6573206e6f74206578697374000000000000000000000000006044820152606401610643565b600060128360ff166002811061076a5761076a6147bf565b60070201600101541180156107995750600060128360ff1660028110610792576107926147bf565b6007020154115b6107ff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f706f6f6c206e6f742073657400000000000000000000000000000000000000006044820152606401610643565b60008311801561080f5750805415155b801561081c575080548311155b6108a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f77697468647261773a20616d6f756e7420686967686572207468616e2075736560448201527f722062616c616e636500000000000000000000000000000000000000000000006064820152608401610643565b828160000160008282546108bc91906146d2565b90915550839050601260ff8416600281106108d9576108d96147bf565b6007020160040160008282546108ef91906146d2565b909155506012905060ff83166002811061090b5761090b6147bf565b6007020160020154600014156109de57600061092633612987565b33600090815260116020908152604080832060ff88168085529252909120600101549192506012906002811061095e5761095e6147bf565b60070201600601600082825461097491906146d2565b9091555050815461098a9061ffff831690614695565b33600090815260116020908152604080832060ff88168085529252909120600101829055601290600281106109c1576109c16147bf565b6007020160060160008282546109d79190614618565b9091555050505b600254610a029073ffffffffffffffffffffffffffffffffffffffff16338561305c565b60405183815260ff83169033907ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689060200160405180910390a35050600160005550565b60058160048110610a5657600080fd5b0154905081565b60128160028110610a6d57600080fd5b600702018054600182015460028301546003840154600485015460058601546006909601549496509294919360ff90911692919087565b60098160048110610a5657600080fd5b73ffffffffffffffffffffffffffffffffffffffff8316600090815260116020908152604080832060ff80871685529252822060020190831660048110610afd57610afd6147bf565b602081049091015460ff601f9092166101000a90041690505b9392505050565b60015473ffffffffffffffffffffffffffffffffffffffff163314610b9e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610643565b600e54431015610c0a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f73616c65207374696c6c206163746976650000000000000000000000000000006044820152606401610643565b60105460ff1615610c77576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f636c61696d20697320616c726561647920656e61626c656400000000000000006044820152606401610643565b601080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556040517fca666f7745697e47f1359d151c9445641549379e821785dd1fa6c38f7f8bc3da90600090a1565b60015473ffffffffffffffffffffffffffffffffffffffff163314610d4e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610643565b600d544310610db9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f73616c6520697320616c726561647920616374697665000000000000000000006044820152606401610643565b610dc281613135565b50565b600060128260028110610dda57610dda6147bf565b600702016003015460ff16610df157506000919050565b610e2c60128360028110610e0757610e076147bf565b600702016004015460128460028110610e2257610e226147bf565b60070201546134a9565b92915050565b60015473ffffffffffffffffffffffffffffffffffffffff163314610eb3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610643565b600d544310610f1e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f73616c6520697320616c726561647920616374697665000000000000000000006044820152606401610643565b600f55565b60015473ffffffffffffffffffffffffffffffffffffffff163314610fa4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610643565b600d54431061100f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f73616c6520697320616c726561647920616374697665000000000000000000006044820152606401610643565b600260ff82161061107c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f706f6f6c20646f6573206e6f74206578697374000000000000000000000000006044820152606401610643565b8460128260ff1660028110611093576110936147bf565b600702015583601260ff8316600281106110af576110af6147bf565b60070201600101819055508260128260ff16600281106110d1576110d16147bf565b60070201600201819055508160128260ff16600281106110f3576110f36147bf565b6007020160030180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055604080518581526020810187905260ff8316918101919091527fddaf243a142670be60c19ff7116b5d8b124717b29bb4cc03cead42161614105b9060600160405180910390a15050505050565b60015473ffffffffffffffffffffffffffffffffffffffff1633146111f5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610643565b60025473ffffffffffffffffffffffffffffffffffffffff83811691161480159061123b575060035473ffffffffffffffffffffffffffffffffffffffff838116911614155b6112a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f43616e6e6f74206265204c50206f72204f66666572696e6720746f6b656e00006044820152606401610643565b6112c273ffffffffffffffffffffffffffffffffffffffff8316338361305c565b6040805173ffffffffffffffffffffffffffffffffffffffff84168152602081018390527f74545154aac348a3eac92596bd1971957ca94795f4e954ec5f613b55fab7812991015b60405180910390a15050565b60015473ffffffffffffffffffffffffffffffffffffffff163314611397576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610643565b6113a1600061351c565b565b600d5443101580156113b65750600e5443105b61141c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f53616c65206e6f742061637469766500000000000000000000000000000000006044820152606401610643565b60026000541415611489576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610643565b6002600081815533815260116020908152604080832060ff861680855292529091209111611513576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f706f6f6c20646f6573206e6f74206578697374000000000000000000000000006044820152606401610643565b600060128360ff166002811061152b5761152b6147bf565b600702016001015411801561155a5750600060128360ff1660028110611553576115536147bf565b6007020154115b6115c0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f506f6f6c206e6f742073657400000000000000000000000000000000000000006044820152606401610643565b60005b600260ff82161015611673578260ff168160ff16146116615733600090815260116020908152604080832060ff8516845290915290205415611661576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f616c726561647920636f6d6d6974656420696e20616e6f7468657220706f6f6c6044820152606401610643565b8061166b81614770565b9150506115c3565b5060005b600381101561171c57600480546040517fe2bbb1580000000000000000000000000000000000000000000000000000000081529182018390526000602483015273ffffffffffffffffffffffffffffffffffffffff169063e2bbb15890604401600060405180830381600087803b1580156116f157600080fd5b505af1158015611705573d6000803e3d6000fd5b50505050808061171490614737565b915050611677565b5060006117283361289a565b905080611791576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f75736572206e6f7420656c696769626c650000000000000000000000000000006044820152606401610643565b6002546117b69073ffffffffffffffffffffffffffffffffffffffff16333087613593565b838260000160008282546117ca9190614618565b9091555060009050601260ff8516600281106117e8576117e86147bf565b600702016002015411156118a057600061180133612987565b90508061ffff1660128560ff166002811061181e5761181e6147bf565b60070201600201546118309190614695565b8354111561189a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4e657720616d6f756e742061626f76652075736572206c696d697400000000006044820152606401610643565b50611963565b60006118ab33612987565b33600090815260116020908152604080832060ff8916808552925290912060010154919250601290600281106118e3576118e36147bf565b6007020160060160008282546118f991906146d2565b9091555050825461190f9061ffff831690614695565b33600090815260116020908152604080832060ff8916808552925290912060010182905560129060028110611946576119466147bf565b60070201600601600082825461195c9190614618565b9091555050505b8360128460ff166002811061197a5761197a6147bf565b6007020160040160008282546119909190614618565b909155505060405184815260ff84169033907f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159060200160405180910390a3505060016000555050565b60015473ffffffffffffffffffffffffffffffffffffffff163314611a5b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610643565b600d544310611ac6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f73616c6520697320616c726561647920616374697665000000000000000000006044820152606401610643565b808210611b55576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f6e6577207374617274426c6f636b206d757374206265206c6f7765722074686160448201527f6e206e657720656e64426c6f636b0000000000000000000000000000000000006064820152608401610643565b814310611be4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603060248201527f4e6577207374617274426c6f636b206d7573742062652068696768657220746860448201527f616e2063757272656e7420626c6f636b000000000000000000000000000000006064820152608401610643565b600d829055600e81905560408051838152602081018390527f7cd0ab87d19036f3dfadadb232c78aa4879dda3f0c994a9d637532410ee2ce06910161130a565b60026000541415611c91576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610643565b6002600055600e544310801590611caa575060105460ff165b611d10576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f73616c65206e6f742066696e69736865640000000000000000000000000000006044820152606401610643565b600260ff831610611d7d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f706f6f6c20646f6573206e6f74206578697374000000000000000000000000006044820152606401610643565b600460ff821610611dea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f6861727665737420706572696f64206f7574206f662072616e676500000000006044820152606401610643565b60058160ff1660048110611e0057611e006147bf565b01544311611e6a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f6e6f7420686172766573742074696d65000000000000000000000000000000006044820152606401610643565b33600090815260116020908152604080832060ff86168452909152902054611eee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f646964206e6f74207061727469636970617465000000000000000000000000006044820152606401610643565b33600090815260116020908152604080832060ff8087168552925290912060020190821660048110611f2257611f226147bf565b602081049091015460ff601f9092166101000a90041615611fc5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f6861727665737420666f7220706572696f6420616c726561647920636c61696d60448201527f65640000000000000000000000000000000000000000000000000000000000006064820152608401610643565b33600090815260116020908152604080832060ff80871685529252909120600191600290910190831660048110611ffe57611ffe6147bf565b602091828204019190066101000a81548160ff021916908315150217905550600080600061202c33866135f7565b919450925090508015801590612062575033600090815260116020908152604080832060ff808a16855292529091206003015416155b1561209a578060128660ff166002811061207e5761207e6147bf565b6007020160050160008282546120949190614618565b90915550505b6000821180156120ca575033600090815260116020908152604080832060ff808a16855292529091206003015416155b1561213f5733600081815260116020908152604080832060ff8a168452909152902060030180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905560025461213f9173ffffffffffffffffffffffffffffffffffffffff91909116908461305c565b6000831561219d5761271060098660ff1660048110612160576121606147bf565b015461216c9086614695565b6121769190614630565b60035490915061219d9073ffffffffffffffffffffffffffffffffffffffff16338361305c565b33600090815260116020908152604080832060ff808b16855292529091206001916002909101908716600481106121d6576121d66147bf565b602091828204019190066101000a81548160ff0219169083151502179055508560ff163373ffffffffffffffffffffffffffffffffffffffff167f51524c2e5edfedf8b01b29719c661e4fbe27e71734e7cd773dabb7cb712fb3b3838660405161224a929190918252602082015260400190565b60405180910390a35050600160005550505050565b60015473ffffffffffffffffffffffffffffffffffffffff1633146122e0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610643565b600e54431161234b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f73616c6520686173206e6f742066696e697368656400000000000000000000006044820152606401610643565b6002546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a082319060240160206040518083038186803b1580156123b457600080fd5b505afa1580156123c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ec91906141a4565b821115612455576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f4e6f7420656e6f756768204c5020746f6b656e730000000000000000000000006044820152606401610643565b6003546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a082319060240160206040518083038186803b1580156124be57600080fd5b505afa1580156124d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124f691906141a4565b81111561255f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4e6f7420656e6f756768206f66666572696e6720746f6b656e730000000000006044820152606401610643565b8115612589576002546125899073ffffffffffffffffffffffffffffffffffffffff16338461305c565b80156125b3576003546125b39073ffffffffffffffffffffffffffffffffffffffff16338361305c565b60408051838152602081018390527f94ebb62a252249c867ecb758d386f50a95be7e8df9e1c52917c9cf494327dd7d910161130a565b60408051600380825260808201909252606091829182916000919060208201848036833701905050905060005b60038161ffff16101561268f57602061ffff82166003811061263a5761263a6147bf565b601091828204019190066002029054906101000a900461ffff16828261ffff168151811061266a5761266a6147bf565b61ffff909216602092830291909101909101528061268781614715565b915050612616565b50604080516003808252608082019092526000916020820160608036833701905050905060005b60038160ff16101561272757602160ff8216600381106126d8576126d86147bf565b602091828204019190069054906101000a900460ff16828260ff1681518110612703576127036147bf565b60ff909216602092830291909101909101528061271f81614770565b9150506126b6565b5060408051600380825260808201909252600091816020015b606081526020019060019003908161274057905050905060005b60038160ff16101561288d57602260ff82166003811061277c5761277c6147bf565b505060408051600380825260808201909252906020820160608036833701905050828260ff16815181106127b2576127b26147bf565b602002602001018190525060005b602260ff8316600381106127d6576127d66147bf565b505060038160ff16101561287a57602260ff8316600381106127fa576127fa6147bf565b018160ff166003811061280f5761280f6147bf565b602091828204019190069054906101000a900460ff16838360ff168151811061283a5761283a6147bf565b60200260200101518260ff1681518110612856576128566147bf565b60ff909216602092830291909101909101528061287281614770565b9150506127c0565b508061288581614770565b91505061275a565b5091959094509092509050565b60008060005b600381101561297d57600480546040517f93f1a40b00000000000000000000000000000000000000000000000000000000815291820183905273ffffffffffffffffffffffffffffffffffffffff868116602484015216906393f1a40b9060440160a06040518083038186803b15801561291957600080fd5b505afa15801561292d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129519190614235565b5050600f549294505050821061296b575060019392505050565b8061297581614737565b9150506128a0565b5060009392505050565b60008060008060005b600360ff82161015612b5f57600480546040517f93f1a40b00000000000000000000000000000000000000000000000000000000815260ff84169281019290925273ffffffffffffffffffffffffffffffffffffffff888116602484015216906393f1a40b9060440160a06040518083038186803b158015612a1157600080fd5b505afa158015612a25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a499190614235565b509294506000925050505b600360ff82161015612b4c57602260ff831660038110612a7657612a766147bf565b018160ff1660038110612a8b57612a8b6147bf565b602081049091015460ff601f9092166101000a9004811690602190841660038110612ab857612ab86147bf565b602081049190910154612ad79291601f166101000a900460ff1661466b565b9350602060ff821660038110612aef57612aef6147bf565b601091828204019190066002029054906101000a900461ffff1661ffff16670de0b6b3a7640000612b209190614695565b8310612b3a578461ffff168461ffff161115612b3a578394505b80612b4481614770565b915050612a54565b5080612b5781614770565b915050612990565b5091949350505050565b606060008267ffffffffffffffff811115612b8657612b866147ee565b604051908082528060200260200182016040528015612bbf57816020015b612bac613d44565b815260200190600190039081612ba45790505b50905060005b60ff8116841115612cac57600080600080601289898760ff16818110612bed57612bed6147bf565b9050602002016020810190612c02919061429a565b60ff1660028110612c1557612c156147bf565b60070201541115612c5b57612c538989898760ff16818110612c3957612c396147bf565b9050602002016020810190612c4e919061429a565b6135f7565b919450925090505b604051806060016040528084815260200183815260200182815250858560ff1681518110612c8b57612c8b6147bf565b60200260200101819052505050508080612ca490614770565b915050612bc5565b50949350505050565b60015473ffffffffffffffffffffffffffffffffffffffff163314612d36576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610643565b600d544310612da1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f73616c6520697320616c726561647920616374697665000000000000000000006044820152606401610643565b60008173ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612de957600080fd5b505afa158015612dfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e2191906141a4565b1015612e2c57600080fd5b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60015473ffffffffffffffffffffffffffffffffffffffff163314612ef4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610643565b73ffffffffffffffffffffffffffffffffffffffff8116612f97576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610643565b610dc28161351c565b606060008267ffffffffffffffff811115612fbd57612fbd6147ee565b604051908082528060200260200182016040528015612fe6578160200160208202803683370190505b50905060005b60ff8116841115612cac5761302a8686868460ff16818110613010576130106147bf565b9050602002016020810190613025919061429a565b61390b565b828260ff168151811061303f5761303f6147bf565b60209081029190910101528061305481614770565b915050612fec565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526131309084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152613a4e565b505050565b60008060008380602001905181019061314e9190613fc4565b925092509250600360ff168251148015613169575080516003145b6131cf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f626164207661756c7420706f6f6c206c656e67746800000000000000000000006044820152606401610643565b825160031461323a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f626164207468726573686f6c64206c656e6774680000000000000000000000006044820152606401610643565b60005b600360ff821610156132b757838160ff168151811061325e5761325e6147bf565b602002602001015160206000018260ff166003811061327f5761327f6147bf565b601091828204019190066002026101000a81548161ffff021916908361ffff16021790555080806132af90614770565b91505061323d565b5060005b600360ff8216101561346357828160ff16815181106132dc576132dc6147bf565b602002602001015160206001018260ff16600381106132fd576132fd6147bf565b602091828204019190066101000a81548160ff021916908360ff160217905550600360ff16828260ff1681518110613337576133376147bf565b602002602001015151146133a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f626164207468726573686f6c64206c656e6774680000000000000000000000006044820152606401610643565b60005b600360ff8216101561345057828260ff16815181106133cb576133cb6147bf565b60200260200101518160ff16815181106133e7576133e76147bf565b602002602001015160206002018360ff1660038110613408576134086147bf565b018260ff166003811061341d5761341d6147bf565b602091828204019190066101000a81548160ff021916908360ff160217905550808061344890614770565b9150506133aa565b508061345b81614770565b9150506132bb565b506040517fbfd876ad455399d10dc2d1788e56b9526a9ca9d32b9e5c6dc9b7a8d63f8d2ef19061349b90602090602190602290614399565b60405180910390a150505050565b6000806134b68385614630565b90506101f481106134ce576377359400915050610e2c565b60fa81106134e357639502f900915050610e2c565b606481106134f85763b2d05e00915050610e2c565b6032811061350e5764012a05f200915050610e2c565b506402540be4009392505050565b6001805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526135f19085907f23b872dd00000000000000000000000000000000000000000000000000000000906084016130ae565b50505050565b60008060008060008060128760ff1660028110613616576136166147bf565b6007020154601260ff891660028110613631576136316147bf565b6007020160040154111561380557600061364b898961390b565b905064e8d4a510008160128a60ff166002811061366a5761366a6147bf565b600702016001015461367c9190614695565b6136869190614630565b93506000670de0b6b3a764000060128a60ff16600281106136a9576136a96147bf565b600702016004015473ffffffffffffffffffffffffffffffffffffffff8c16600090815260116020908152604080832060ff8f1680855292529091205490601290600281106136fa576136fa6147bf565b60070201546137099190614695565b61371b90670de0b6b3a7640000614695565b6137259190614630565b61372f9190614630565b73ffffffffffffffffffffffffffffffffffffffff8b16600090815260116020908152604080832060ff8e1684529091529020549091506137719082906146d2565b935060128960ff1660028110613789576137896147bf565b600702016003015460ff16156137fe5760006137d260128b60ff16600281106137b4576137b46147bf565b600702016004015460128c60ff1660028110610e2257610e226147bf565b905064e8d4a510006137e48287614695565b6137ee9190614630565b93506137fa84866146d2565b9450505b50506138fd565b50600090508080601260ff891660028110613822576138226147bf565b600702016002015411156138b85760128760ff1660028110613846576138466147bf565b6007020154601260ff891660028110613861576138616147bf565b600702016001015473ffffffffffffffffffffffffffffffffffffffff8a16600090815260116020908152604080832060ff8d1684529091529020546138a79190614695565b6138b19190614630565b92506138fd565b64e8d4a510006138c8898961390b565b60128960ff16600281106138de576138de6147bf565b60070201600101546138f09190614695565b6138fa9190614630565b92505b919450925090509250925092565b60008060128360ff1660028110613924576139246147bf565b60070201600401541115613a4657600060128360ff166002811061394a5761394a6147bf565b600702016002015411156139db57620f424060128360ff1660028110613972576139726147bf565b600702016004015473ffffffffffffffffffffffffffffffffffffffff8516600090815260116020908152604080832060ff881684529091529020546139c090670de0b6b3a7640000614695565b6139ca9190614630565b6139d49190614630565b9050610e2c565b620f424060128360ff16600281106139f5576139f56147bf565b600702016006015473ffffffffffffffffffffffffffffffffffffffff8516600090815260116020908152604080832060ff881684529091529020600101546139c090670de0b6b3a7640000614695565b506000610e2c565b6000613ab0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16613b5a9092919063ffffffff16565b8051909150156131305780806020019051810190613ace91906140bb565b613130576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610643565b6060613b698484600085613b71565b949350505050565b606082471015613c03576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610643565b843b613c6b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610643565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051613c949190614313565b60006040518083038185875af1925050503d8060008114613cd1576040519150601f19603f3d011682016040523d82523d6000602084013e613cd6565b606091505b5091509150613ce6828286613cf1565b979650505050505050565b60608315613d00575081610b16565b825115613d105782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106439190614554565b60405180606001604052806003906020820280368337509192915050565b600082601f830112613d7357600080fd5b81516020613d88613d83836145f4565b6145a5565b80838252828201915082860187848660051b8901011115613da857600080fd5b6000805b86811015613deb57825167ffffffffffffffff811115613dca578283fd5b613dd88b88838d0101613df9565b8652509385019391850191600101613dac565b509198975050505050505050565b600082601f830112613e0a57600080fd5b81516020613e1a613d83836145f4565b80838252828201915082860187848660051b8901011115613e3a57600080fd5b60005b85811015613e62578151613e508161484d565b84529284019290840190600101613e3d565b5090979650505050505050565b600060208284031215613e8157600080fd5b8135610b168161481d565b600080600060408486031215613ea157600080fd5b8335613eac8161481d565b9250602084013567ffffffffffffffff80821115613ec957600080fd5b818601915086601f830112613edd57600080fd5b813581811115613eec57600080fd5b8760208260051b8501011115613f0157600080fd5b6020830194508093505050509250925092565b60008060408385031215613f2757600080fd5b8235613f328161481d565b946020939093013593505050565b60008060408385031215613f5357600080fd5b8235613f5e8161481d565b91506020830135613f6e8161484d565b809150509250929050565b600080600060608486031215613f8e57600080fd5b8335613f998161481d565b92506020840135613fa98161484d565b91506040840135613fb98161484d565b809150509250925092565b600080600060608486031215613fd957600080fd5b835167ffffffffffffffff80821115613ff157600080fd5b818601915086601f83011261400557600080fd5b81516020614015613d83836145f4565b8083825282820191508286018b848660051b890101111561403557600080fd5b600096505b8487101561406857805161ffff8116811461405457600080fd5b83526001969096019591830191830161403a565b509189015191975090935050508082111561408257600080fd5b61408e87838801613df9565b935060408601519150808211156140a457600080fd5b506140b186828701613d62565b9150509250925092565b6000602082840312156140cd57600080fd5b8151610b168161483f565b600060208083850312156140eb57600080fd5b823567ffffffffffffffff8082111561410357600080fd5b818501915085601f83011261411757600080fd5b813581811115614129576141296147ee565b614159847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116016145a5565b9150808252868482850101111561416f57600080fd5b8084840185840137600090820190930192909252509392505050565b60006020828403121561419d57600080fd5b5035919050565b6000602082840312156141b657600080fd5b5051919050565b600080604083850312156141d057600080fd5b50508035926020909101359150565b600080600080600060a086880312156141f757600080fd5b85359450602086013593506040860135925060608601356142178161483f565b915060808601356142278161484d565b809150509295509295909350565b600080600080600060a0868803121561424d57600080fd5b5050835160208501516040860151606087015160809097015192989197509594509092509050565b6000806040838503121561428857600080fd5b823591506020830135613f6e8161484d565b6000602082840312156142ac57600080fd5b8135610b168161484d565b600080604083850312156142ca57600080fd5b8235613f5e8161484d565b600081518084526020808501945080840160005b8381101561430857815160ff16875295820195908201906001016142e9565b509495945050505050565b600082516143258184602087016146e9565b9190910192915050565b602080825282518282018190526000919084820190604085019084805b8281101561438c57845184835b600381101561437657825182529188019190880190600101614359565b505050938501936060939093019260010161434c565b5091979650505050505050565b60006101e082019050845461ffff8082168452808260101c166020850152808260201c166040850152505060606143f281840186805460ff8116835260ff8160081c16602084015260ff8160101c166040840152505050565b60c083018460005b600381101561443457815460ff8082168552600882901c8116602086015260109190911c16604084015291830191600191820191016143fa565b50505050949350505050565b606080825284519082018190526000906020906080840190828801845b8281101561447d57815161ffff168452928401929084019060010161445d565b5050508381038285015261449181876142d5565b905083810360408501528085518083528383019150838160051b84010184880160005b83811015614500577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08684030185526144ee8383516142d5565b948701949250908601906001016144b4565b50909a9950505050505050505050565b6020808252825182820181905260009190848201906040850190845b818110156145485783518352928401929184019160010161452c565b50909695505050505050565b60208152600082518060208401526145738160408501602087016146e9565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156145ec576145ec6147ee565b604052919050565b600067ffffffffffffffff82111561460e5761460e6147ee565b5060051b60200190565b6000821982111561462b5761462b614790565b500190565b600082614666577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600061ffff8083168185168183048111821515161561468c5761468c614790565b02949350505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156146cd576146cd614790565b500290565b6000828210156146e4576146e4614790565b500390565b60005b838110156147045781810151838201526020016146ec565b838111156135f15750506000910152565b600061ffff8083168181141561472d5761472d614790565b6001019392505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561476957614769614790565b5060010190565b600060ff821660ff81141561478757614787614790565b60010192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114610dc257600080fd5b8015158114610dc257600080fd5b60ff81168114610dc257600080fdfea2646970667358221220b76543ee55fddcee9e0e4f716bc106539b94eb44bf7fd4845c5b8a4801f51fd064736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "depositPool(uint256,uint8)": {
        "details": "cannot withdraw LP tokens or Offering tokens",
        "params": {
          "_amount": ": amount of LP tokens to deposit",
          "_pid": ": pool to depoist in"
        }
      },
      "enableClaim()": {
        "details": "This function is only callable by owner."
      },
      "finalWithdraw(uint256,uint256)": {
        "details": "can only withdraw after the sale is finished",
        "params": {
          "_lpAmount": ": amount of LP token to withdraw",
          "_offerAmount": ": amount of IDO tokens to withdraw"
        }
      },
      "harvestPool(uint8,uint8)": {
        "params": {
          "_harvestPeriod": ": chosen harvest period to claim",
          "_pid": ": pool id"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setEligibilityThreshold(uint256)": {
        "params": {
          "_eligibilityThreshold": ": Number of solar staked to be eligibile. (1e18)"
        }
      },
      "setMultipliers(bytes)": {
        "params": {
          "_multipliers": ": abi encoded arrays"
        }
      },
      "setPool(uint256,uint256,uint256,bool,uint8)": {
        "details": "If _baseLimitInLP is set to zero, the allocation will be weighted by allocation points. (see below)",
        "params": {
          "_baseLimitInLP": ": base limit of tokens per eligible user (if 0, it is ignored) (1e18)",
          "_hasTax": ": true if a pool is to be taxed on overflow",
          "_offeringAmount": ": amount of IDO tokens the pool is offering (1e18)",
          "_pid": ": pool identification number",
          "_raisingAmount": ": amount of LP token the pool aims to raise (1e18)"
        }
      },
      "sweep(address,uint256)": {
        "details": "cannot withdraw LP tokens or Offering tokens",
        "params": {
          "_amount": ": amount to withdraw",
          "_tokenAddress": ": address of ERC20 token to withdraw"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "viewPoolTaxRateOverflow(uint256)": {
        "details": "100,000,000,000 means 0.1 (10%) / 1 means 0.0000000000001 (0.0000001%) / 1,000,000,000,000 means 1 (100%)",
        "params": {
          "_pid": ": poolId"
        },
        "returns": {
          "_0": "It returns the tax percentage"
        }
      },
      "viewUserAllocationPools(address,uint8[])": {
        "params": {
          "_pids": "[]: array of pids",
          "_user": ": user address"
        },
        "returns": {
          "_0": ""
        }
      },
      "viewUserOfferingAndRefundingAmountsForPools(address,uint8[])": {
        "params": {
          "_pids": ": array of pids",
          "_user": ": user address"
        }
      },
      "withdrawPool(uint256,uint8)": {
        "params": {
          "_amount": ": the number of LP token used (18 decimals)",
          "_pid": ": pool id"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "depositPool(uint256,uint8)": {
        "notice": "It lets users deposit into a pool for a share of offering tokens"
      },
      "enableClaim()": {
        "notice": "It allows the admin to end sale and start claim"
      },
      "finalWithdraw(uint256,uint256)": {
        "notice": "It allows the owner to withdraw LPtokens and Offering tokens after the sale"
      },
      "harvestPool(uint8,uint8)": {
        "notice": "It allows users to harvest from pool"
      },
      "setEligibilityThreshold(uint256)": {
        "notice": "It sets the threshold of solar staked to be eligible to participate."
      },
      "setMultipliers(bytes)": {
        "notice": "It sets the multiplier matrix."
      },
      "setPool(uint256,uint256,uint256,bool,uint8)": {
        "notice": "It creates a pool."
      },
      "sweep(address,uint256)": {
        "notice": "It allows the owner to withdraw ERC20 tokens"
      },
      "updateStartAndEndBlocks(uint256,uint256)": {
        "notice": "It sets the start and end blocks of the sale."
      },
      "viewPoolTaxRateOverflow(uint256)": {
        "notice": "It returns the tax overflow rate calculated for a pool"
      },
      "viewUserAllocationPools(address,uint8[])": {
        "notice": "External view function to see user allocations for both pools"
      },
      "viewUserOfferingAndRefundingAmountsForPools(address,uint8[])": {
        "notice": "External view function to see user offering and refunding amounts for both pools"
      },
      "withdrawPool(uint256,uint8)": {
        "notice": "It allows users to withdraw LP tokens to pool"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 650,
        "contract": "contracts/eclipse/CommonEclipse.sol:CommonEclipse",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 375,
        "contract": "contracts/eclipse/CommonEclipse.sol:CommonEclipse",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4020,
        "contract": "contracts/eclipse/CommonEclipse.sol:CommonEclipse",
        "label": "lpToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)1303"
      },
      {
        "astId": 4023,
        "contract": "contracts/eclipse/CommonEclipse.sol:CommonEclipse",
        "label": "offeringToken",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)1303"
      },
      {
        "astId": 4026,
        "contract": "contracts/eclipse/CommonEclipse.sol:CommonEclipse",
        "label": "vault",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(SolarVault)9470"
      },
      {
        "astId": 4039,
        "contract": "contracts/eclipse/CommonEclipse.sol:CommonEclipse",
        "label": "harvestReleaseBlocks",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_uint256)4_storage"
      },
      {
        "astId": 4043,
        "contract": "contracts/eclipse/CommonEclipse.sol:CommonEclipse",
        "label": "harvestReleasePercent",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_uint256)4_storage"
      },
      {
        "astId": 4045,
        "contract": "contracts/eclipse/CommonEclipse.sol:CommonEclipse",
        "label": "startBlock",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 4047,
        "contract": "contracts/eclipse/CommonEclipse.sol:CommonEclipse",
        "label": "endBlock",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 4049,
        "contract": "contracts/eclipse/CommonEclipse.sol:CommonEclipse",
        "label": "eligibilityThreshold",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 4052,
        "contract": "contracts/eclipse/CommonEclipse.sol:CommonEclipse",
        "label": "claimEnabled",
        "offset": 0,
        "slot": "16",
        "type": "t_bool"
      },
      {
        "astId": 4103,
        "contract": "contracts/eclipse/CommonEclipse.sol:CommonEclipse",
        "label": "userInfo",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_mapping(t_uint8,t_struct(UserInfo)4078_storage))"
      },
      {
        "astId": 4108,
        "contract": "contracts/eclipse/CommonEclipse.sol:CommonEclipse",
        "label": "poolInfo",
        "offset": 0,
        "slot": "18",
        "type": "t_array(t_struct(PoolInfo)4093_storage)2_storage"
      },
      {
        "astId": 4111,
        "contract": "contracts/eclipse/CommonEclipse.sol:CommonEclipse",
        "label": "_multiplierInfo",
        "offset": 0,
        "slot": "32",
        "type": "t_struct(Multipliers)4067_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_array(t_uint8)3_storage)3_storage": {
        "base": "t_array(t_uint8)3_storage",
        "encoding": "inplace",
        "label": "uint8[3][3]",
        "numberOfBytes": "96"
      },
      "t_array(t_bool)4_storage": {
        "base": "t_bool",
        "encoding": "inplace",
        "label": "bool[4]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(PoolInfo)4093_storage)2_storage": {
        "base": "t_struct(PoolInfo)4093_storage",
        "encoding": "inplace",
        "label": "struct CommonEclipse.PoolInfo[2]",
        "numberOfBytes": "448"
      },
      "t_array(t_uint16)3_storage": {
        "base": "t_uint16",
        "encoding": "inplace",
        "label": "uint16[3]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)4_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[4]",
        "numberOfBytes": "128"
      },
      "t_array(t_uint8)3_storage": {
        "base": "t_uint8",
        "encoding": "inplace",
        "label": "uint8[3]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)1303": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(SolarVault)9470": {
        "encoding": "inplace",
        "label": "contract SolarVault",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint8,t_struct(UserInfo)4078_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint8 => struct CommonEclipse.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint8,t_struct(UserInfo)4078_storage)"
      },
      "t_mapping(t_uint8,t_struct(UserInfo)4078_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct CommonEclipse.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)4078_storage"
      },
      "t_struct(Multipliers)4067_storage": {
        "encoding": "inplace",
        "label": "struct CommonEclipse.Multipliers",
        "members": [
          {
            "astId": 4056,
            "contract": "contracts/eclipse/CommonEclipse.sol:CommonEclipse",
            "label": "poolThresholds",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint16)3_storage"
          },
          {
            "astId": 4060,
            "contract": "contracts/eclipse/CommonEclipse.sol:CommonEclipse",
            "label": "poolBaseMult",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint8)3_storage"
          },
          {
            "astId": 4066,
            "contract": "contracts/eclipse/CommonEclipse.sol:CommonEclipse",
            "label": "poolMultipliers",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_array(t_uint8)3_storage)3_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(PoolInfo)4093_storage": {
        "encoding": "inplace",
        "label": "struct CommonEclipse.PoolInfo",
        "members": [
          {
            "astId": 4080,
            "contract": "contracts/eclipse/CommonEclipse.sol:CommonEclipse",
            "label": "raisingAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4082,
            "contract": "contracts/eclipse/CommonEclipse.sol:CommonEclipse",
            "label": "offeringAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4084,
            "contract": "contracts/eclipse/CommonEclipse.sol:CommonEclipse",
            "label": "baseLimitInLP",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4086,
            "contract": "contracts/eclipse/CommonEclipse.sol:CommonEclipse",
            "label": "hasTax",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 4088,
            "contract": "contracts/eclipse/CommonEclipse.sol:CommonEclipse",
            "label": "totalAmountPool",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4090,
            "contract": "contracts/eclipse/CommonEclipse.sol:CommonEclipse",
            "label": "sumTaxesOverflow",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 4092,
            "contract": "contracts/eclipse/CommonEclipse.sol:CommonEclipse",
            "label": "totalAllocPoints",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(UserInfo)4078_storage": {
        "encoding": "inplace",
        "label": "struct CommonEclipse.UserInfo",
        "members": [
          {
            "astId": 4069,
            "contract": "contracts/eclipse/CommonEclipse.sol:CommonEclipse",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4071,
            "contract": "contracts/eclipse/CommonEclipse.sol:CommonEclipse",
            "label": "allocPoints",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4075,
            "contract": "contracts/eclipse/CommonEclipse.sol:CommonEclipse",
            "label": "claimed",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_bool)4_storage"
          },
          {
            "astId": 4077,
            "contract": "contracts/eclipse/CommonEclipse.sol:CommonEclipse",
            "label": "isRefunded",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}