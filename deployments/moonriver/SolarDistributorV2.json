{
  "address": "0x3af684Db016dD0148F6Bc607b4C4d700bfA25947",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IBoringERC20",
          "name": "_solar",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_solarPerSec",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_teamAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasuryAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_investorAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_teamPercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_treasuryPercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_investorPercent",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract IBoringERC20",
          "name": "lpToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "depositFeeBP",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "harvestInterval",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract IComplexRewarder[]",
          "name": "rewarders",
          "type": "address[]"
        }
      ],
      "name": "Add",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newAmount",
          "type": "uint256"
        }
      ],
      "name": "AllocPointsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "EmissionRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountLockedUp",
          "type": "uint256"
        }
      ],
      "name": "RewardLockedUp",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "depositFeeBP",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "harvestInterval",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract IComplexRewarder[]",
          "name": "rewarders",
          "type": "address[]"
        }
      ],
      "name": "Set",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "SetInvestorAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldPercent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPercent",
          "type": "uint256"
        }
      ],
      "name": "SetInvestorPercent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "SetTeamAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldPercent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPercent",
          "type": "uint256"
        }
      ],
      "name": "SetTeamPercent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "SetTreasuryAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldPercent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPercent",
          "type": "uint256"
        }
      ],
      "name": "SetTreasuryPercent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastRewardTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accSolarPerShare",
          "type": "uint256"
        }
      ],
      "name": "UpdatePool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAXIMUM_DEPOSIT_FEE_RATE",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAXIMUM_HARVEST_INTERVAL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "contract IBoringERC20",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_depositFeeBP",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_harvestInterval",
          "type": "uint256"
        },
        {
          "internalType": "contract IComplexRewarder[]",
          "name": "_rewarders",
          "type": "address[]"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "canHarvest",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_pids",
          "type": "uint256[]"
        }
      ],
      "name": "harvestMany",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "investorAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "investorPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "massUpdatePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        },
        {
          "internalType": "string[]",
          "name": "symbols",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "decimals",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "contract IBoringERC20",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accSolarPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "depositFeeBP",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "harvestInterval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalLp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "poolRewarders",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "rewarders",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "poolRewardsPerSec",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        },
        {
          "internalType": "string[]",
          "name": "symbols",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "decimals",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "rewardsPerSec",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "poolTotalLp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_depositFeeBP",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_harvestInterval",
          "type": "uint256"
        },
        {
          "internalType": "contract IComplexRewarder[]",
          "name": "_rewarders",
          "type": "address[]"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_investorAddress",
          "type": "address"
        }
      ],
      "name": "setInvestorAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newInvestorPercent",
          "type": "uint256"
        }
      ],
      "name": "setInvestorPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_teamAddress",
          "type": "address"
        }
      ],
      "name": "setTeamAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newTeamPercent",
          "type": "uint256"
        }
      ],
      "name": "setTeamPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasuryAddress",
          "type": "address"
        }
      ],
      "name": "setTreasuryAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newTreasuryPercent",
          "type": "uint256"
        }
      ],
      "name": "setTreasuryPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "solar",
      "outputs": [
        {
          "internalType": "contract IBoringERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "solarPerSec",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startFarming",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "teamAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "teamPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAllocPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLockedUpRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSolarInPools",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        }
      ],
      "name": "updateAllocPoint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_solarPerSec",
          "type": "uint256"
        }
      ],
      "name": "updateEmissionRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardLockedUp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nextHarvestUntil",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3281a983d7f5f11c8a763bee2aef95b1edcb6cc3a7e94002a3c1354b377c253b",
  "receipt": {
    "to": null,
    "from": "0xb152C1746543FdC63b308808497B64F52774f805",
    "contractAddress": "0x3af684Db016dD0148F6Bc607b4C4d700bfA25947",
    "transactionIndex": 0,
    "gasUsed": "4773848",
    "logsBloom": "0x
    "blockHash": "0xc09245595f3f72c5e1712391a0602b568ebed51ebd34e46257349fccbd2a99d9",
    "transactionHash": "0x3281a983d7f5f11c8a763bee2aef95b1edcb6cc3a7e94002a3c1354b377c253b",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 874365,
        "transactionHash": "0x3281a983d7f5f11c8a763bee2aef95b1edcb6cc3a7e94002a3c1354b377c253b",
        "address": "0x3af684Db016dD0148F6Bc607b4C4d700bfA25947",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b152c1746543fdc63b308808497b64f52774f805"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xc09245595f3f72c5e1712391a0602b568ebed51ebd34e46257349fccbd2a99d9"
      }
    ],
    "blockNumber": 874365,
    "cumulativeGasUsed": "4773848",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x46F79Cca5350E95F30e3F17b6D35CE360bd4EAAB",
    "1574074074074075",
    "0xb152C1746543FdC63b308808497B64F52774f805",
    "0xb152C1746543FdC63b308808497B64F52774f805",
    "0xb152C1746543FdC63b308808497B64F52774f805",
    100,
    100,
    100
  ],
  "solcInputHash": "ce0696306a8f449a758e8b765179384f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBoringERC20\",\"name\":\"_solar\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_solarPerSec\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_teamAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasuryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_investorAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_teamPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_treasuryPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_investorPercent\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IBoringERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"depositFeeBP\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"harvestInterval\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IComplexRewarder[]\",\"name\":\"rewarders\",\"type\":\"address[]\"}],\"name\":\"Add\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"AllocPointsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"EmissionRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLockedUp\",\"type\":\"uint256\"}],\"name\":\"RewardLockedUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"depositFeeBP\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"harvestInterval\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IComplexRewarder[]\",\"name\":\"rewarders\",\"type\":\"address[]\"}],\"name\":\"Set\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"SetInvestorAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPercent\",\"type\":\"uint256\"}],\"name\":\"SetInvestorPercent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"SetTeamAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPercent\",\"type\":\"uint256\"}],\"name\":\"SetTeamPercent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"SetTreasuryAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPercent\",\"type\":\"uint256\"}],\"name\":\"SetTreasuryPercent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accSolarPerShare\",\"type\":\"uint256\"}],\"name\":\"UpdatePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAXIMUM_DEPOSIT_FEE_RATE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_HARVEST_INTERVAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IBoringERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_depositFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_harvestInterval\",\"type\":\"uint256\"},{\"internalType\":\"contract IComplexRewarder[]\",\"name\":\"_rewarders\",\"type\":\"address[]\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"canHarvest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_pids\",\"type\":\"uint256[]\"}],\"name\":\"harvestMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investorPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"symbols\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"decimals\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IBoringERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accSolarPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"depositFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"harvestInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"poolRewarders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"rewarders\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"poolRewardsPerSec\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"symbols\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"decimals\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rewardsPerSec\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"poolTotalLp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_depositFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_harvestInterval\",\"type\":\"uint256\"},{\"internalType\":\"contract IComplexRewarder[]\",\"name\":\"_rewarders\",\"type\":\"address[]\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_investorAddress\",\"type\":\"address\"}],\"name\":\"setInvestorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newInvestorPercent\",\"type\":\"uint256\"}],\"name\":\"setInvestorPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teamAddress\",\"type\":\"address\"}],\"name\":\"setTeamAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newTeamPercent\",\"type\":\"uint256\"}],\"name\":\"setTeamPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryAddress\",\"type\":\"address\"}],\"name\":\"setTreasuryAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newTreasuryPercent\",\"type\":\"uint256\"}],\"name\":\"setTreasuryPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"solar\",\"outputs\":[{\"internalType\":\"contract IBoringERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"solarPerSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startFarming\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLockedUpRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSolarInPools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"}],\"name\":\"updateAllocPoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_solarPerSec\",\"type\":\"uint256\"}],\"name\":\"updateEmissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardLockedUp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextHarvestUntil\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"poolRewardsPerSec(uint256)\":{\"notice\":\"View function to see pool rewards per sec\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/farm/v2/SolarDistributorV2.sol\":\"SolarDistributorV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"contracts/farm/v2/SolarDistributorV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"./rewarders/IComplexRewarder.sol\\\";\\r\\nimport \\\"./libraries/BoringERC20.sol\\\";\\r\\n\\r\\ncontract SolarDistributorV2 is Ownable, ReentrancyGuard {\\r\\n    using BoringERC20 for IBoringERC20;\\r\\n\\r\\n    // Info of each user.\\r\\n    struct UserInfo {\\r\\n        uint256 amount; // How many LP tokens the user has provided.\\r\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\r\\n        uint256 rewardLockedUp; // Reward locked up.\\r\\n        uint256 nextHarvestUntil; // When can the user harvest again.\\r\\n    }\\r\\n\\r\\n    // Info of each pool.\\r\\n    struct PoolInfo {\\r\\n        IBoringERC20 lpToken; // Address of LP token contract.\\r\\n        uint256 allocPoint; // How many allocation points assigned to this pool. Solar to distribute per block.\\r\\n        uint256 lastRewardTimestamp; // Last block number that Solar distribution occurs.\\r\\n        uint256 accSolarPerShare; // Accumulated Solar per share, times 1e12. See below.\\r\\n        uint16 depositFeeBP; // Deposit fee in basis points\\r\\n        uint256 harvestInterval; // Harvest interval in seconds\\r\\n        uint256 totalLp; // Total token in Pool\\r\\n        IComplexRewarder[] rewarders; // Array of rewarder contract for pools with incentives\\r\\n    }\\r\\n\\r\\n    IBoringERC20 public solar;\\r\\n\\r\\n    // Solar tokens created per second\\r\\n    uint256 public solarPerSec;\\r\\n\\r\\n    // Max harvest interval: 14 days\\r\\n    uint256 public constant MAXIMUM_HARVEST_INTERVAL = 14 days;\\r\\n\\r\\n    // Maximum deposit fee rate: 10%\\r\\n    uint16 public constant MAXIMUM_DEPOSIT_FEE_RATE = 1000;\\r\\n\\r\\n    // Info of each pool\\r\\n    PoolInfo[] public poolInfo;\\r\\n\\r\\n    // Info of each user that stakes LP tokens.\\r\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\r\\n\\r\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\r\\n    uint256 public totalAllocPoint = 0;\\r\\n\\r\\n    // The timestamp when Solar mining starts.\\r\\n    uint256 public startTimestamp;\\r\\n\\r\\n    // Total locked up rewards\\r\\n    uint256 public totalLockedUpRewards;\\r\\n\\r\\n    // Total Solar in Solar Pools (can be multiple pools)\\r\\n    uint256 public totalSolarInPools = 0;\\r\\n\\r\\n    // Team address.\\r\\n    address public teamAddress;\\r\\n\\r\\n    // Treasury address.\\r\\n    address public treasuryAddress;\\r\\n\\r\\n    // Investor address.\\r\\n    address public investorAddress;\\r\\n\\r\\n    // Percentage of pool rewards that goto the team.\\r\\n    uint256 public teamPercent;\\r\\n\\r\\n    // Percentage of pool rewards that goes to the treasury.\\r\\n    uint256 public treasuryPercent;\\r\\n\\r\\n    // Percentage of pool rewards that goes to the investor.\\r\\n    uint256 public investorPercent;\\r\\n\\r\\n    modifier validatePoolByPid(uint256 _pid) {\\r\\n        require(_pid < poolInfo.length, \\\"Pool does not exist\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    event Add(\\r\\n        uint256 indexed pid,\\r\\n        uint256 allocPoint,\\r\\n        IBoringERC20 indexed lpToken,\\r\\n        uint16 depositFeeBP,\\r\\n        uint256 harvestInterval,\\r\\n        IComplexRewarder[] indexed rewarders\\r\\n    );\\r\\n\\r\\n    event Set(\\r\\n        uint256 indexed pid,\\r\\n        uint256 allocPoint,\\r\\n        uint16 depositFeeBP,\\r\\n        uint256 harvestInterval,\\r\\n        IComplexRewarder[] indexed rewarders\\r\\n    );\\r\\n\\r\\n    event UpdatePool(\\r\\n        uint256 indexed pid,\\r\\n        uint256 lastRewardTimestamp,\\r\\n        uint256 lpSupply,\\r\\n        uint256 accSolarPerShare\\r\\n    );\\r\\n\\r\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n\\r\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n\\r\\n    event EmergencyWithdraw(\\r\\n        address indexed user,\\r\\n        uint256 indexed pid,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    event EmissionRateUpdated(\\r\\n        address indexed caller,\\r\\n        uint256 previousValue,\\r\\n        uint256 newValue\\r\\n    );\\r\\n\\r\\n    event RewardLockedUp(\\r\\n        address indexed user,\\r\\n        uint256 indexed pid,\\r\\n        uint256 amountLockedUp\\r\\n    );\\r\\n\\r\\n    event AllocPointsUpdated(\\r\\n        address indexed caller,\\r\\n        uint256 previousAmount,\\r\\n        uint256 newAmount\\r\\n    );\\r\\n\\r\\n    event SetTeamAddress(\\r\\n        address indexed oldAddress,\\r\\n        address indexed newAddress\\r\\n    );\\r\\n\\r\\n    event SetTreasuryAddress(\\r\\n        address indexed oldAddress,\\r\\n        address indexed newAddress\\r\\n    );\\r\\n\\r\\n    event SetInvestorAddress(\\r\\n        address indexed oldAddress,\\r\\n        address indexed newAddress\\r\\n    );\\r\\n\\r\\n    event SetTeamPercent(uint256 oldPercent, uint256 newPercent);\\r\\n\\r\\n    event SetTreasuryPercent(uint256 oldPercent, uint256 newPercent);\\r\\n\\r\\n    event SetInvestorPercent(uint256 oldPercent, uint256 newPercent);\\r\\n\\r\\n    constructor(\\r\\n        IBoringERC20 _solar,\\r\\n        uint256 _solarPerSec,\\r\\n        address _teamAddress,\\r\\n        address _treasuryAddress,\\r\\n        address _investorAddress,\\r\\n        uint256 _teamPercent,\\r\\n        uint256 _treasuryPercent,\\r\\n        uint256 _investorPercent\\r\\n    ) {\\r\\n        require(\\r\\n            0 <= _teamPercent && _teamPercent <= 1000,\\r\\n            \\\"constructor: invalid team percent value\\\"\\r\\n        );\\r\\n        require(\\r\\n            0 <= _treasuryPercent && _treasuryPercent <= 1000,\\r\\n            \\\"constructor: invalid treasury percent value\\\"\\r\\n        );\\r\\n        require(\\r\\n            0 <= _investorPercent && _investorPercent <= 1000,\\r\\n            \\\"constructor: invalid investor percent value\\\"\\r\\n        );\\r\\n        require(\\r\\n            _teamPercent + _treasuryPercent + _investorPercent <= 1000,\\r\\n            \\\"constructor: total percent over max\\\"\\r\\n        );\\r\\n\\r\\n        //StartBlock always many years later from contract const ruct, will be set later in StartFarming function\\r\\n        startTimestamp = block.timestamp + (60 * 60 * 24 * 365);\\r\\n\\r\\n        solar = _solar;\\r\\n        solarPerSec = _solarPerSec;\\r\\n\\r\\n        teamAddress = _teamAddress;\\r\\n        treasuryAddress = _treasuryAddress;\\r\\n        investorAddress = _investorAddress;\\r\\n\\r\\n        teamPercent = _teamPercent;\\r\\n        treasuryPercent = _treasuryPercent;\\r\\n        investorPercent = _investorPercent;\\r\\n    }\\r\\n\\r\\n    // Set farming start, can call only once\\r\\n    function startFarming() public onlyOwner {\\r\\n        require(\\r\\n            block.timestamp < startTimestamp,\\r\\n            \\\"start farming: farm started already\\\"\\r\\n        );\\r\\n\\r\\n        uint256 length = poolInfo.length;\\r\\n        for (uint256 pid = 0; pid < length; ++pid) {\\r\\n            PoolInfo storage pool = poolInfo[pid];\\r\\n            pool.lastRewardTimestamp = block.timestamp;\\r\\n        }\\r\\n\\r\\n        startTimestamp = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function poolLength() external view returns (uint256) {\\r\\n        return poolInfo.length;\\r\\n    }\\r\\n\\r\\n    // Add a new lp to the pool. Can only be called by the owner.\\r\\n    // Can add multiple pool with same lp token without messing up rewards, because each pool's balance is tracked using its own totalLp\\r\\n    function add(\\r\\n        uint256 _allocPoint,\\r\\n        IBoringERC20 _lpToken,\\r\\n        uint16 _depositFeeBP,\\r\\n        uint256 _harvestInterval,\\r\\n        IComplexRewarder[] calldata _rewarders\\r\\n    ) public onlyOwner {\\r\\n        require(\\r\\n            _depositFeeBP <= MAXIMUM_DEPOSIT_FEE_RATE,\\r\\n            \\\"add: deposit fee too high\\\"\\r\\n        );\\r\\n        require(\\r\\n            _harvestInterval <= MAXIMUM_HARVEST_INTERVAL,\\r\\n            \\\"add: invalid harvest interval\\\"\\r\\n        );\\r\\n        require(\\r\\n            Address.isContract(address(_lpToken)),\\r\\n            \\\"add: LP token must be a valid contract\\\"\\r\\n        );\\r\\n\\r\\n        for (\\r\\n            uint256 rewarderId = 0;\\r\\n            rewarderId < _rewarders.length;\\r\\n            ++rewarderId\\r\\n        ) {\\r\\n            require(\\r\\n                Address.isContract(address(_rewarders[rewarderId])),\\r\\n                \\\"add: rewarder must be contract\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        massUpdatePools();\\r\\n\\r\\n        uint256 lastRewardTimestamp = block.timestamp > startTimestamp\\r\\n            ? block.timestamp\\r\\n            : startTimestamp;\\r\\n\\r\\n        totalAllocPoint = totalAllocPoint + _allocPoint;\\r\\n\\r\\n        poolInfo.push(\\r\\n            PoolInfo({\\r\\n                lpToken: _lpToken,\\r\\n                allocPoint: _allocPoint,\\r\\n                lastRewardTimestamp: lastRewardTimestamp,\\r\\n                accSolarPerShare: 0,\\r\\n                depositFeeBP: _depositFeeBP,\\r\\n                harvestInterval: _harvestInterval,\\r\\n                totalLp: 0,\\r\\n                rewarders: _rewarders\\r\\n            })\\r\\n        );\\r\\n\\r\\n        emit Add(\\r\\n            poolInfo.length - 1,\\r\\n            _allocPoint,\\r\\n            _lpToken,\\r\\n            _depositFeeBP,\\r\\n            _harvestInterval,\\r\\n            _rewarders\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // Update the given pool's Solar allocation point and deposit fee. Can only be called by the owner.\\r\\n    function set(\\r\\n        uint256 _pid,\\r\\n        uint256 _allocPoint,\\r\\n        uint16 _depositFeeBP,\\r\\n        uint256 _harvestInterval,\\r\\n        IComplexRewarder[] calldata _rewarders\\r\\n    ) public onlyOwner validatePoolByPid(_pid) {\\r\\n        require(\\r\\n            _depositFeeBP <= MAXIMUM_DEPOSIT_FEE_RATE,\\r\\n            \\\"set: deposit fee too high\\\"\\r\\n        );\\r\\n        require(\\r\\n            _harvestInterval <= MAXIMUM_HARVEST_INTERVAL,\\r\\n            \\\"set: invalid harvest interval\\\"\\r\\n        );\\r\\n\\r\\n        for (\\r\\n            uint256 rewarderId = 0;\\r\\n            rewarderId < _rewarders.length;\\r\\n            ++rewarderId\\r\\n        ) {\\r\\n            require(\\r\\n                Address.isContract(address(_rewarders[rewarderId])),\\r\\n                \\\"add: rewarder must be contract\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        massUpdatePools();\\r\\n\\r\\n        totalAllocPoint =\\r\\n            totalAllocPoint -\\r\\n            poolInfo[_pid].allocPoint +\\r\\n            _allocPoint;\\r\\n\\r\\n        poolInfo[_pid].allocPoint = _allocPoint;\\r\\n        poolInfo[_pid].depositFeeBP = _depositFeeBP;\\r\\n        poolInfo[_pid].harvestInterval = _harvestInterval;\\r\\n        poolInfo[_pid].rewarders = _rewarders;\\r\\n\\r\\n        emit Set(\\r\\n            _pid,\\r\\n            _allocPoint,\\r\\n            _depositFeeBP,\\r\\n            _harvestInterval,\\r\\n            _rewarders\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // View function to see pending rewards on frontend.\\r\\n    function pendingTokens(uint256 _pid, address _user)\\r\\n        external\\r\\n        view\\r\\n        validatePoolByPid(_pid)\\r\\n        returns (\\r\\n            address[] memory addresses,\\r\\n            string[] memory symbols,\\r\\n            uint256[] memory decimals,\\r\\n            uint256[] memory amounts\\r\\n        )\\r\\n    {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][_user];\\r\\n        uint256 accSolarPerShare = pool.accSolarPerShare;\\r\\n        uint256 lpSupply = pool.totalLp;\\r\\n\\r\\n        if (block.timestamp > pool.lastRewardTimestamp && lpSupply != 0) {\\r\\n            uint256 multiplier = block.timestamp - pool.lastRewardTimestamp;\\r\\n            uint256 lpPercent = 1000 -\\r\\n                teamPercent -\\r\\n                treasuryPercent -\\r\\n                investorPercent;\\r\\n\\r\\n            uint256 solarReward = ((((multiplier * solarPerSec) *\\r\\n                pool.allocPoint) / totalAllocPoint) * lpPercent) / 1000;\\r\\n\\r\\n            accSolarPerShare =\\r\\n                accSolarPerShare +\\r\\n                (((solarReward * 1e12) / lpSupply));\\r\\n        }\\r\\n\\r\\n        uint256 pendingSolar = (((user.amount * accSolarPerShare) / 1e12) -\\r\\n            user.rewardDebt) + user.rewardLockedUp;\\r\\n\\r\\n        addresses = new address[](pool.rewarders.length + 1);\\r\\n        symbols = new string[](pool.rewarders.length + 1);\\r\\n        amounts = new uint256[](pool.rewarders.length + 1);\\r\\n        decimals = new uint256[](pool.rewarders.length + 1);\\r\\n\\r\\n        addresses[0] = address(solar);\\r\\n        symbols[0] = IBoringERC20(solar).safeSymbol();\\r\\n        decimals[0] = IBoringERC20(solar).safeDecimals();\\r\\n        amounts[0] = pendingSolar;\\r\\n\\r\\n        for (\\r\\n            uint256 rewarderId = 0;\\r\\n            rewarderId < pool.rewarders.length;\\r\\n            ++rewarderId\\r\\n        ) {\\r\\n            addresses[rewarderId + 1] = address(\\r\\n                pool.rewarders[rewarderId].rewardToken()\\r\\n            );\\r\\n\\r\\n            symbols[rewarderId + 1] = IBoringERC20(\\r\\n                pool.rewarders[rewarderId].rewardToken()\\r\\n            ).safeSymbol();\\r\\n\\r\\n            decimals[rewarderId + 1] = IBoringERC20(\\r\\n                pool.rewarders[rewarderId].rewardToken()\\r\\n            ).safeDecimals();\\r\\n\\r\\n            amounts[rewarderId + 1] = pool.rewarders[rewarderId].pendingTokens(\\r\\n                _pid,\\r\\n                _user\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice View function to see pool rewards per sec\\r\\n    function poolRewardsPerSec(uint256 _pid)\\r\\n        external\\r\\n        view\\r\\n        validatePoolByPid(_pid)\\r\\n        returns (\\r\\n            address[] memory addresses,\\r\\n            string[] memory symbols,\\r\\n            uint256[] memory decimals,\\r\\n            uint256[] memory rewardsPerSec\\r\\n        )\\r\\n    {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n\\r\\n        addresses = new address[](pool.rewarders.length + 1);\\r\\n        symbols = new string[](pool.rewarders.length + 1);\\r\\n        decimals = new uint256[](pool.rewarders.length + 1);\\r\\n        rewardsPerSec = new uint256[](pool.rewarders.length + 1);\\r\\n\\r\\n        addresses[0] = address(solar);\\r\\n        symbols[0] = IBoringERC20(solar).safeSymbol();\\r\\n        decimals[0] = IBoringERC20(solar).safeDecimals();\\r\\n        rewardsPerSec[0] = (pool.allocPoint / totalAllocPoint) * solarPerSec;\\r\\n        for (\\r\\n            uint256 rewarderId = 0;\\r\\n            rewarderId < pool.rewarders.length;\\r\\n            ++rewarderId\\r\\n        ) {\\r\\n            addresses[rewarderId + 1] = address(\\r\\n                pool.rewarders[rewarderId].rewardToken()\\r\\n            );\\r\\n\\r\\n            symbols[rewarderId + 1] = IBoringERC20(\\r\\n                pool.rewarders[rewarderId].rewardToken()\\r\\n            ).safeSymbol();\\r\\n\\r\\n            decimals[rewarderId + 1] = IBoringERC20(\\r\\n                pool.rewarders[rewarderId].rewardToken()\\r\\n            ).safeDecimals();\\r\\n\\r\\n            rewardsPerSec[rewarderId + 1] = pool\\r\\n                .rewarders[rewarderId]\\r\\n                .poolRewardsPerSec(_pid);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // View function to see rewarders for a pool\\r\\n    function poolRewarders(uint256 _pid)\\r\\n        external\\r\\n        view\\r\\n        validatePoolByPid(_pid)\\r\\n        returns (address[] memory rewarders)\\r\\n    {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n\\r\\n        for (\\r\\n            uint256 rewarderId = 0;\\r\\n            rewarderId < pool.rewarders.length;\\r\\n            ++rewarderId\\r\\n        ) {\\r\\n            rewarders[rewarderId] = address(pool.rewarders[rewarderId]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // View function to see if user can harvest Solar.\\r\\n    function canHarvest(uint256 _pid, address _user)\\r\\n        public\\r\\n        view\\r\\n        validatePoolByPid(_pid)\\r\\n        returns (bool)\\r\\n    {\\r\\n        UserInfo storage user = userInfo[_pid][_user];\\r\\n        return\\r\\n            block.timestamp >= startTimestamp &&\\r\\n            block.timestamp >= user.nextHarvestUntil;\\r\\n    }\\r\\n\\r\\n    // Update reward vairables for all pools. Be careful of gas spending!\\r\\n    function massUpdatePools() public {\\r\\n        uint256 length = poolInfo.length;\\r\\n        for (uint256 pid = 0; pid < length; ++pid) {\\r\\n            updatePool(pid);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Update reward variables of the given pool to be up-to-date.\\r\\n    function updatePool(uint256 _pid) public validatePoolByPid(_pid) {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n\\r\\n        if (block.timestamp <= pool.lastRewardTimestamp) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 lpSupply = pool.totalLp;\\r\\n\\r\\n        if (lpSupply == 0 || pool.allocPoint == 0) {\\r\\n            pool.lastRewardTimestamp = block.timestamp;\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 multiplier = block.timestamp - pool.lastRewardTimestamp;\\r\\n\\r\\n        uint256 solarReward = ((multiplier * solarPerSec) * pool.allocPoint) /\\r\\n            totalAllocPoint;\\r\\n\\r\\n        uint256 lpPercent = 1000 -\\r\\n            teamPercent -\\r\\n            treasuryPercent -\\r\\n            investorPercent;\\r\\n\\r\\n        solar.mint(teamAddress, (solarReward * teamPercent) / 1000);\\r\\n        solar.mint(treasuryAddress, (solarReward * treasuryPercent) / 1000);\\r\\n        solar.mint(investorAddress, (solarReward * investorPercent) / 1000);\\r\\n        solar.mint(address(this), (solarReward * lpPercent) / 1000);\\r\\n\\r\\n        pool.accSolarPerShare +=\\r\\n            (((solarReward * 1e12) / pool.totalLp) * lpPercent) /\\r\\n            1000;\\r\\n\\r\\n        pool.lastRewardTimestamp = block.timestamp;\\r\\n\\r\\n        emit UpdatePool(\\r\\n            _pid,\\r\\n            pool.lastRewardTimestamp,\\r\\n            lpSupply,\\r\\n            pool.accSolarPerShare\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // Deposit tokens for Solar allocation.\\r\\n    function deposit(uint256 _pid, uint256 _amount)\\r\\n        public\\r\\n        nonReentrant\\r\\n        validatePoolByPid(_pid)\\r\\n    {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n\\r\\n        updatePool(_pid);\\r\\n\\r\\n        payOrLockupPendingSolar(_pid);\\r\\n\\r\\n        if (_amount > 0) {\\r\\n            uint256 beforeDeposit = pool.lpToken.balanceOf(address(this));\\r\\n            pool.lpToken.safeTransferFrom(msg.sender, address(this), _amount);\\r\\n            uint256 afterDeposit = pool.lpToken.balanceOf(address(this));\\r\\n\\r\\n            _amount = afterDeposit - beforeDeposit;\\r\\n\\r\\n            if (pool.depositFeeBP > 0) {\\r\\n                uint256 depositFee = (_amount * pool.depositFeeBP) / 10000;\\r\\n                pool.lpToken.safeTransfer(treasuryAddress, depositFee);\\r\\n\\r\\n                _amount = _amount - depositFee;\\r\\n            }\\r\\n\\r\\n            user.amount += _amount;\\r\\n\\r\\n            if (address(pool.lpToken) == address(solar)) {\\r\\n                totalSolarInPools += _amount;\\r\\n            }\\r\\n        }\\r\\n        user.rewardDebt = (user.amount * pool.accSolarPerShare) / 1e12;\\r\\n\\r\\n        for (\\r\\n            uint256 rewarderId = 0;\\r\\n            rewarderId < pool.rewarders.length;\\r\\n            ++rewarderId\\r\\n        ) {\\r\\n            pool.rewarders[rewarderId].onSolarReward(\\r\\n                _pid,\\r\\n                msg.sender,\\r\\n                user.amount\\r\\n            );\\r\\n        }\\r\\n\\r\\n        if (_amount > 0) {\\r\\n            pool.totalLp += _amount;\\r\\n        }\\r\\n\\r\\n        emit Deposit(msg.sender, _pid, _amount);\\r\\n    }\\r\\n\\r\\n    //withdraw tokens\\r\\n    function withdraw(uint256 _pid, uint256 _amount)\\r\\n        public\\r\\n        nonReentrant\\r\\n        validatePoolByPid(_pid)\\r\\n    {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n\\r\\n        //this will make sure that user can only withdraw from his pool\\r\\n        require(user.amount >= _amount, \\\"withdraw: user amount not enough\\\");\\r\\n\\r\\n        //cannot withdraw more than pool's balance\\r\\n        require(pool.totalLp >= _amount, \\\"withdraw: pool total not enough\\\");\\r\\n\\r\\n        updatePool(_pid);\\r\\n\\r\\n        payOrLockupPendingSolar(_pid);\\r\\n\\r\\n        if (_amount > 0) {\\r\\n            user.amount -= _amount;\\r\\n            if (address(pool.lpToken) == address(solar)) {\\r\\n                totalSolarInPools -= _amount;\\r\\n            }\\r\\n            pool.lpToken.safeTransfer(msg.sender, _amount);\\r\\n        }\\r\\n        user.rewardDebt = (user.amount * pool.accSolarPerShare) / 1e12;\\r\\n\\r\\n        for (\\r\\n            uint256 rewarderId = 0;\\r\\n            rewarderId < pool.rewarders.length;\\r\\n            ++rewarderId\\r\\n        ) {\\r\\n            pool.rewarders[rewarderId].onSolarReward(\\r\\n                _pid,\\r\\n                msg.sender,\\r\\n                user.amount\\r\\n            );\\r\\n        }\\r\\n\\r\\n        if (_amount > 0) {\\r\\n            pool.totalLp -= _amount;\\r\\n        }\\r\\n\\r\\n        emit Withdraw(msg.sender, _pid, _amount);\\r\\n    }\\r\\n\\r\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\r\\n    function emergencyWithdraw(uint256 _pid) public nonReentrant {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n        uint256 amount = user.amount;\\r\\n\\r\\n        //Cannot withdraw more than pool's balance\\r\\n        require(\\r\\n            pool.totalLp >= amount,\\r\\n            \\\"emergency withdraw: pool total not enough\\\"\\r\\n        );\\r\\n\\r\\n        user.amount = 0;\\r\\n        user.rewardDebt = 0;\\r\\n        user.rewardLockedUp = 0;\\r\\n        user.nextHarvestUntil = 0;\\r\\n        pool.totalLp -= amount;\\r\\n\\r\\n        if (address(pool.lpToken) == address(solar)) {\\r\\n            totalSolarInPools -= amount;\\r\\n        }\\r\\n\\r\\n        pool.lpToken.safeTransfer(msg.sender, amount);\\r\\n\\r\\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\\r\\n    }\\r\\n\\r\\n    // Pay or lockup pending Solar.\\r\\n    function payOrLockupPendingSolar(uint256 _pid) internal {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n\\r\\n        if (user.nextHarvestUntil == 0 && block.timestamp >= startTimestamp) {\\r\\n            user.nextHarvestUntil = block.timestamp + pool.harvestInterval;\\r\\n        }\\r\\n\\r\\n        uint256 pending = ((user.amount * pool.accSolarPerShare) / 1e12) -\\r\\n            user.rewardDebt;\\r\\n\\r\\n        if (canHarvest(_pid, msg.sender)) {\\r\\n            if (pending > 0 || user.rewardLockedUp > 0) {\\r\\n                // reset lockup\\r\\n                totalLockedUpRewards -= user.rewardLockedUp;\\r\\n                user.rewardLockedUp = 0;\\r\\n                user.nextHarvestUntil = block.timestamp + pool.harvestInterval;\\r\\n\\r\\n                // send rewards\\r\\n                safeSolarTransfer(msg.sender, pending + user.rewardLockedUp);\\r\\n            }\\r\\n        } else if (pending > 0) {\\r\\n            totalLockedUpRewards += pending;\\r\\n            user.rewardLockedUp += pending;\\r\\n            emit RewardLockedUp(msg.sender, _pid, pending);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Safe Solar transfer function, just in case if rounding error causes pool do not have enough Solar.\\r\\n    function safeSolarTransfer(address _to, uint256 _amount) internal {\\r\\n        if (solar.balanceOf(address(this)) > totalSolarInPools) {\\r\\n            //solarBal = total Solar in SolarDistributor - total Solar in Solar pools, this will make sure that SolarDistributor never transfer rewards from deposited Solar pools\\r\\n            uint256 solarBal = solar.balanceOf(address(this)) -\\r\\n                totalSolarInPools;\\r\\n            if (_amount >= solarBal) {\\r\\n                solar.safeTransfer(_to, solarBal);\\r\\n            } else if (_amount > 0) {\\r\\n                solar.safeTransfer(_to, _amount);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function updateEmissionRate(uint256 _solarPerSec) public onlyOwner {\\r\\n        massUpdatePools();\\r\\n\\r\\n        emit EmissionRateUpdated(msg.sender, solarPerSec, _solarPerSec);\\r\\n\\r\\n        solarPerSec = _solarPerSec;\\r\\n    }\\r\\n\\r\\n    function updateAllocPoint(uint256 _pid, uint256 _allocPoint)\\r\\n        public\\r\\n        onlyOwner\\r\\n    {\\r\\n        massUpdatePools();\\r\\n\\r\\n        emit AllocPointsUpdated(\\r\\n            msg.sender,\\r\\n            poolInfo[_pid].allocPoint,\\r\\n            _allocPoint\\r\\n        );\\r\\n\\r\\n        totalAllocPoint =\\r\\n            totalAllocPoint -\\r\\n            poolInfo[_pid].allocPoint +\\r\\n            _allocPoint;\\r\\n        poolInfo[_pid].allocPoint = _allocPoint;\\r\\n    }\\r\\n\\r\\n    function poolTotalLp(uint256 pid) external view returns (uint256) {\\r\\n        return poolInfo[pid].totalLp;\\r\\n    }\\r\\n\\r\\n    // Function to harvest many pools in a single transaction\\r\\n    function harvestMany(uint256[] calldata _pids) public {\\r\\n        for (uint256 index = 0; index < _pids.length; ++index) {\\r\\n            deposit(_pids[index], 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Update team address by the previous team address.\\r\\n    function setTeamAddress(address _teamAddress) public {\\r\\n        require(\\r\\n            msg.sender == teamAddress,\\r\\n            \\\"set team address: only previous team address can call this method\\\"\\r\\n        );\\r\\n        teamAddress = _teamAddress;\\r\\n        emit SetTeamAddress(msg.sender, _teamAddress);\\r\\n    }\\r\\n\\r\\n    function setTeamPercent(uint256 _newTeamPercent) public onlyOwner {\\r\\n        require(\\r\\n            0 <= _newTeamPercent && _newTeamPercent <= 1000,\\r\\n            \\\"set team percent: invalid percent value\\\"\\r\\n        );\\r\\n        require(\\r\\n            treasuryPercent + _newTeamPercent + investorPercent <= 1000,\\r\\n            \\\"set team percent: total percent over max\\\"\\r\\n        );\\r\\n        emit SetTeamPercent(teamPercent, _newTeamPercent);\\r\\n        teamPercent = _newTeamPercent;\\r\\n    }\\r\\n\\r\\n    // Update treasury address by the previous treasury.\\r\\n    function setTreasuryAddr(address _treasuryAddress) public {\\r\\n        require(msg.sender == treasuryAddress, \\\"set treasury address: wut?\\\");\\r\\n        treasuryAddress = _treasuryAddress;\\r\\n        emit SetTreasuryAddress(msg.sender, _treasuryAddress);\\r\\n    }\\r\\n\\r\\n    function setTreasuryPercent(uint256 _newTreasuryPercent) public onlyOwner {\\r\\n        require(\\r\\n            0 <= _newTreasuryPercent && _newTreasuryPercent <= 1000,\\r\\n            \\\"set treasury percent: invalid percent value\\\"\\r\\n        );\\r\\n        require(\\r\\n            teamPercent + _newTreasuryPercent + investorPercent <= 1000,\\r\\n            \\\"set treasury percent: total percent over max\\\"\\r\\n        );\\r\\n        emit SetTeamPercent(treasuryPercent, _newTreasuryPercent);\\r\\n        treasuryPercent = _newTreasuryPercent;\\r\\n    }\\r\\n\\r\\n    // Update the investor address by the previous investor.\\r\\n    function setInvestorAddress(address _investorAddress) public {\\r\\n        require(\\r\\n            msg.sender == investorAddress,\\r\\n            \\\"set investor address: only previous investor can call this method\\\"\\r\\n        );\\r\\n        investorAddress = _investorAddress;\\r\\n        emit SetInvestorAddress(msg.sender, _investorAddress);\\r\\n    }\\r\\n\\r\\n    function setInvestorPercent(uint256 _newInvestorPercent) public onlyOwner {\\r\\n        require(\\r\\n            0 <= _newInvestorPercent && _newInvestorPercent <= 1000,\\r\\n            \\\"set investor percent: invalid percent value\\\"\\r\\n        );\\r\\n        require(\\r\\n            teamPercent + _newInvestorPercent + treasuryPercent <= 1000,\\r\\n            \\\"set investor percent: total percent over max\\\"\\r\\n        );\\r\\n        emit SetTeamPercent(investorPercent, _newInvestorPercent);\\r\\n        investorPercent = _newInvestorPercent;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4d765a5d4c2672eb62c1786031309ebd4894dcb7c5d28b849858ced71a8f9107\",\"license\":\"MIT\"},\"contracts/farm/v2/libraries/BoringERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\n// solhint-disable avoid-low-level-calls\\r\\nimport \\\"./IBoringERC20.sol\\\";\\r\\n\\r\\nlibrary BoringERC20 {\\r\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\r\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\r\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\r\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\r\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\r\\n\\r\\n    function returnDataToString(bytes memory data)\\r\\n        internal\\r\\n        pure\\r\\n        returns (string memory)\\r\\n    {\\r\\n        if (data.length >= 64) {\\r\\n            return abi.decode(data, (string));\\r\\n        } else if (data.length == 32) {\\r\\n            uint8 i = 0;\\r\\n            while (i < 32 && data[i] != 0) {\\r\\n                i++;\\r\\n            }\\r\\n            bytes memory bytesArray = new bytes(i);\\r\\n            for (i = 0; i < 32 && data[i] != 0; i++) {\\r\\n                bytesArray[i] = data[i];\\r\\n            }\\r\\n            return string(bytesArray);\\r\\n        } else {\\r\\n            return \\\"???\\\";\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\\r\\n    /// @param token The address of the ERC-20 token contract.\\r\\n    /// @return (string) Token symbol.\\r\\n    function safeSymbol(IBoringERC20 token)\\r\\n        internal\\r\\n        view\\r\\n        returns (string memory)\\r\\n    {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(\\r\\n            abi.encodeWithSelector(SIG_SYMBOL)\\r\\n        );\\r\\n        return success ? returnDataToString(data) : \\\"???\\\";\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\\r\\n    /// @param token The address of the ERC-20 token contract.\\r\\n    /// @return (string) Token name.\\r\\n    function safeName(IBoringERC20 token)\\r\\n        internal\\r\\n        view\\r\\n        returns (string memory)\\r\\n    {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(\\r\\n            abi.encodeWithSelector(SIG_NAME)\\r\\n        );\\r\\n        return success ? returnDataToString(data) : \\\"???\\\";\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\\r\\n    /// @param token The address of the ERC-20 token contract.\\r\\n    /// @return (uint8) Token decimals.\\r\\n    function safeDecimals(IBoringERC20 token) internal view returns (uint8) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(\\r\\n            abi.encodeWithSelector(SIG_DECIMALS)\\r\\n        );\\r\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\r\\n    /// Reverts on a failed transfer.\\r\\n    /// @param token The address of the ERC-20 token.\\r\\n    /// @param to Transfer tokens to.\\r\\n    /// @param amount The token amount.\\r\\n    function safeTransfer(\\r\\n        IBoringERC20 token,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = address(token).call(\\r\\n            abi.encodeWithSelector(SIG_TRANSFER, to, amount)\\r\\n        );\\r\\n        require(\\r\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\r\\n            \\\"BoringERC20: Transfer failed\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\r\\n    /// Reverts on a failed transfer.\\r\\n    /// @param token The address of the ERC-20 token.\\r\\n    /// @param from Transfer tokens from.\\r\\n    /// @param to Transfer tokens to.\\r\\n    /// @param amount The token amount.\\r\\n    function safeTransferFrom(\\r\\n        IBoringERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = address(token).call(\\r\\n            abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount)\\r\\n        );\\r\\n        require(\\r\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\r\\n            \\\"BoringERC20: TransferFrom failed\\\"\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8d7fdeae919fa55b40b1d6da668d1ae791137deb154b68f24d75fe6b1901a44d\",\"license\":\"MIT\"},\"contracts/farm/v2/libraries/IBoringERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\ninterface IBoringERC20 {\\r\\n    function mint(address to, uint256 amount) external;\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n    /// @notice EIP 2612\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xf47947a40bd436a7d24bd22f3cf673977512966a6cbae11e551e48bb618044c7\",\"license\":\"MIT\"},\"contracts/farm/v2/rewarders/IComplexRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\nimport \\\"../libraries/IBoringERC20.sol\\\";\\r\\n\\r\\ninterface IComplexRewarder {\\r\\n    function onSolarReward(\\r\\n        uint256 pid,\\r\\n        address user,\\r\\n        uint256 newLpAmount\\r\\n    ) external;\\r\\n\\r\\n    function pendingTokens(uint256 pid, address user)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 pending);\\r\\n\\r\\n    function rewardToken() external view returns (IBoringERC20);\\r\\n\\r\\n    function poolRewardsPerSec(uint256 pid) external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x55911c291cec3b94dca14d8d6894cbce317f42429e4a36845dfb748f41948990\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600060065560006009553480156200001b57600080fd5b5060405162005524380380620055248339810160408190526200003e91620002c6565b620000493362000276565b600180556103e8831115620000b55760405162461bcd60e51b815260206004820152602760248201527f636f6e7374727563746f723a20696e76616c6964207465616d2070657263656e604482015266742076616c756560c81b60648201526084015b60405180910390fd5b6103e88211156200011d5760405162461bcd60e51b815260206004820152602b60248201527f636f6e7374727563746f723a20696e76616c696420747265617375727920706560448201526a7263656e742076616c756560a81b6064820152608401620000ac565b6103e8811115620001855760405162461bcd60e51b815260206004820152602b60248201527f636f6e7374727563746f723a20696e76616c696420696e766573746f7220706560448201526a7263656e742076616c756560a81b6064820152608401620000ac565b6103e88162000195848662000355565b620001a1919062000355565b1115620001fd5760405162461bcd60e51b815260206004820152602360248201527f636f6e7374727563746f723a20746f74616c2070657263656e74206f766572206044820152620dac2f60eb1b6064820152608401620000ac565b6200020d426301e1338062000355565b600755600280546001600160a01b03199081166001600160a01b039a8b1617909155600397909755600a8054881696891696909617909555600b8054871694881694909417909355600c80549095169190951617909255600d92909255600e55600f5562000395565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080600080600080600080610100898b031215620002e457600080fd5b8851620002f1816200037c565b60208a015160408b015191995097506200030b816200037c565b60608a01519096506200031e816200037c565b60808a015190955062000331816200037c565b60a08a015160c08b015160e0909b0151999c989b5096999598909790945092505050565b600082198211156200037757634e487b7160e01b600052601160045260246000fd5b500190565b6001600160a01b03811681146200039257600080fd5b50565b61517f80620003a56000396000f3fe608060405234801561001057600080fd5b50600436106102de5760003560e01c8063812c64f111610186578063d761595c116100e3578063e6fa6d6d11610097578063eff8976b11610071578063eff8976b14610682578063f2fde38b146106a2578063ffcd4263146106b557600080fd5b8063e6fa6d6d14610646578063e6fd48bc14610666578063eddf96521461066f57600080fd5b8063de73149d116100c8578063de73149d14610620578063e164ac501461062a578063e2bbb1581461063357600080fd5b8063d761595c14610604578063dc640ac91461060d57600080fd5b8063949e63021161013a578063a7e05b9c1161011f578063a7e05b9c146105c9578063afbcfea1146105dc578063c5f956af146105e457600080fd5b8063949e6302146105ad5780639a26c2fa146105c057600080fd5b806389a2bc251161016b57806389a2bc251461051c5780638da5cb5b1461052f57806393f1a40b1461054d57600080fd5b8063812c64f1146104ed578063876d3c9c1461050957600080fd5b806342602f1e1161023f57806351eb05a6116101f3578063654c9ece116101cd578063654c9ece146104bf5780636690864e146104d2578063715018a6146104e557600080fd5b806351eb05a6146104915780635312ea8e146104a4578063630b5ba1146104b757600080fd5b8063465e81ec11610224578063465e81ec14610452578063474fa63014610475578063508593ab1461047e57600080fd5b806342602f1e1461042c578063441a3e701461043f57600080fd5b80631526fe27116102965780631c75f0851161027b5780631c75f085146103d65780632081ccc4146103f65780632e6c998d1461040957600080fd5b80631526fe271461036a57806317caf6f1146103cd57600080fd5b8063081e3eda116102c7578063081e3eda146103085780630ba84cd21461031057806312e228fd1461032557600080fd5b806304ef9d58146102e35780630735b208146102ff575b600080fd5b6102ec600e5481565b6040519081526020015b60405180910390f35b6102ec600f5481565b6004546102ec565b61032361031e366004614c59565b6106c8565b005b600c546103459073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016102f6565b61037d610378366004614c59565b610799565b6040805173ffffffffffffffffffffffffffffffffffffffff9098168852602088019690965294860193909352606085019190915261ffff16608084015260a083015260c082015260e0016102f6565b6102ec60065481565b600a546103459073ffffffffffffffffffffffffffffffffffffffff1681565b610323610404366004614d57565b610803565b61041c610417366004614c8b565b610bf6565b60405190151581526020016102f6565b61032361043a366004614af0565b610cb4565b61032361044d366004614d35565b610df2565b610465610460366004614c59565b6111d4565b6040516102f69493929190614ea9565b6102ec60085481565b61032361048c366004614cbb565b6118f5565b61032361049f366004614c59565b611daa565b6103236104b2366004614c59565b612297565b6103236124b5565b6102ec6104cd366004614c59565b6124dc565b6103236104e0366004614af0565b61250a565b610323612648565b6104f66103e881565b60405161ffff90911681526020016102f6565b610323610517366004614c59565b6126d5565b61032361052a366004614c59565b6128d5565b60005473ffffffffffffffffffffffffffffffffffffffff16610345565b61058d61055b366004614c8b565b600560209081526000928352604080842090915290825290208054600182015460028301546003909301549192909184565b6040805194855260208501939093529183015260608201526080016102f6565b6103236105bb366004614c59565b612ad5565b6102ec60035481565b6103236105d7366004614af0565b612cd5565b610323612dc7565b600b546103459073ffffffffffffffffffffffffffffffffffffffff1681565b6102ec60095481565b61032361061b366004614b0d565b612f2f565b6102ec6212750081565b6102ec600d5481565b610323610641366004614d35565b612f72565b6002546103459073ffffffffffffffffffffffffffffffffffffffff1681565b6102ec60075481565b61032361067d366004614d35565b613430565b610695610690366004614c59565b6135a6565b6040516102f69190614e96565b6103236106b0366004614af0565b6136d9565b6104656106c3366004614c8b565b613809565b60005473ffffffffffffffffffffffffffffffffffffffff16331461074e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6107566124b5565b600354604080519182526020820183905233917feedc6338c9c1ad8f3cd6c90dd09dbe98dbd57e610d3e59a17996d07acb0d9511910160405180910390a2600355565b600481815481106107a957600080fd5b6000918252602090912060089091020180546001820154600283015460038401546004850154600586015460069096015473ffffffffffffffffffffffffffffffffffffffff909516965092949193909261ffff16919087565b60005473ffffffffffffffffffffffffffffffffffffffff163314610884576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610745565b600454869081106108f1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f506f6f6c20646f6573206e6f74206578697374000000000000000000000000006044820152606401610745565b6103e861ffff86161115610961576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f7365743a206465706f7369742066656520746f6f2068696768000000000000006044820152606401610745565b621275008411156109ce576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f7365743a20696e76616c6964206861727665737420696e74657276616c0000006044820152606401610745565b60005b82811015610a7f57610a098484838181106109ee576109ee6150c9565b9050602002016020810190610a039190614af0565b3b151590565b610a6f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f6164643a207265776172646572206d75737420626520636f6e747261637400006044820152606401610745565b610a7881615041565b90506109d1565b50610a886124b5565b8560048881548110610a9c57610a9c6150c9565b906000526020600020906008020160010154600654610abb9190614ffe565b610ac59190614f6e565b6006819055508560048881548110610adf57610adf6150c9565b9060005260206000209060080201600101819055508460048881548110610b0857610b086150c9565b906000526020600020906008020160040160006101000a81548161ffff021916908361ffff1602179055508360048881548110610b4757610b476150c9565b906000526020600020906008020160050181905550828260048981548110610b7157610b716150c9565b90600052602060002090600802016007019190610b8f92919061497b565b508282604051610ba0929190614e2b565b6040805191829003822088835261ffff881660208401529082018690529088907f5ed6f0deef9ab49d02900b40d596df4cd637a2a7fbfa56bbcb377389d3ce8d289060600160405180910390a350505050505050565b60045460009083908110610c66576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f506f6f6c20646f6573206e6f74206578697374000000000000000000000000006044820152606401610745565b600084815260056020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845290915290206007544210801590610cab575080600301544210155b95945050505050565b600c5473ffffffffffffffffffffffffffffffffffffffff163314610d81576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604160248201527f73657420696e766573746f7220616464726573733a206f6e6c7920707265766960448201527f6f757320696e766573746f722063616e2063616c6c2074686973206d6574686f60648201527f6400000000000000000000000000000000000000000000000000000000000000608482015260a401610745565b600c80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff831690811790915560405133907f6260cb34f06b782e83bde168f7d74ab2133041cb53b63ce22b127822a92b679190600090a350565b60026001541415610e5f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610745565b600260015560045482908110610ed1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f506f6f6c20646f6573206e6f74206578697374000000000000000000000000006044820152606401610745565b600060048481548110610ee657610ee66150c9565b600091825260208083208784526005825260408085203386529092529220805460089092029092019250841115610f79576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f77697468647261773a207573657220616d6f756e74206e6f7420656e6f7567686044820152606401610745565b8382600601541015610fe7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f77697468647261773a20706f6f6c20746f74616c206e6f7420656e6f756768006044820152606401610745565b610ff085611daa565b610ff985613eda565b831561107857838160000160008282546110139190614ffe565b9091555050600254825473ffffffffffffffffffffffffffffffffffffffff9081169116141561105557836009600082825461104f9190614ffe565b90915550505b81546110789073ffffffffffffffffffffffffffffffffffffffff16338661406e565b6003820154815464e8d4a510009161108f91614fc1565b6110999190614f86565b600182015560005b6007830154811015611170578260070181815481106110c2576110c26150c9565b60009182526020909120015482546040517ffe8343fb00000000000000000000000000000000000000000000000000000000815260048101899052336024820152604481019190915273ffffffffffffffffffffffffffffffffffffffff9091169063fe8343fb90606401600060405180830381600087803b15801561114757600080fd5b505af115801561115b573d6000803e3d6000fd5b505050508061116990615041565b90506110a1565b508315611191578382600601600082825461118b9190614ffe565b90915550505b604051848152859033907ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568906020015b60405180910390a3505060018055505050565b606080606080846004805490508110611249576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f506f6f6c20646f6573206e6f74206578697374000000000000000000000000006044820152606401610745565b60006004878154811061125e5761125e6150c9565b90600052602060002090600802019050806007018054905060016112829190614f6e565b67ffffffffffffffff81111561129a5761129a6150f8565b6040519080825280602002602001820160405280156112c3578160200160208202803683370190505b5060078201549096506112d7906001614f6e565b67ffffffffffffffff8111156112ef576112ef6150f8565b60405190808252806020026020018201604052801561132257816020015b606081526020019060019003908161130d5790505b506007820154909550611336906001614f6e565b67ffffffffffffffff81111561134e5761134e6150f8565b604051908082528060200260200182016040528015611377578160200160208202803683370190505b50600782015490945061138b906001614f6e565b67ffffffffffffffff8111156113a3576113a36150f8565b6040519080825280602002602001820160405280156113cc578160200160208202803683370190505b50600254875191945073ffffffffffffffffffffffffffffffffffffffff169087906000906113fd576113fd6150c9565b73ffffffffffffffffffffffffffffffffffffffff928316602091820292909201015260025461142d91166141de565b85600081518110611440576114406150c9565b602090810291909101015260025461146d9073ffffffffffffffffffffffffffffffffffffffff166142f6565b60ff1684600081518110611483576114836150c9565b60200260200101818152505060035460065482600101546114a49190614f86565b6114ae9190614fc1565b836000815181106114c1576114c16150c9565b60200260200101818152505060005b60078201548110156118eb578160070181815481106114f1576114f16150c9565b60009182526020918290200154604080517ff7c618c1000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff9092169263f7c618c192600480840193829003018186803b15801561156057600080fd5b505afa158015611574573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115989190614b71565b876115a4836001614f6e565b815181106115b4576115b46150c9565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506116c8826007018281548110611606576116066150c9565b60009182526020918290200154604080517ff7c618c1000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff9092169263f7c618c192600480840193829003018186803b15801561167557600080fd5b505afa158015611689573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ad9190614b71565b73ffffffffffffffffffffffffffffffffffffffff166141de565b866116d4836001614f6e565b815181106116e4576116e46150c9565b60200260200101819052506117c9826007018281548110611707576117076150c9565b60009182526020918290200154604080517ff7c618c1000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff9092169263f7c618c192600480840193829003018186803b15801561177657600080fd5b505afa15801561178a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ae9190614b71565b73ffffffffffffffffffffffffffffffffffffffff166142f6565b60ff16856117d8836001614f6e565b815181106117e8576117e86150c9565b602002602001018181525050816007018181548110611809576118096150c9565b6000918252602090912001546040517f465e81ec000000000000000000000000000000000000000000000000000000008152600481018a905273ffffffffffffffffffffffffffffffffffffffff9091169063465e81ec9060240160206040518083038186803b15801561187c57600080fd5b505afa158015611890573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b49190614c72565b846118c0836001614f6e565b815181106118d0576118d06150c9565b60209081029190910101526118e481615041565b90506114d0565b5050509193509193565b60005473ffffffffffffffffffffffffffffffffffffffff163314611976576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610745565b6103e861ffff851611156119e6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f6164643a206465706f7369742066656520746f6f2068696768000000000000006044820152606401610745565b62127500831115611a53576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f6164643a20696e76616c6964206861727665737420696e74657276616c0000006044820152606401610745565b843b611ae1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f6164643a204c5020746f6b656e206d75737420626520612076616c696420636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610745565b60005b81811015611b7757611b018383838181106109ee576109ee6150c9565b611b67576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f6164643a207265776172646572206d75737420626520636f6e747261637400006044820152606401610745565b611b7081615041565b9050611ae4565b50611b806124b5565b60006007544211611b9357600754611b95565b425b905086600654611ba59190614f6e565b60068190555060046040518061010001604052808873ffffffffffffffffffffffffffffffffffffffff168152602001898152602001838152602001600081526020018761ffff168152602001868152602001600081526020018585808060200260200160405190810160405280939291908181526020018383602002808284376000920182905250939094525050835460018082018655948252602091829020845160089092020180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9092169190911781558382015194810194909455604083015160028501556060830151600385015560808301516004850180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff90921691909117905560a0830151600585015560c0830151600685015560e08301518051939493611d1a935060078501929190910190614a03565b5050508282604051611d2d929190614e2b565b60405190819003902060045473ffffffffffffffffffffffffffffffffffffffff881690611d5d90600190614ffe565b604080518b815261ffff8a1660208201529081018890527f5ed295c4f5af5aeb1ccd905e1cd55a86ab3bb9fc1fe2346ff64ac47dbef366619060600160405180910390a450505050505050565b60045481908110611e17576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f506f6f6c20646f6573206e6f74206578697374000000000000000000000000006044820152606401610745565b600060048381548110611e2c57611e2c6150c9565b9060005260206000209060080201905080600201544211611e4c57505050565b6006810154801580611e6057506001820154155b15611e715750426002909101555050565b6000826002015442611e839190614ffe565b90506000600654846001015460035484611e9d9190614fc1565b611ea79190614fc1565b611eb19190614f86565b90506000600f54600e54600d546103e8611ecb9190614ffe565b611ed59190614ffe565b611edf9190614ffe565b600254600a54600d5492935073ffffffffffffffffffffffffffffffffffffffff918216926340c10f1992909116906103e890611f1c9087614fc1565b611f269190614f86565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401600060405180830381600087803b158015611f9157600080fd5b505af1158015611fa5573d6000803e3d6000fd5b5050600254600b54600e5473ffffffffffffffffffffffffffffffffffffffff92831694506340c10f1993509116906103e890611fe29087614fc1565b611fec9190614f86565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401600060405180830381600087803b15801561205757600080fd5b505af115801561206b573d6000803e3d6000fd5b5050600254600c54600f5473ffffffffffffffffffffffffffffffffffffffff92831694506340c10f1993509116906103e8906120a89087614fc1565b6120b29190614f86565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401600060405180830381600087803b15801561211d57600080fd5b505af1158015612131573d6000803e3d6000fd5b505060025473ffffffffffffffffffffffffffffffffffffffff1691506340c10f199050306103e86121638587614fc1565b61216d9190614f86565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401600060405180830381600087803b1580156121d857600080fd5b505af11580156121ec573d6000803e3d6000fd5b505050506103e88186600601548464e8d4a5100061220a9190614fc1565b6122149190614f86565b61221e9190614fc1565b6122289190614f86565b85600301600082825461223b9190614f6e565b909155505042600286018190556003860154604080519283526020830187905282015287907f3be3541fc42237d611b30329040bfa4569541d156560acdbbae57640d20b8f469060600160405180910390a250505050505b5050565b60026001541415612304576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610745565b6002600181905550600060048281548110612321576123216150c9565b600091825260208083208584526005825260408085203386529092529220805460089290920290920160068101549093508111156123e1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f656d657267656e63792077697468647261773a20706f6f6c20746f74616c206e60448201527f6f7420656e6f75676800000000000000000000000000000000000000000000006064820152608401610745565b600080835560018301819055600283018190556003830181905560068401805483929061240f908490614ffe565b9091555050600254835473ffffffffffffffffffffffffffffffffffffffff9081169116141561245157806009600082825461244b9190614ffe565b90915550505b82546124749073ffffffffffffffffffffffffffffffffffffffff16338361406e565b604051818152849033907fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05959060200160405180910390a35050600180555050565b60045460005b81811015612293576124cc81611daa565b6124d581615041565b90506124bb565b6000600482815481106124f1576124f16150c9565b9060005260206000209060080201600601549050919050565b600a5473ffffffffffffffffffffffffffffffffffffffff1633146125d7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604160248201527f736574207465616d20616464726573733a206f6e6c792070726576696f75732060448201527f7465616d20616464726573732063616e2063616c6c2074686973206d6574686f60648201527f6400000000000000000000000000000000000000000000000000000000000000608482015260a401610745565b600a80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff831690811790915560405133907f42fbc17d847fdc3e5c82da842a5ef3979c64f3b94cd4e7382310fd5525c6ee0f90600090a350565b60005473ffffffffffffffffffffffffffffffffffffffff1633146126c9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610745565b6126d360006143e9565b565b60005473ffffffffffffffffffffffffffffffffffffffff163314612756576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610745565b6103e88111156127e8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f73657420696e766573746f722070657263656e743a20696e76616c696420706560448201527f7263656e742076616c75650000000000000000000000000000000000000000006064820152608401610745565b6103e8600e5482600d546127fc9190614f6e565b6128069190614f6e565b1115612894576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f73657420696e766573746f722070657263656e743a20746f74616c207065726360448201527f656e74206f766572206d617800000000000000000000000000000000000000006064820152608401610745565b600f5460408051918252602082018390527f204a076f4a2e4e5e646bb8841cc285306bf747e277f40dbfd5750e782e17b7a6910160405180910390a1600f55565b60005473ffffffffffffffffffffffffffffffffffffffff163314612956576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610745565b6103e88111156129e8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f7365742074726561737572792070657263656e743a20696e76616c696420706560448201527f7263656e742076616c75650000000000000000000000000000000000000000006064820152608401610745565b6103e8600f5482600d546129fc9190614f6e565b612a069190614f6e565b1115612a94576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f7365742074726561737572792070657263656e743a20746f74616c207065726360448201527f656e74206f766572206d617800000000000000000000000000000000000000006064820152608401610745565b600e5460408051918252602082018390527f204a076f4a2e4e5e646bb8841cc285306bf747e277f40dbfd5750e782e17b7a6910160405180910390a1600e55565b60005473ffffffffffffffffffffffffffffffffffffffff163314612b56576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610745565b6103e8811115612be8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f736574207465616d2070657263656e743a20696e76616c69642070657263656e60448201527f742076616c7565000000000000000000000000000000000000000000000000006064820152608401610745565b6103e8600f5482600e54612bfc9190614f6e565b612c069190614f6e565b1115612c94576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f736574207465616d2070657263656e743a20746f74616c2070657263656e742060448201527f6f766572206d61780000000000000000000000000000000000000000000000006064820152608401610745565b600d5460408051918252602082018390527f204a076f4a2e4e5e646bb8841cc285306bf747e277f40dbfd5750e782e17b7a6910160405180910390a1600d55565b600b5473ffffffffffffffffffffffffffffffffffffffff163314612d56576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f73657420747265617375727920616464726573733a207775743f0000000000006044820152606401610745565b600b80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff831690811790915560405133907f61885cdba916be748ff3e3f6f15e4206153b8ea3b7acabade9d04b4063a8351090600090a350565b60005473ffffffffffffffffffffffffffffffffffffffff163314612e48576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610745565b6007544210612ed9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f7374617274206661726d696e673a206661726d207374617274656420616c726560448201527f61647900000000000000000000000000000000000000000000000000000000006064820152608401610745565b60045460005b81811015612f2757600060048281548110612efc57612efc6150c9565b906000526020600020906008020190504281600201819055505080612f2090615041565b9050612edf565b505042600755565b60005b81811015612f6d57612f5d838383818110612f4f57612f4f6150c9565b905060200201356000612f72565b612f6681615041565b9050612f32565b505050565b60026001541415612fdf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610745565b600260015560045482908110613051576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f506f6f6c20646f6573206e6f74206578697374000000000000000000000000006044820152606401610745565b600060048481548110613066576130666150c9565b6000918252602080832087845260058252604080852033865290925292206008909102909101915061309785611daa565b6130a085613eda565b83156132e35781546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b15801561310f57600080fd5b505afa158015613123573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131479190614c72565b835490915061316e9073ffffffffffffffffffffffffffffffffffffffff1633308861445e565b82546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b1580156131d757600080fd5b505afa1580156131eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061320f9190614c72565b905061321b8282614ffe565b600485015490965061ffff161561328a576004840154600090612710906132469061ffff1689614fc1565b6132509190614f86565b600b54865491925061327c9173ffffffffffffffffffffffffffffffffffffffff90811691168361406e565b6132868188614ffe565b9650505b8583600001600082825461329e9190614f6e565b9091555050600254845473ffffffffffffffffffffffffffffffffffffffff908116911614156132e05785600960008282546132da9190614f6e565b90915550505b50505b6003820154815464e8d4a51000916132fa91614fc1565b6133049190614f86565b600182015560005b60078301548110156133db5782600701818154811061332d5761332d6150c9565b60009182526020909120015482546040517ffe8343fb00000000000000000000000000000000000000000000000000000000815260048101899052336024820152604481019190915273ffffffffffffffffffffffffffffffffffffffff9091169063fe8343fb90606401600060405180830381600087803b1580156133b257600080fd5b505af11580156133c6573d6000803e3d6000fd5b50505050806133d490615041565b905061330c565b5083156133fc57838260060160008282546133f69190614f6e565b90915550505b604051848152859033907f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15906020016111c1565b60005473ffffffffffffffffffffffffffffffffffffffff1633146134b1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610745565b6134b96124b5565b3373ffffffffffffffffffffffffffffffffffffffff167f802633c8d26237616d81bdac01bc40fcdf36e098832601582ec19d7e431c5ef360048481548110613504576135046150c9565b9060005260206000209060080201600101548360405161352e929190918252602082015260400190565b60405180910390a2806004838154811061354a5761354a6150c9565b9060005260206000209060080201600101546006546135699190614ffe565b6135739190614f6e565b600681905550806004838154811061358d5761358d6150c9565b9060005260206000209060080201600101819055505050565b60045460609082908110613616576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f506f6f6c20646f6573206e6f74206578697374000000000000000000000000006044820152606401610745565b60006004848154811061362b5761362b6150c9565b9060005260206000209060080201905060005b60078201548110156136d15781600701818154811061365f5761365f6150c9565b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684828151811061369c5761369c6150c9565b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101526136ca81615041565b905061363e565b505050919050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461375a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610745565b73ffffffffffffffffffffffffffffffffffffffff81166137fd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610745565b613806816143e9565b50565b60608060608085600480549050811061387e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f506f6f6c20646f6573206e6f74206578697374000000000000000000000000006044820152606401610745565b600060048881548110613893576138936150c9565b600091825260208083208b845260058252604080852073ffffffffffffffffffffffffffffffffffffffff8d16865290925292206003600890920290920190810154600682015460028301549294509091421180156138f157508015155b156139a85760008460020154426139089190614ffe565b90506000600f54600e54600d546103e86139229190614ffe565b61392c9190614ffe565b6139369190614ffe565b905060006103e8826006548960010154600354876139549190614fc1565b61395e9190614fc1565b6139689190614f86565b6139729190614fc1565b61397c9190614f86565b90508361398e8264e8d4a51000614fc1565b6139989190614f86565b6139a29086614f6e565b94505050505b60008360020154846001015464e8d4a510008587600001546139ca9190614fc1565b6139d49190614f86565b6139de9190614ffe565b6139e89190614f6e565b60078601549091506139fb906001614f6e565b67ffffffffffffffff811115613a1357613a136150f8565b604051908082528060200260200182016040528015613a3c578160200160208202803683370190505b506007860154909a50613a50906001614f6e565b67ffffffffffffffff811115613a6857613a686150f8565b604051908082528060200260200182016040528015613a9b57816020015b6060815260200190600190039081613a865790505b506007860154909950613aaf906001614f6e565b67ffffffffffffffff811115613ac757613ac76150f8565b604051908082528060200260200182016040528015613af0578160200160208202803683370190505b506007860154909750613b04906001614f6e565b67ffffffffffffffff811115613b1c57613b1c6150f8565b604051908082528060200260200182016040528015613b45578160200160208202803683370190505b506002548b5191995073ffffffffffffffffffffffffffffffffffffffff16908b90600090613b7657613b766150c9565b73ffffffffffffffffffffffffffffffffffffffff9283166020918202929092010152600254613ba691166141de565b89600081518110613bb957613bb96150c9565b6020908102919091010152600254613be69073ffffffffffffffffffffffffffffffffffffffff166142f6565b60ff1688600081518110613bfc57613bfc6150c9565b6020026020010181815250508087600081518110613c1c57613c1c6150c9565b60200260200101818152505060005b6007860154811015613eca57856007018181548110613c4c57613c4c6150c9565b60009182526020918290200154604080517ff7c618c1000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff9092169263f7c618c192600480840193829003018186803b158015613cbb57600080fd5b505afa158015613ccf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cf39190614b71565b8b613cff836001614f6e565b81518110613d0f57613d0f6150c9565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050613d61866007018281548110611606576116066150c9565b8a613d6d836001614f6e565b81518110613d7d57613d7d6150c9565b6020026020010181905250613da0866007018281548110611707576117076150c9565b60ff1689613daf836001614f6e565b81518110613dbf57613dbf6150c9565b602002602001018181525050856007018181548110613de057613de06150c9565b6000918252602090912001546040517fffcd4263000000000000000000000000000000000000000000000000000000008152600481018f905273ffffffffffffffffffffffffffffffffffffffff8e811660248301529091169063ffcd42639060440160206040518083038186803b158015613e5b57600080fd5b505afa158015613e6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e939190614c72565b88613e9f836001614f6e565b81518110613eaf57613eaf6150c9565b6020908102919091010152613ec381615041565b9050613c2b565b5050505050505092959194509250565b600060048281548110613eef57613eef6150c9565b600091825260208083208584526005825260408085203386529092529220600381015460089092029092019250158015613f2b57506007544210155b15613f45576005820154613f3f9042614f6e565b60038201555b6000816001015464e8d4a5100084600301548460000154613f669190614fc1565b613f709190614f86565b613f7a9190614ffe565b9050613f868433610bf6565b15613ff8576000811180613f9e575060008260020154115b15613ff357816002015460086000828254613fb99190614ffe565b9091555050600060028301556005830154613fd49042614f6e565b60038301556002820154613ff3903390613fee9084614f6e565b6145d7565b614068565b80156140685780600860008282546140109190614f6e565b925050819055508082600201600082825461402b9190614f6e565b9091555050604051818152849033907fee470483107f579a55c754fa00613c45a9a3b617a418b39cb0be97e5381ba7c19060200160405180910390a35b50505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905291516000928392908716916141059190614e7a565b6000604051808303816000865af19150503d8060008114614142576040519150601f19603f3d011682016040523d82523d6000602084013e614147565b606091505b50915091508180156141715750805115806141715750808060200190518101906141719190614b4f565b6141d7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f426f72696e6745524332303a205472616e73666572206661696c6564000000006044820152606401610745565b5050505050565b60408051600481526024810182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f95d89b41000000000000000000000000000000000000000000000000000000001790529051606091600091829173ffffffffffffffffffffffffffffffffffffffff8616916142609190614e7a565b600060405180830381855afa9150503d806000811461429b576040519150601f19603f3d011682016040523d82523d6000602084013e6142a0565b606091505b5091509150816142e5576040518060400160405280600381526020017f3f3f3f00000000000000000000000000000000000000000000000000000000008152506142ee565b6142ee81614788565b949350505050565b60408051600481526024810182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f313ce5670000000000000000000000000000000000000000000000000000000017905290516000918291829173ffffffffffffffffffffffffffffffffffffffff8616916143779190614e7a565b600060405180830381855afa9150503d80600081146143b2576040519150601f19603f3d011682016040523d82523d6000602084013e6143b7565b606091505b50915091508180156143ca575080516020145b6143d55760126142ee565b808060200190518101906142ee9190614d87565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017905291516000928392908816916144fd9190614e7a565b6000604051808303816000865af19150503d806000811461453a576040519150601f19603f3d011682016040523d82523d6000602084013e61453f565b606091505b50915091508180156145695750805115806145695750808060200190518101906145699190614b4f565b6145cf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f426f72696e6745524332303a205472616e7366657246726f6d206661696c65646044820152606401610745565b505050505050565b6009546002546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a082319060240160206040518083038186803b15801561464357600080fd5b505afa158015614657573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061467b9190614c72565b1115612293576009546002546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000929173ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b1580156146ef57600080fd5b505afa158015614703573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147279190614c72565b6147319190614ffe565b905080821061475e57600254612f6d9073ffffffffffffffffffffffffffffffffffffffff16848361406e565b8115612f6d57600254612f6d9073ffffffffffffffffffffffffffffffffffffffff16848461406e565b606060408251106147ad57818060200190518101906147a79190614b8e565b92915050565b81516020141561493d5760005b60208160ff161080156148075750828160ff16815181106147dd576147dd6150c9565b01602001517fff000000000000000000000000000000000000000000000000000000000000001615155b1561481e57806148168161507a565b9150506147ba565b60008160ff1667ffffffffffffffff81111561483c5761483c6150f8565b6040519080825280601f01601f191660200182016040528015614866576020820181803683370190505b509050600091505b60208260ff161080156148bb5750838260ff1681518110614891576148916150c9565b01602001517fff000000000000000000000000000000000000000000000000000000000000001615155b1561493657838260ff16815181106148d5576148d56150c9565b602001015160f81c60f81b818360ff16815181106148f5576148f56150c9565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508161492e8161507a565b92505061486e565b9392505050565b505060408051808201909152600381527f3f3f3f0000000000000000000000000000000000000000000000000000000000602082015290565b919050565b8280548282559060005260206000209081019282156149f3579160200282015b828111156149f35781547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84351617825560209092019160019091019061499b565b506149ff929150614a7d565b5090565b8280548282559060005260206000209081019282156149f3579160200282015b828111156149f357825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909116178255602090920191600190910190614a23565b5b808211156149ff5760008155600101614a7e565b60008083601f840112614aa457600080fd5b50813567ffffffffffffffff811115614abc57600080fd5b6020830191508360208260051b8501011115614ad757600080fd5b9250929050565b803561ffff8116811461497657600080fd5b600060208284031215614b0257600080fd5b813561493681615127565b60008060208385031215614b2057600080fd5b823567ffffffffffffffff811115614b3757600080fd5b614b4385828601614a92565b90969095509350505050565b600060208284031215614b6157600080fd5b8151801515811461493657600080fd5b600060208284031215614b8357600080fd5b815161493681615127565b600060208284031215614ba057600080fd5b815167ffffffffffffffff80821115614bb857600080fd5b818401915084601f830112614bcc57600080fd5b815181811115614bde57614bde6150f8565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715614c2457614c246150f8565b81604052828152876020848701011115614c3d57600080fd5b614c4e836020830160208801615015565b979650505050505050565b600060208284031215614c6b57600080fd5b5035919050565b600060208284031215614c8457600080fd5b5051919050565b60008060408385031215614c9e57600080fd5b823591506020830135614cb081615127565b809150509250929050565b60008060008060008060a08789031215614cd457600080fd5b863595506020870135614ce681615127565b9450614cf460408801614ade565b935060608701359250608087013567ffffffffffffffff811115614d1757600080fd5b614d2389828a01614a92565b979a9699509497509295939492505050565b60008060408385031215614d4857600080fd5b50508035926020909101359150565b60008060008060008060a08789031215614d7057600080fd5b8635955060208701359450614cf460408801614ade565b600060208284031215614d9957600080fd5b815160ff8116811461493657600080fd5b600081518084526020808501945080840160005b83811015614df057815173ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101614dbe565b509495945050505050565b600081518084526020808501945080840160005b83811015614df057815187529582019590820190600101614e0f565b60008184825b85811015614e6f578135614e4481615127565b73ffffffffffffffffffffffffffffffffffffffff1683526020928301929190910190600101614e31565b509095945050505050565b60008251614e8c818460208701615015565b9190910192915050565b6020815260006149366020830184614daa565b608081526000614ebc6080830187614daa565b6020838203818501528187518084528284019150828160051b850101838a0160005b83811015614f42577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08088850301865282518051808652614f24818a88018b8501615015565b96880196601f01909116939093018601925090850190600101614ede565b50508681036040880152614f56818a614dfb565b9450505050508281036060840152614c4e8185614dfb565b60008219821115614f8157614f8161509a565b500190565b600082614fbc577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614ff957614ff961509a565b500290565b6000828210156150105761501061509a565b500390565b60005b83811015615030578181015183820152602001615018565b838111156140685750506000910152565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156150735761507361509a565b5060010190565b600060ff821660ff8114156150915761509161509a565b60010192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461380657600080fdfea26469706673582212203019de4a38b5b97281cfcc90e756f13f846ba5f30ab050658b19946eb1b2a01464736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102de5760003560e01c8063812c64f111610186578063d761595c116100e3578063e6fa6d6d11610097578063eff8976b11610071578063eff8976b14610682578063f2fde38b146106a2578063ffcd4263146106b557600080fd5b8063e6fa6d6d14610646578063e6fd48bc14610666578063eddf96521461066f57600080fd5b8063de73149d116100c8578063de73149d14610620578063e164ac501461062a578063e2bbb1581461063357600080fd5b8063d761595c14610604578063dc640ac91461060d57600080fd5b8063949e63021161013a578063a7e05b9c1161011f578063a7e05b9c146105c9578063afbcfea1146105dc578063c5f956af146105e457600080fd5b8063949e6302146105ad5780639a26c2fa146105c057600080fd5b806389a2bc251161016b57806389a2bc251461051c5780638da5cb5b1461052f57806393f1a40b1461054d57600080fd5b8063812c64f1146104ed578063876d3c9c1461050957600080fd5b806342602f1e1161023f57806351eb05a6116101f3578063654c9ece116101cd578063654c9ece146104bf5780636690864e146104d2578063715018a6146104e557600080fd5b806351eb05a6146104915780635312ea8e146104a4578063630b5ba1146104b757600080fd5b8063465e81ec11610224578063465e81ec14610452578063474fa63014610475578063508593ab1461047e57600080fd5b806342602f1e1461042c578063441a3e701461043f57600080fd5b80631526fe27116102965780631c75f0851161027b5780631c75f085146103d65780632081ccc4146103f65780632e6c998d1461040957600080fd5b80631526fe271461036a57806317caf6f1146103cd57600080fd5b8063081e3eda116102c7578063081e3eda146103085780630ba84cd21461031057806312e228fd1461032557600080fd5b806304ef9d58146102e35780630735b208146102ff575b600080fd5b6102ec600e5481565b6040519081526020015b60405180910390f35b6102ec600f5481565b6004546102ec565b61032361031e366004614c59565b6106c8565b005b600c546103459073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016102f6565b61037d610378366004614c59565b610799565b6040805173ffffffffffffffffffffffffffffffffffffffff9098168852602088019690965294860193909352606085019190915261ffff16608084015260a083015260c082015260e0016102f6565b6102ec60065481565b600a546103459073ffffffffffffffffffffffffffffffffffffffff1681565b610323610404366004614d57565b610803565b61041c610417366004614c8b565b610bf6565b60405190151581526020016102f6565b61032361043a366004614af0565b610cb4565b61032361044d366004614d35565b610df2565b610465610460366004614c59565b6111d4565b6040516102f69493929190614ea9565b6102ec60085481565b61032361048c366004614cbb565b6118f5565b61032361049f366004614c59565b611daa565b6103236104b2366004614c59565b612297565b6103236124b5565b6102ec6104cd366004614c59565b6124dc565b6103236104e0366004614af0565b61250a565b610323612648565b6104f66103e881565b60405161ffff90911681526020016102f6565b610323610517366004614c59565b6126d5565b61032361052a366004614c59565b6128d5565b60005473ffffffffffffffffffffffffffffffffffffffff16610345565b61058d61055b366004614c8b565b600560209081526000928352604080842090915290825290208054600182015460028301546003909301549192909184565b6040805194855260208501939093529183015260608201526080016102f6565b6103236105bb366004614c59565b612ad5565b6102ec60035481565b6103236105d7366004614af0565b612cd5565b610323612dc7565b600b546103459073ffffffffffffffffffffffffffffffffffffffff1681565b6102ec60095481565b61032361061b366004614b0d565b612f2f565b6102ec6212750081565b6102ec600d5481565b610323610641366004614d35565b612f72565b6002546103459073ffffffffffffffffffffffffffffffffffffffff1681565b6102ec60075481565b61032361067d366004614d35565b613430565b610695610690366004614c59565b6135a6565b6040516102f69190614e96565b6103236106b0366004614af0565b6136d9565b6104656106c3366004614c8b565b613809565b60005473ffffffffffffffffffffffffffffffffffffffff16331461074e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6107566124b5565b600354604080519182526020820183905233917feedc6338c9c1ad8f3cd6c90dd09dbe98dbd57e610d3e59a17996d07acb0d9511910160405180910390a2600355565b600481815481106107a957600080fd5b6000918252602090912060089091020180546001820154600283015460038401546004850154600586015460069096015473ffffffffffffffffffffffffffffffffffffffff909516965092949193909261ffff16919087565b60005473ffffffffffffffffffffffffffffffffffffffff163314610884576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610745565b600454869081106108f1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f506f6f6c20646f6573206e6f74206578697374000000000000000000000000006044820152606401610745565b6103e861ffff86161115610961576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f7365743a206465706f7369742066656520746f6f2068696768000000000000006044820152606401610745565b621275008411156109ce576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f7365743a20696e76616c6964206861727665737420696e74657276616c0000006044820152606401610745565b60005b82811015610a7f57610a098484838181106109ee576109ee6150c9565b9050602002016020810190610a039190614af0565b3b151590565b610a6f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f6164643a207265776172646572206d75737420626520636f6e747261637400006044820152606401610745565b610a7881615041565b90506109d1565b50610a886124b5565b8560048881548110610a9c57610a9c6150c9565b906000526020600020906008020160010154600654610abb9190614ffe565b610ac59190614f6e565b6006819055508560048881548110610adf57610adf6150c9565b9060005260206000209060080201600101819055508460048881548110610b0857610b086150c9565b906000526020600020906008020160040160006101000a81548161ffff021916908361ffff1602179055508360048881548110610b4757610b476150c9565b906000526020600020906008020160050181905550828260048981548110610b7157610b716150c9565b90600052602060002090600802016007019190610b8f92919061497b565b508282604051610ba0929190614e2b565b6040805191829003822088835261ffff881660208401529082018690529088907f5ed6f0deef9ab49d02900b40d596df4cd637a2a7fbfa56bbcb377389d3ce8d289060600160405180910390a350505050505050565b60045460009083908110610c66576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f506f6f6c20646f6573206e6f74206578697374000000000000000000000000006044820152606401610745565b600084815260056020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845290915290206007544210801590610cab575080600301544210155b95945050505050565b600c5473ffffffffffffffffffffffffffffffffffffffff163314610d81576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604160248201527f73657420696e766573746f7220616464726573733a206f6e6c7920707265766960448201527f6f757320696e766573746f722063616e2063616c6c2074686973206d6574686f60648201527f6400000000000000000000000000000000000000000000000000000000000000608482015260a401610745565b600c80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff831690811790915560405133907f6260cb34f06b782e83bde168f7d74ab2133041cb53b63ce22b127822a92b679190600090a350565b60026001541415610e5f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610745565b600260015560045482908110610ed1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f506f6f6c20646f6573206e6f74206578697374000000000000000000000000006044820152606401610745565b600060048481548110610ee657610ee66150c9565b600091825260208083208784526005825260408085203386529092529220805460089092029092019250841115610f79576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f77697468647261773a207573657220616d6f756e74206e6f7420656e6f7567686044820152606401610745565b8382600601541015610fe7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f77697468647261773a20706f6f6c20746f74616c206e6f7420656e6f756768006044820152606401610745565b610ff085611daa565b610ff985613eda565b831561107857838160000160008282546110139190614ffe565b9091555050600254825473ffffffffffffffffffffffffffffffffffffffff9081169116141561105557836009600082825461104f9190614ffe565b90915550505b81546110789073ffffffffffffffffffffffffffffffffffffffff16338661406e565b6003820154815464e8d4a510009161108f91614fc1565b6110999190614f86565b600182015560005b6007830154811015611170578260070181815481106110c2576110c26150c9565b60009182526020909120015482546040517ffe8343fb00000000000000000000000000000000000000000000000000000000815260048101899052336024820152604481019190915273ffffffffffffffffffffffffffffffffffffffff9091169063fe8343fb90606401600060405180830381600087803b15801561114757600080fd5b505af115801561115b573d6000803e3d6000fd5b505050508061116990615041565b90506110a1565b508315611191578382600601600082825461118b9190614ffe565b90915550505b604051848152859033907ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568906020015b60405180910390a3505060018055505050565b606080606080846004805490508110611249576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f506f6f6c20646f6573206e6f74206578697374000000000000000000000000006044820152606401610745565b60006004878154811061125e5761125e6150c9565b90600052602060002090600802019050806007018054905060016112829190614f6e565b67ffffffffffffffff81111561129a5761129a6150f8565b6040519080825280602002602001820160405280156112c3578160200160208202803683370190505b5060078201549096506112d7906001614f6e565b67ffffffffffffffff8111156112ef576112ef6150f8565b60405190808252806020026020018201604052801561132257816020015b606081526020019060019003908161130d5790505b506007820154909550611336906001614f6e565b67ffffffffffffffff81111561134e5761134e6150f8565b604051908082528060200260200182016040528015611377578160200160208202803683370190505b50600782015490945061138b906001614f6e565b67ffffffffffffffff8111156113a3576113a36150f8565b6040519080825280602002602001820160405280156113cc578160200160208202803683370190505b50600254875191945073ffffffffffffffffffffffffffffffffffffffff169087906000906113fd576113fd6150c9565b73ffffffffffffffffffffffffffffffffffffffff928316602091820292909201015260025461142d91166141de565b85600081518110611440576114406150c9565b602090810291909101015260025461146d9073ffffffffffffffffffffffffffffffffffffffff166142f6565b60ff1684600081518110611483576114836150c9565b60200260200101818152505060035460065482600101546114a49190614f86565b6114ae9190614fc1565b836000815181106114c1576114c16150c9565b60200260200101818152505060005b60078201548110156118eb578160070181815481106114f1576114f16150c9565b60009182526020918290200154604080517ff7c618c1000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff9092169263f7c618c192600480840193829003018186803b15801561156057600080fd5b505afa158015611574573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115989190614b71565b876115a4836001614f6e565b815181106115b4576115b46150c9565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506116c8826007018281548110611606576116066150c9565b60009182526020918290200154604080517ff7c618c1000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff9092169263f7c618c192600480840193829003018186803b15801561167557600080fd5b505afa158015611689573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ad9190614b71565b73ffffffffffffffffffffffffffffffffffffffff166141de565b866116d4836001614f6e565b815181106116e4576116e46150c9565b60200260200101819052506117c9826007018281548110611707576117076150c9565b60009182526020918290200154604080517ff7c618c1000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff9092169263f7c618c192600480840193829003018186803b15801561177657600080fd5b505afa15801561178a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ae9190614b71565b73ffffffffffffffffffffffffffffffffffffffff166142f6565b60ff16856117d8836001614f6e565b815181106117e8576117e86150c9565b602002602001018181525050816007018181548110611809576118096150c9565b6000918252602090912001546040517f465e81ec000000000000000000000000000000000000000000000000000000008152600481018a905273ffffffffffffffffffffffffffffffffffffffff9091169063465e81ec9060240160206040518083038186803b15801561187c57600080fd5b505afa158015611890573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b49190614c72565b846118c0836001614f6e565b815181106118d0576118d06150c9565b60209081029190910101526118e481615041565b90506114d0565b5050509193509193565b60005473ffffffffffffffffffffffffffffffffffffffff163314611976576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610745565b6103e861ffff851611156119e6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f6164643a206465706f7369742066656520746f6f2068696768000000000000006044820152606401610745565b62127500831115611a53576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f6164643a20696e76616c6964206861727665737420696e74657276616c0000006044820152606401610745565b843b611ae1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f6164643a204c5020746f6b656e206d75737420626520612076616c696420636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610745565b60005b81811015611b7757611b018383838181106109ee576109ee6150c9565b611b67576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f6164643a207265776172646572206d75737420626520636f6e747261637400006044820152606401610745565b611b7081615041565b9050611ae4565b50611b806124b5565b60006007544211611b9357600754611b95565b425b905086600654611ba59190614f6e565b60068190555060046040518061010001604052808873ffffffffffffffffffffffffffffffffffffffff168152602001898152602001838152602001600081526020018761ffff168152602001868152602001600081526020018585808060200260200160405190810160405280939291908181526020018383602002808284376000920182905250939094525050835460018082018655948252602091829020845160089092020180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9092169190911781558382015194810194909455604083015160028501556060830151600385015560808301516004850180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff90921691909117905560a0830151600585015560c0830151600685015560e08301518051939493611d1a935060078501929190910190614a03565b5050508282604051611d2d929190614e2b565b60405190819003902060045473ffffffffffffffffffffffffffffffffffffffff881690611d5d90600190614ffe565b604080518b815261ffff8a1660208201529081018890527f5ed295c4f5af5aeb1ccd905e1cd55a86ab3bb9fc1fe2346ff64ac47dbef366619060600160405180910390a450505050505050565b60045481908110611e17576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f506f6f6c20646f6573206e6f74206578697374000000000000000000000000006044820152606401610745565b600060048381548110611e2c57611e2c6150c9565b9060005260206000209060080201905080600201544211611e4c57505050565b6006810154801580611e6057506001820154155b15611e715750426002909101555050565b6000826002015442611e839190614ffe565b90506000600654846001015460035484611e9d9190614fc1565b611ea79190614fc1565b611eb19190614f86565b90506000600f54600e54600d546103e8611ecb9190614ffe565b611ed59190614ffe565b611edf9190614ffe565b600254600a54600d5492935073ffffffffffffffffffffffffffffffffffffffff918216926340c10f1992909116906103e890611f1c9087614fc1565b611f269190614f86565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401600060405180830381600087803b158015611f9157600080fd5b505af1158015611fa5573d6000803e3d6000fd5b5050600254600b54600e5473ffffffffffffffffffffffffffffffffffffffff92831694506340c10f1993509116906103e890611fe29087614fc1565b611fec9190614f86565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401600060405180830381600087803b15801561205757600080fd5b505af115801561206b573d6000803e3d6000fd5b5050600254600c54600f5473ffffffffffffffffffffffffffffffffffffffff92831694506340c10f1993509116906103e8906120a89087614fc1565b6120b29190614f86565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401600060405180830381600087803b15801561211d57600080fd5b505af1158015612131573d6000803e3d6000fd5b505060025473ffffffffffffffffffffffffffffffffffffffff1691506340c10f199050306103e86121638587614fc1565b61216d9190614f86565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401600060405180830381600087803b1580156121d857600080fd5b505af11580156121ec573d6000803e3d6000fd5b505050506103e88186600601548464e8d4a5100061220a9190614fc1565b6122149190614f86565b61221e9190614fc1565b6122289190614f86565b85600301600082825461223b9190614f6e565b909155505042600286018190556003860154604080519283526020830187905282015287907f3be3541fc42237d611b30329040bfa4569541d156560acdbbae57640d20b8f469060600160405180910390a250505050505b5050565b60026001541415612304576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610745565b6002600181905550600060048281548110612321576123216150c9565b600091825260208083208584526005825260408085203386529092529220805460089290920290920160068101549093508111156123e1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f656d657267656e63792077697468647261773a20706f6f6c20746f74616c206e60448201527f6f7420656e6f75676800000000000000000000000000000000000000000000006064820152608401610745565b600080835560018301819055600283018190556003830181905560068401805483929061240f908490614ffe565b9091555050600254835473ffffffffffffffffffffffffffffffffffffffff9081169116141561245157806009600082825461244b9190614ffe565b90915550505b82546124749073ffffffffffffffffffffffffffffffffffffffff16338361406e565b604051818152849033907fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05959060200160405180910390a35050600180555050565b60045460005b81811015612293576124cc81611daa565b6124d581615041565b90506124bb565b6000600482815481106124f1576124f16150c9565b9060005260206000209060080201600601549050919050565b600a5473ffffffffffffffffffffffffffffffffffffffff1633146125d7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604160248201527f736574207465616d20616464726573733a206f6e6c792070726576696f75732060448201527f7465616d20616464726573732063616e2063616c6c2074686973206d6574686f60648201527f6400000000000000000000000000000000000000000000000000000000000000608482015260a401610745565b600a80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff831690811790915560405133907f42fbc17d847fdc3e5c82da842a5ef3979c64f3b94cd4e7382310fd5525c6ee0f90600090a350565b60005473ffffffffffffffffffffffffffffffffffffffff1633146126c9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610745565b6126d360006143e9565b565b60005473ffffffffffffffffffffffffffffffffffffffff163314612756576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610745565b6103e88111156127e8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f73657420696e766573746f722070657263656e743a20696e76616c696420706560448201527f7263656e742076616c75650000000000000000000000000000000000000000006064820152608401610745565b6103e8600e5482600d546127fc9190614f6e565b6128069190614f6e565b1115612894576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f73657420696e766573746f722070657263656e743a20746f74616c207065726360448201527f656e74206f766572206d617800000000000000000000000000000000000000006064820152608401610745565b600f5460408051918252602082018390527f204a076f4a2e4e5e646bb8841cc285306bf747e277f40dbfd5750e782e17b7a6910160405180910390a1600f55565b60005473ffffffffffffffffffffffffffffffffffffffff163314612956576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610745565b6103e88111156129e8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f7365742074726561737572792070657263656e743a20696e76616c696420706560448201527f7263656e742076616c75650000000000000000000000000000000000000000006064820152608401610745565b6103e8600f5482600d546129fc9190614f6e565b612a069190614f6e565b1115612a94576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f7365742074726561737572792070657263656e743a20746f74616c207065726360448201527f656e74206f766572206d617800000000000000000000000000000000000000006064820152608401610745565b600e5460408051918252602082018390527f204a076f4a2e4e5e646bb8841cc285306bf747e277f40dbfd5750e782e17b7a6910160405180910390a1600e55565b60005473ffffffffffffffffffffffffffffffffffffffff163314612b56576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610745565b6103e8811115612be8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f736574207465616d2070657263656e743a20696e76616c69642070657263656e60448201527f742076616c7565000000000000000000000000000000000000000000000000006064820152608401610745565b6103e8600f5482600e54612bfc9190614f6e565b612c069190614f6e565b1115612c94576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f736574207465616d2070657263656e743a20746f74616c2070657263656e742060448201527f6f766572206d61780000000000000000000000000000000000000000000000006064820152608401610745565b600d5460408051918252602082018390527f204a076f4a2e4e5e646bb8841cc285306bf747e277f40dbfd5750e782e17b7a6910160405180910390a1600d55565b600b5473ffffffffffffffffffffffffffffffffffffffff163314612d56576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f73657420747265617375727920616464726573733a207775743f0000000000006044820152606401610745565b600b80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff831690811790915560405133907f61885cdba916be748ff3e3f6f15e4206153b8ea3b7acabade9d04b4063a8351090600090a350565b60005473ffffffffffffffffffffffffffffffffffffffff163314612e48576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610745565b6007544210612ed9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f7374617274206661726d696e673a206661726d207374617274656420616c726560448201527f61647900000000000000000000000000000000000000000000000000000000006064820152608401610745565b60045460005b81811015612f2757600060048281548110612efc57612efc6150c9565b906000526020600020906008020190504281600201819055505080612f2090615041565b9050612edf565b505042600755565b60005b81811015612f6d57612f5d838383818110612f4f57612f4f6150c9565b905060200201356000612f72565b612f6681615041565b9050612f32565b505050565b60026001541415612fdf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610745565b600260015560045482908110613051576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f506f6f6c20646f6573206e6f74206578697374000000000000000000000000006044820152606401610745565b600060048481548110613066576130666150c9565b6000918252602080832087845260058252604080852033865290925292206008909102909101915061309785611daa565b6130a085613eda565b83156132e35781546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b15801561310f57600080fd5b505afa158015613123573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131479190614c72565b835490915061316e9073ffffffffffffffffffffffffffffffffffffffff1633308861445e565b82546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b1580156131d757600080fd5b505afa1580156131eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061320f9190614c72565b905061321b8282614ffe565b600485015490965061ffff161561328a576004840154600090612710906132469061ffff1689614fc1565b6132509190614f86565b600b54865491925061327c9173ffffffffffffffffffffffffffffffffffffffff90811691168361406e565b6132868188614ffe565b9650505b8583600001600082825461329e9190614f6e565b9091555050600254845473ffffffffffffffffffffffffffffffffffffffff908116911614156132e05785600960008282546132da9190614f6e565b90915550505b50505b6003820154815464e8d4a51000916132fa91614fc1565b6133049190614f86565b600182015560005b60078301548110156133db5782600701818154811061332d5761332d6150c9565b60009182526020909120015482546040517ffe8343fb00000000000000000000000000000000000000000000000000000000815260048101899052336024820152604481019190915273ffffffffffffffffffffffffffffffffffffffff9091169063fe8343fb90606401600060405180830381600087803b1580156133b257600080fd5b505af11580156133c6573d6000803e3d6000fd5b50505050806133d490615041565b905061330c565b5083156133fc57838260060160008282546133f69190614f6e565b90915550505b604051848152859033907f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15906020016111c1565b60005473ffffffffffffffffffffffffffffffffffffffff1633146134b1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610745565b6134b96124b5565b3373ffffffffffffffffffffffffffffffffffffffff167f802633c8d26237616d81bdac01bc40fcdf36e098832601582ec19d7e431c5ef360048481548110613504576135046150c9565b9060005260206000209060080201600101548360405161352e929190918252602082015260400190565b60405180910390a2806004838154811061354a5761354a6150c9565b9060005260206000209060080201600101546006546135699190614ffe565b6135739190614f6e565b600681905550806004838154811061358d5761358d6150c9565b9060005260206000209060080201600101819055505050565b60045460609082908110613616576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f506f6f6c20646f6573206e6f74206578697374000000000000000000000000006044820152606401610745565b60006004848154811061362b5761362b6150c9565b9060005260206000209060080201905060005b60078201548110156136d15781600701818154811061365f5761365f6150c9565b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684828151811061369c5761369c6150c9565b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101526136ca81615041565b905061363e565b505050919050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461375a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610745565b73ffffffffffffffffffffffffffffffffffffffff81166137fd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610745565b613806816143e9565b50565b60608060608085600480549050811061387e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f506f6f6c20646f6573206e6f74206578697374000000000000000000000000006044820152606401610745565b600060048881548110613893576138936150c9565b600091825260208083208b845260058252604080852073ffffffffffffffffffffffffffffffffffffffff8d16865290925292206003600890920290920190810154600682015460028301549294509091421180156138f157508015155b156139a85760008460020154426139089190614ffe565b90506000600f54600e54600d546103e86139229190614ffe565b61392c9190614ffe565b6139369190614ffe565b905060006103e8826006548960010154600354876139549190614fc1565b61395e9190614fc1565b6139689190614f86565b6139729190614fc1565b61397c9190614f86565b90508361398e8264e8d4a51000614fc1565b6139989190614f86565b6139a29086614f6e565b94505050505b60008360020154846001015464e8d4a510008587600001546139ca9190614fc1565b6139d49190614f86565b6139de9190614ffe565b6139e89190614f6e565b60078601549091506139fb906001614f6e565b67ffffffffffffffff811115613a1357613a136150f8565b604051908082528060200260200182016040528015613a3c578160200160208202803683370190505b506007860154909a50613a50906001614f6e565b67ffffffffffffffff811115613a6857613a686150f8565b604051908082528060200260200182016040528015613a9b57816020015b6060815260200190600190039081613a865790505b506007860154909950613aaf906001614f6e565b67ffffffffffffffff811115613ac757613ac76150f8565b604051908082528060200260200182016040528015613af0578160200160208202803683370190505b506007860154909750613b04906001614f6e565b67ffffffffffffffff811115613b1c57613b1c6150f8565b604051908082528060200260200182016040528015613b45578160200160208202803683370190505b506002548b5191995073ffffffffffffffffffffffffffffffffffffffff16908b90600090613b7657613b766150c9565b73ffffffffffffffffffffffffffffffffffffffff9283166020918202929092010152600254613ba691166141de565b89600081518110613bb957613bb96150c9565b6020908102919091010152600254613be69073ffffffffffffffffffffffffffffffffffffffff166142f6565b60ff1688600081518110613bfc57613bfc6150c9565b6020026020010181815250508087600081518110613c1c57613c1c6150c9565b60200260200101818152505060005b6007860154811015613eca57856007018181548110613c4c57613c4c6150c9565b60009182526020918290200154604080517ff7c618c1000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff9092169263f7c618c192600480840193829003018186803b158015613cbb57600080fd5b505afa158015613ccf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cf39190614b71565b8b613cff836001614f6e565b81518110613d0f57613d0f6150c9565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050613d61866007018281548110611606576116066150c9565b8a613d6d836001614f6e565b81518110613d7d57613d7d6150c9565b6020026020010181905250613da0866007018281548110611707576117076150c9565b60ff1689613daf836001614f6e565b81518110613dbf57613dbf6150c9565b602002602001018181525050856007018181548110613de057613de06150c9565b6000918252602090912001546040517fffcd4263000000000000000000000000000000000000000000000000000000008152600481018f905273ffffffffffffffffffffffffffffffffffffffff8e811660248301529091169063ffcd42639060440160206040518083038186803b158015613e5b57600080fd5b505afa158015613e6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e939190614c72565b88613e9f836001614f6e565b81518110613eaf57613eaf6150c9565b6020908102919091010152613ec381615041565b9050613c2b565b5050505050505092959194509250565b600060048281548110613eef57613eef6150c9565b600091825260208083208584526005825260408085203386529092529220600381015460089092029092019250158015613f2b57506007544210155b15613f45576005820154613f3f9042614f6e565b60038201555b6000816001015464e8d4a5100084600301548460000154613f669190614fc1565b613f709190614f86565b613f7a9190614ffe565b9050613f868433610bf6565b15613ff8576000811180613f9e575060008260020154115b15613ff357816002015460086000828254613fb99190614ffe565b9091555050600060028301556005830154613fd49042614f6e565b60038301556002820154613ff3903390613fee9084614f6e565b6145d7565b614068565b80156140685780600860008282546140109190614f6e565b925050819055508082600201600082825461402b9190614f6e565b9091555050604051818152849033907fee470483107f579a55c754fa00613c45a9a3b617a418b39cb0be97e5381ba7c19060200160405180910390a35b50505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905291516000928392908716916141059190614e7a565b6000604051808303816000865af19150503d8060008114614142576040519150601f19603f3d011682016040523d82523d6000602084013e614147565b606091505b50915091508180156141715750805115806141715750808060200190518101906141719190614b4f565b6141d7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f426f72696e6745524332303a205472616e73666572206661696c6564000000006044820152606401610745565b5050505050565b60408051600481526024810182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f95d89b41000000000000000000000000000000000000000000000000000000001790529051606091600091829173ffffffffffffffffffffffffffffffffffffffff8616916142609190614e7a565b600060405180830381855afa9150503d806000811461429b576040519150601f19603f3d011682016040523d82523d6000602084013e6142a0565b606091505b5091509150816142e5576040518060400160405280600381526020017f3f3f3f00000000000000000000000000000000000000000000000000000000008152506142ee565b6142ee81614788565b949350505050565b60408051600481526024810182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f313ce5670000000000000000000000000000000000000000000000000000000017905290516000918291829173ffffffffffffffffffffffffffffffffffffffff8616916143779190614e7a565b600060405180830381855afa9150503d80600081146143b2576040519150601f19603f3d011682016040523d82523d6000602084013e6143b7565b606091505b50915091508180156143ca575080516020145b6143d55760126142ee565b808060200190518101906142ee9190614d87565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017905291516000928392908816916144fd9190614e7a565b6000604051808303816000865af19150503d806000811461453a576040519150601f19603f3d011682016040523d82523d6000602084013e61453f565b606091505b50915091508180156145695750805115806145695750808060200190518101906145699190614b4f565b6145cf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f426f72696e6745524332303a205472616e7366657246726f6d206661696c65646044820152606401610745565b505050505050565b6009546002546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a082319060240160206040518083038186803b15801561464357600080fd5b505afa158015614657573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061467b9190614c72565b1115612293576009546002546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000929173ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b1580156146ef57600080fd5b505afa158015614703573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147279190614c72565b6147319190614ffe565b905080821061475e57600254612f6d9073ffffffffffffffffffffffffffffffffffffffff16848361406e565b8115612f6d57600254612f6d9073ffffffffffffffffffffffffffffffffffffffff16848461406e565b606060408251106147ad57818060200190518101906147a79190614b8e565b92915050565b81516020141561493d5760005b60208160ff161080156148075750828160ff16815181106147dd576147dd6150c9565b01602001517fff000000000000000000000000000000000000000000000000000000000000001615155b1561481e57806148168161507a565b9150506147ba565b60008160ff1667ffffffffffffffff81111561483c5761483c6150f8565b6040519080825280601f01601f191660200182016040528015614866576020820181803683370190505b509050600091505b60208260ff161080156148bb5750838260ff1681518110614891576148916150c9565b01602001517fff000000000000000000000000000000000000000000000000000000000000001615155b1561493657838260ff16815181106148d5576148d56150c9565b602001015160f81c60f81b818360ff16815181106148f5576148f56150c9565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508161492e8161507a565b92505061486e565b9392505050565b505060408051808201909152600381527f3f3f3f0000000000000000000000000000000000000000000000000000000000602082015290565b919050565b8280548282559060005260206000209081019282156149f3579160200282015b828111156149f35781547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84351617825560209092019160019091019061499b565b506149ff929150614a7d565b5090565b8280548282559060005260206000209081019282156149f3579160200282015b828111156149f357825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909116178255602090920191600190910190614a23565b5b808211156149ff5760008155600101614a7e565b60008083601f840112614aa457600080fd5b50813567ffffffffffffffff811115614abc57600080fd5b6020830191508360208260051b8501011115614ad757600080fd5b9250929050565b803561ffff8116811461497657600080fd5b600060208284031215614b0257600080fd5b813561493681615127565b60008060208385031215614b2057600080fd5b823567ffffffffffffffff811115614b3757600080fd5b614b4385828601614a92565b90969095509350505050565b600060208284031215614b6157600080fd5b8151801515811461493657600080fd5b600060208284031215614b8357600080fd5b815161493681615127565b600060208284031215614ba057600080fd5b815167ffffffffffffffff80821115614bb857600080fd5b818401915084601f830112614bcc57600080fd5b815181811115614bde57614bde6150f8565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715614c2457614c246150f8565b81604052828152876020848701011115614c3d57600080fd5b614c4e836020830160208801615015565b979650505050505050565b600060208284031215614c6b57600080fd5b5035919050565b600060208284031215614c8457600080fd5b5051919050565b60008060408385031215614c9e57600080fd5b823591506020830135614cb081615127565b809150509250929050565b60008060008060008060a08789031215614cd457600080fd5b863595506020870135614ce681615127565b9450614cf460408801614ade565b935060608701359250608087013567ffffffffffffffff811115614d1757600080fd5b614d2389828a01614a92565b979a9699509497509295939492505050565b60008060408385031215614d4857600080fd5b50508035926020909101359150565b60008060008060008060a08789031215614d7057600080fd5b8635955060208701359450614cf460408801614ade565b600060208284031215614d9957600080fd5b815160ff8116811461493657600080fd5b600081518084526020808501945080840160005b83811015614df057815173ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101614dbe565b509495945050505050565b600081518084526020808501945080840160005b83811015614df057815187529582019590820190600101614e0f565b60008184825b85811015614e6f578135614e4481615127565b73ffffffffffffffffffffffffffffffffffffffff1683526020928301929190910190600101614e31565b509095945050505050565b60008251614e8c818460208701615015565b9190910192915050565b6020815260006149366020830184614daa565b608081526000614ebc6080830187614daa565b6020838203818501528187518084528284019150828160051b850101838a0160005b83811015614f42577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08088850301865282518051808652614f24818a88018b8501615015565b96880196601f01909116939093018601925090850190600101614ede565b50508681036040880152614f56818a614dfb565b9450505050508281036060840152614c4e8185614dfb565b60008219821115614f8157614f8161509a565b500190565b600082614fbc577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614ff957614ff961509a565b500290565b6000828210156150105761501061509a565b500390565b60005b83811015615030578181015183820152602001615018565b838111156140685750506000910152565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156150735761507361509a565b5060010190565b600060ff821660ff8114156150915761509161509a565b60010192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461380657600080fdfea26469706673582212203019de4a38b5b97281cfcc90e756f13f846ba5f30ab050658b19946eb1b2a01464736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "poolRewardsPerSec(uint256)": {
        "notice": "View function to see pool rewards per sec"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 375,
        "contract": "contracts/farm/v2/SolarDistributorV2.sol:SolarDistributorV2",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 650,
        "contract": "contracts/farm/v2/SolarDistributorV2.sol:SolarDistributorV2",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 9544,
        "contract": "contracts/farm/v2/SolarDistributorV2.sol:SolarDistributorV2",
        "label": "solar",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IBoringERC20)12180"
      },
      {
        "astId": 9546,
        "contract": "contracts/farm/v2/SolarDistributorV2.sol:SolarDistributorV2",
        "label": "solarPerSec",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 9556,
        "contract": "contracts/farm/v2/SolarDistributorV2.sol:SolarDistributorV2",
        "label": "poolInfo",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_struct(PoolInfo)9541_storage)dyn_storage"
      },
      {
        "astId": 9563,
        "contract": "contracts/farm/v2/SolarDistributorV2.sol:SolarDistributorV2",
        "label": "userInfo",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)9521_storage))"
      },
      {
        "astId": 9566,
        "contract": "contracts/farm/v2/SolarDistributorV2.sol:SolarDistributorV2",
        "label": "totalAllocPoint",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 9568,
        "contract": "contracts/farm/v2/SolarDistributorV2.sol:SolarDistributorV2",
        "label": "startTimestamp",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 9570,
        "contract": "contracts/farm/v2/SolarDistributorV2.sol:SolarDistributorV2",
        "label": "totalLockedUpRewards",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 9573,
        "contract": "contracts/farm/v2/SolarDistributorV2.sol:SolarDistributorV2",
        "label": "totalSolarInPools",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 9575,
        "contract": "contracts/farm/v2/SolarDistributorV2.sol:SolarDistributorV2",
        "label": "teamAddress",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 9577,
        "contract": "contracts/farm/v2/SolarDistributorV2.sol:SolarDistributorV2",
        "label": "treasuryAddress",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 9579,
        "contract": "contracts/farm/v2/SolarDistributorV2.sol:SolarDistributorV2",
        "label": "investorAddress",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 9581,
        "contract": "contracts/farm/v2/SolarDistributorV2.sol:SolarDistributorV2",
        "label": "teamPercent",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 9583,
        "contract": "contracts/farm/v2/SolarDistributorV2.sol:SolarDistributorV2",
        "label": "treasuryPercent",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 9585,
        "contract": "contracts/farm/v2/SolarDistributorV2.sol:SolarDistributorV2",
        "label": "investorPercent",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(IComplexRewarder)13068)dyn_storage": {
        "base": "t_contract(IComplexRewarder)13068",
        "encoding": "dynamic_array",
        "label": "contract IComplexRewarder[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(PoolInfo)9541_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)9541_storage",
        "encoding": "dynamic_array",
        "label": "struct SolarDistributorV2.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_contract(IBoringERC20)12180": {
        "encoding": "inplace",
        "label": "contract IBoringERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IComplexRewarder)13068": {
        "encoding": "inplace",
        "label": "contract IComplexRewarder",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)9521_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SolarDistributorV2.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)9521_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)9521_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct SolarDistributorV2.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)9521_storage)"
      },
      "t_struct(PoolInfo)9541_storage": {
        "encoding": "inplace",
        "label": "struct SolarDistributorV2.PoolInfo",
        "members": [
          {
            "astId": 9524,
            "contract": "contracts/farm/v2/SolarDistributorV2.sol:SolarDistributorV2",
            "label": "lpToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IBoringERC20)12180"
          },
          {
            "astId": 9526,
            "contract": "contracts/farm/v2/SolarDistributorV2.sol:SolarDistributorV2",
            "label": "allocPoint",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9528,
            "contract": "contracts/farm/v2/SolarDistributorV2.sol:SolarDistributorV2",
            "label": "lastRewardTimestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9530,
            "contract": "contracts/farm/v2/SolarDistributorV2.sol:SolarDistributorV2",
            "label": "accSolarPerShare",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 9532,
            "contract": "contracts/farm/v2/SolarDistributorV2.sol:SolarDistributorV2",
            "label": "depositFeeBP",
            "offset": 0,
            "slot": "4",
            "type": "t_uint16"
          },
          {
            "astId": 9534,
            "contract": "contracts/farm/v2/SolarDistributorV2.sol:SolarDistributorV2",
            "label": "harvestInterval",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 9536,
            "contract": "contracts/farm/v2/SolarDistributorV2.sol:SolarDistributorV2",
            "label": "totalLp",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 9540,
            "contract": "contracts/farm/v2/SolarDistributorV2.sol:SolarDistributorV2",
            "label": "rewarders",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_contract(IComplexRewarder)13068)dyn_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(UserInfo)9521_storage": {
        "encoding": "inplace",
        "label": "struct SolarDistributorV2.UserInfo",
        "members": [
          {
            "astId": 9514,
            "contract": "contracts/farm/v2/SolarDistributorV2.sol:SolarDistributorV2",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9516,
            "contract": "contracts/farm/v2/SolarDistributorV2.sol:SolarDistributorV2",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9518,
            "contract": "contracts/farm/v2/SolarDistributorV2.sol:SolarDistributorV2",
            "label": "rewardLockedUp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9520,
            "contract": "contracts/farm/v2/SolarDistributorV2.sol:SolarDistributorV2",
            "label": "nextHarvestUntil",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}