{
  "address": "0x69939d72c1e18225CBd4c02C9aFb19ab66354dD9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IBoringERC20",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenPerSec",
          "type": "uint256"
        },
        {
          "internalType": "contract ISolarDistributorV2",
          "name": "_distributorV2",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isNative",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        }
      ],
      "name": "AddPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "OnReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRate",
          "type": "uint256"
        }
      ],
      "name": "RewardRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        }
      ],
      "name": "SetPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastRewardTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accTokenPerShare",
          "type": "uint256"
        }
      ],
      "name": "UpdatePool",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositRewards",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributorV2",
      "outputs": [
        {
          "internalType": "contract ISolarDistributorV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isNative",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "massUpdatePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "onSolarReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pending",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "accTokenPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "poolRewardsPerSec",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IBoringERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenPerSec",
          "type": "uint256"
        }
      ],
      "name": "setRewardRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenPerSec",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAllocPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDebtPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "accTokenPerShare",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastRewardTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "allocPoint",
              "type": "uint256"
            }
          ],
          "internalType": "struct ComplexRewarderPerSec.PoolInfo",
          "name": "pool",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x89db74181cdbe83dd414074bf8d1fb3e190277eb6267b1f0413aaccc37a905b6",
  "receipt": {
    "to": null,
    "from": "0xb152C1746543FdC63b308808497B64F52774f805",
    "contractAddress": "0x69939d72c1e18225CBd4c02C9aFb19ab66354dD9",
    "transactionIndex": 0,
    "gasUsed": "1951123",
    "logsBloom": "0x
    "blockHash": "0xe62d673ab9ae74170dcec8627594b82389d871f141f425df90be9d31ec7e788e",
    "transactionHash": "0x89db74181cdbe83dd414074bf8d1fb3e190277eb6267b1f0413aaccc37a905b6",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 874370,
        "transactionHash": "0x89db74181cdbe83dd414074bf8d1fb3e190277eb6267b1f0413aaccc37a905b6",
        "address": "0x69939d72c1e18225CBd4c02C9aFb19ab66354dD9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b152c1746543fdc63b308808497b64f52774f805"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xe62d673ab9ae74170dcec8627594b82389d871f141f425df90be9d31ec7e788e"
      }
    ],
    "blockNumber": 874370,
    "cumulativeGasUsed": "1951123",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x579e6e41deaeed8f65768e161a0fd63d760cae5c",
    "2777777777777777",
    "0x3af684Db016dD0148F6Bc607b4C4d700bfA25947",
    false
  ],
  "solcInputHash": "ce0696306a8f449a758e8b765179384f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBoringERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenPerSec\",\"type\":\"uint256\"},{\"internalType\":\"contract ISolarDistributorV2\",\"name\":\"_distributorV2\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isNative\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"}],\"name\":\"AddPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"RewardRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"}],\"name\":\"SetPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accTokenPerShare\",\"type\":\"uint256\"}],\"name\":\"UpdatePool\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositRewards\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributorV2\",\"outputs\":[{\"internalType\":\"contract ISolarDistributorV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isNative\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"onSolarReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accTokenPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"poolRewardsPerSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IBoringERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenPerSec\",\"type\":\"uint256\"}],\"name\":\"setRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPerSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebtPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"accTokenPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"}],\"internalType\":\"struct ComplexRewarderPerSec.PoolInfo\",\"name\":\"pool\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"add(uint256,uint256)\":{\"params\":{\"_allocPoint\":\"allocation of the new pool.\",\"_pid\":\"pool id on DistributorV2\"}},\"depositRewards(uint256)\":{\"params\":{\"_amount\":\"The number of tokens to distribute\"}},\"onSolarReward(uint256,address,uint256)\":{\"params\":{\"_amount\":\"Number of LP tokens the user has\",\"_user\":\"Address of user\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingTokens(uint256,address)\":{\"params\":{\"_pid\":\"pool id.\",\"_user\":\"Address of user.\"},\"returns\":{\"pending\":\"reward for a given user.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"set(uint256,uint256)\":{\"params\":{\"_allocPoint\":\"New AP of the pool.\",\"_pid\":\"The index of the pool. See `poolInfo`.\"}},\"setRewardRate(uint256)\":{\"params\":{\"_tokenPerSec\":\"The number of tokens to distribute per second\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updatePool(uint256)\":{\"params\":{\"pid\":\"The index of the pool. See `poolInfo`.\"},\"returns\":{\"pool\":\"Returns the pool that was updated.\"}}},\"stateVariables\":{\"ACC_TOKEN_PRECISION\":{\"details\":\"Token precision\"},\"tokenPerSec\":{\"details\":\"Total token to distribute per second\"},\"totalAllocPoint\":{\"details\":\"Total allocation points. Must be the sum of all allocation points in all pools.\"},\"totalDebt\":{\"details\":\"Total debt\"},\"totalDebtPaid\":{\"details\":\"Total debt paid\"},\"totalRewards\":{\"details\":\"Total rewards\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"add(uint256,uint256)\":{\"notice\":\"Add a new pool. Can only be called by the owner.\"},\"balance()\":{\"notice\":\"View function to see calculated balance of reward token.\"},\"depositRewards(uint256)\":{\"notice\":\"Add rewards to the rewarder\"},\"emergencyWithdraw()\":{\"notice\":\"In case rewarder is stopped before emissions finished, this function allows withdrawal of remaining tokens.\"},\"onSolarReward(uint256,address,uint256)\":{\"notice\":\"Function called by SolarDistributorV2 whenever staker claims SOLAR harvest. Allows staker to also receive a 2nd reward token.\"},\"pendingBalance()\":{\"notice\":\"View function to see pending balance of reward token.\"},\"pendingTokens(uint256,address)\":{\"notice\":\"View function to see pending tokens\"},\"poolInfo(uint256)\":{\"notice\":\"Info of each pool.\"},\"poolRewardsPerSec(uint256)\":{\"notice\":\"View function to see pool rewards per sec\"},\"set(uint256,uint256)\":{\"notice\":\"Update the given pool's allocation point and `IRewarder` contract. Can only be called by the owner.\"},\"setRewardRate(uint256)\":{\"notice\":\"Sets the distribution reward rate. This will also update the poolInfo.\"},\"updatePool(uint256)\":{\"notice\":\"Update reward variables of the given pool.\"},\"userInfo(uint256,address)\":{\"notice\":\"Info of each user that stakes LP tokens.\"}},\"notice\":\"This is a sample contract to be used in the SolarDistributorV2 contract for partners to reward stakers with their native token alongside SOLAR. It assumes no minting rights, so requires a set amount of YOUR_TOKEN to be transferred to this contract prior. E.g. say you've allocated 100,000 XYZ to the SOLAR-XYZ farm over 30 days. Then you would need to transfer 100,000 XYZ and set the block reward accordingly so it's fully distributed after 30 days.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/farm/v2/rewarders/ComplexRewarderPerSec.sol\":\"ComplexRewarderPerSec\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"contracts/farm/v2/ISolarDistributorV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\ninterface ISolarDistributorV2 {\\r\\n    function totalAllocPoint() external view returns (uint256);\\r\\n\\r\\n    function deposit(uint256 _pid, uint256 _amount) external;\\r\\n\\r\\n    function poolLength() external view returns (uint256);\\r\\n\\r\\n    function poolTotalLp(uint256 pid) external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x678a0304935fd737298e5995edc41a4ee3a757e1d17a72cfeed7c8f0d65cc7e0\",\"license\":\"MIT\"},\"contracts/farm/v2/libraries/BoringERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\n// solhint-disable avoid-low-level-calls\\r\\nimport \\\"./IBoringERC20.sol\\\";\\r\\n\\r\\nlibrary BoringERC20 {\\r\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\r\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\r\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\r\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\r\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\r\\n\\r\\n    function returnDataToString(bytes memory data)\\r\\n        internal\\r\\n        pure\\r\\n        returns (string memory)\\r\\n    {\\r\\n        if (data.length >= 64) {\\r\\n            return abi.decode(data, (string));\\r\\n        } else if (data.length == 32) {\\r\\n            uint8 i = 0;\\r\\n            while (i < 32 && data[i] != 0) {\\r\\n                i++;\\r\\n            }\\r\\n            bytes memory bytesArray = new bytes(i);\\r\\n            for (i = 0; i < 32 && data[i] != 0; i++) {\\r\\n                bytesArray[i] = data[i];\\r\\n            }\\r\\n            return string(bytesArray);\\r\\n        } else {\\r\\n            return \\\"???\\\";\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\\r\\n    /// @param token The address of the ERC-20 token contract.\\r\\n    /// @return (string) Token symbol.\\r\\n    function safeSymbol(IBoringERC20 token)\\r\\n        internal\\r\\n        view\\r\\n        returns (string memory)\\r\\n    {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(\\r\\n            abi.encodeWithSelector(SIG_SYMBOL)\\r\\n        );\\r\\n        return success ? returnDataToString(data) : \\\"???\\\";\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\\r\\n    /// @param token The address of the ERC-20 token contract.\\r\\n    /// @return (string) Token name.\\r\\n    function safeName(IBoringERC20 token)\\r\\n        internal\\r\\n        view\\r\\n        returns (string memory)\\r\\n    {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(\\r\\n            abi.encodeWithSelector(SIG_NAME)\\r\\n        );\\r\\n        return success ? returnDataToString(data) : \\\"???\\\";\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\\r\\n    /// @param token The address of the ERC-20 token contract.\\r\\n    /// @return (uint8) Token decimals.\\r\\n    function safeDecimals(IBoringERC20 token) internal view returns (uint8) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(\\r\\n            abi.encodeWithSelector(SIG_DECIMALS)\\r\\n        );\\r\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\r\\n    /// Reverts on a failed transfer.\\r\\n    /// @param token The address of the ERC-20 token.\\r\\n    /// @param to Transfer tokens to.\\r\\n    /// @param amount The token amount.\\r\\n    function safeTransfer(\\r\\n        IBoringERC20 token,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = address(token).call(\\r\\n            abi.encodeWithSelector(SIG_TRANSFER, to, amount)\\r\\n        );\\r\\n        require(\\r\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\r\\n            \\\"BoringERC20: Transfer failed\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\r\\n    /// Reverts on a failed transfer.\\r\\n    /// @param token The address of the ERC-20 token.\\r\\n    /// @param from Transfer tokens from.\\r\\n    /// @param to Transfer tokens to.\\r\\n    /// @param amount The token amount.\\r\\n    function safeTransferFrom(\\r\\n        IBoringERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = address(token).call(\\r\\n            abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount)\\r\\n        );\\r\\n        require(\\r\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\r\\n            \\\"BoringERC20: TransferFrom failed\\\"\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8d7fdeae919fa55b40b1d6da668d1ae791137deb154b68f24d75fe6b1901a44d\",\"license\":\"MIT\"},\"contracts/farm/v2/libraries/IBoringERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\ninterface IBoringERC20 {\\r\\n    function mint(address to, uint256 amount) external;\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n    /// @notice EIP 2612\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xf47947a40bd436a7d24bd22f3cf673977512966a6cbae11e551e48bb618044c7\",\"license\":\"MIT\"},\"contracts/farm/v2/rewarders/ComplexRewarderPerSec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.2;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"./IComplexRewarder.sol\\\";\\r\\nimport \\\"../ISolarDistributorV2.sol\\\";\\r\\nimport \\\"../libraries/BoringERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * This is a sample contract to be used in the SolarDistributorV2 contract for partners to reward\\r\\n * stakers with their native token alongside SOLAR.\\r\\n *\\r\\n * It assumes no minting rights, so requires a set amount of YOUR_TOKEN to be transferred to this contract prior.\\r\\n * E.g. say you've allocated 100,000 XYZ to the SOLAR-XYZ farm over 30 days. Then you would need to transfer\\r\\n * 100,000 XYZ and set the block reward accordingly so it's fully distributed after 30 days.\\r\\n */\\r\\ncontract ComplexRewarderPerSec is IComplexRewarder, Ownable, ReentrancyGuard {\\r\\n    using BoringERC20 for IBoringERC20;\\r\\n\\r\\n    IBoringERC20 public immutable override rewardToken;\\r\\n    bool public immutable isNative;\\r\\n    ISolarDistributorV2 public immutable distributorV2;\\r\\n\\r\\n    /// @notice Info of each distributorV2 user.\\r\\n    /// `amount` LP token amount the user has provided.\\r\\n    /// `rewardDebt` The amount of YOUR_TOKEN entitled to the user.\\r\\n    struct UserInfo {\\r\\n        uint256 amount;\\r\\n        uint256 rewardDebt;\\r\\n    }\\r\\n\\r\\n    /// @notice Info of each distributorV2 poolInfo.\\r\\n    /// `accTokenPerShare` Amount of YOUR_TOKEN each LP token is worth.\\r\\n    /// `lastRewardTimestamp` The last timestamp YOUR_TOKEN was rewarded to the poolInfo.\\r\\n    /// `allocPoint` The amount of allocation points assigned to the pool.\\r\\n    struct PoolInfo {\\r\\n        uint256 accTokenPerShare;\\r\\n        uint256 lastRewardTimestamp;\\r\\n        uint256 allocPoint;\\r\\n    }\\r\\n\\r\\n    /// @notice Info of each pool.\\r\\n    mapping(uint256 => PoolInfo) public poolInfo;\\r\\n\\r\\n    uint256[] public poolIds;\\r\\n\\r\\n    /// @notice Info of each user that stakes LP tokens.\\r\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\r\\n\\r\\n    /// @dev Total allocation points. Must be the sum of all allocation points in all pools.\\r\\n    uint256 public totalAllocPoint = 0;\\r\\n\\r\\n    /// @dev Total rewards\\r\\n    uint256 public totalRewards = 0;\\r\\n\\r\\n    /// @dev Total debt\\r\\n    uint256 public totalDebt = 0;\\r\\n\\r\\n    /// @dev Total debt paid\\r\\n    uint256 public totalDebtPaid = 0;\\r\\n\\r\\n    /// @dev Total token to distribute per second\\r\\n    uint256 public tokenPerSec;\\r\\n\\r\\n    /// @dev Token precision\\r\\n    uint256 private constant ACC_TOKEN_PRECISION = 1e18;\\r\\n\\r\\n    event OnReward(address indexed user, uint256 amount);\\r\\n    event RewardRateUpdated(uint256 oldRate, uint256 newRate);\\r\\n    event AddPool(uint256 indexed pid, uint256 allocPoint);\\r\\n    event SetPool(uint256 indexed pid, uint256 allocPoint);\\r\\n    event UpdatePool(\\r\\n        uint256 indexed pid,\\r\\n        uint256 lastRewardTimestamp,\\r\\n        uint256 lpSupply,\\r\\n        uint256 accTokenPerShare\\r\\n    );\\r\\n\\r\\n    modifier onlyDistributorV2() {\\r\\n        require(\\r\\n            msg.sender == address(distributorV2),\\r\\n            \\\"onlyDistributorV2: only SolarDistributorV2 can call this function\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        IBoringERC20 _rewardToken,\\r\\n        uint256 _tokenPerSec,\\r\\n        ISolarDistributorV2 _distributorV2,\\r\\n        bool _isNative\\r\\n    ) {\\r\\n        require(\\r\\n            Address.isContract(address(_rewardToken)),\\r\\n            \\\"constructor: reward token must be a valid contract\\\"\\r\\n        );\\r\\n        require(\\r\\n            Address.isContract(address(_distributorV2)),\\r\\n            \\\"constructor: SolarDistributorV2 must be a valid contract\\\"\\r\\n        );\\r\\n        rewardToken = _rewardToken;\\r\\n        tokenPerSec = _tokenPerSec;\\r\\n        distributorV2 = _distributorV2;\\r\\n        isNative = _isNative;\\r\\n    }\\r\\n\\r\\n    /// @notice View function to see calculated balance of reward token.\\r\\n    function balance() external view returns (uint256) {\\r\\n        if (totalRewards < totalDebt) {\\r\\n            return 0;\\r\\n        } else {\\r\\n            return totalRewards - totalDebt;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice View function to see pending balance of reward token.\\r\\n    function pendingBalance() external view returns (uint256) {\\r\\n        if (totalRewards < totalDebtPaid) {\\r\\n            return 0;\\r\\n        } else {\\r\\n            return totalRewards - totalDebtPaid;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Add a new pool. Can only be called by the owner.\\r\\n    /// @param _pid pool id on DistributorV2\\r\\n    /// @param _allocPoint allocation of the new pool.\\r\\n    function add(uint256 _pid, uint256 _allocPoint) public onlyOwner {\\r\\n        require(poolInfo[_pid].lastRewardTimestamp == 0, \\\"pool already exists\\\");\\r\\n        totalAllocPoint += _allocPoint;\\r\\n\\r\\n        poolInfo[_pid] = PoolInfo({\\r\\n            allocPoint: _allocPoint,\\r\\n            lastRewardTimestamp: block.timestamp,\\r\\n            accTokenPerShare: 0\\r\\n        });\\r\\n        poolIds.push(_pid);\\r\\n        emit AddPool(_pid, _allocPoint);\\r\\n    }\\r\\n\\r\\n    /// @notice Update the given pool's allocation point and `IRewarder` contract. Can only be called by the owner.\\r\\n    /// @param _pid The index of the pool. See `poolInfo`.\\r\\n    /// @param _allocPoint New AP of the pool.\\r\\n    function set(uint256 _pid, uint256 _allocPoint) public onlyOwner {\\r\\n        totalAllocPoint =\\r\\n            totalAllocPoint -\\r\\n            poolInfo[_pid].allocPoint +\\r\\n            _allocPoint;\\r\\n        poolInfo[_pid].allocPoint = _allocPoint;\\r\\n        emit SetPool(_pid, _allocPoint);\\r\\n    }\\r\\n\\r\\n    /// @notice Sets the distribution reward rate. This will also update the poolInfo.\\r\\n    /// @param _tokenPerSec The number of tokens to distribute per second\\r\\n    function setRewardRate(uint256 _tokenPerSec) external onlyOwner {\\r\\n        massUpdatePools();\\r\\n        emit RewardRateUpdated(tokenPerSec, _tokenPerSec);\\r\\n        tokenPerSec = _tokenPerSec;\\r\\n    }\\r\\n\\r\\n    /// @notice Add rewards to the rewarder\\r\\n    /// @param _amount The number of tokens to distribute\\r\\n    function depositRewards(uint256 _amount) external payable onlyOwner {\\r\\n        require(\\r\\n            _amount > 0,\\r\\n            \\\"deposit rewards: amount needs to be higher than 0\\\"\\r\\n        );\\r\\n        if (isNative) {\\r\\n            require(\\r\\n                msg.value == _amount,\\r\\n                \\\"deposit rewards: amount doesnt match\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        if (!isNative) {\\r\\n            rewardToken.safeTransferFrom(msg.sender, address(this), _amount);\\r\\n        }\\r\\n\\r\\n        totalRewards += _amount * ACC_TOKEN_PRECISION;\\r\\n    }\\r\\n\\r\\n    /// @notice Update reward variables of the given pool.\\r\\n    /// @param pid The index of the pool. See `poolInfo`.\\r\\n    /// @return pool Returns the pool that was updated.\\r\\n    function updatePool(uint256 pid) public returns (PoolInfo memory pool) {\\r\\n        pool = poolInfo[pid];\\r\\n        uint256 rewardBalance = this.balance();\\r\\n\\r\\n        if (block.timestamp > pool.lastRewardTimestamp && rewardBalance > 0) {\\r\\n            uint256 lpSupply = distributorV2.poolTotalLp(pid);\\r\\n\\r\\n            if (lpSupply > 0) {\\r\\n                uint256 timeElapsed = block.timestamp -\\r\\n                    pool.lastRewardTimestamp;\\r\\n                uint256 tokenReward = (timeElapsed *\\r\\n                    tokenPerSec *\\r\\n                    pool.allocPoint) / totalAllocPoint;\\r\\n\\r\\n                if (tokenReward * ACC_TOKEN_PRECISION > rewardBalance) {\\r\\n                    tokenReward = rewardBalance / ACC_TOKEN_PRECISION;\\r\\n                }\\r\\n\\r\\n                totalDebt += tokenReward * ACC_TOKEN_PRECISION;\\r\\n\\r\\n                pool.accTokenPerShare += ((tokenReward * ACC_TOKEN_PRECISION) /\\r\\n                    lpSupply);\\r\\n            }\\r\\n\\r\\n            pool.lastRewardTimestamp = block.timestamp;\\r\\n            poolInfo[pid] = pool;\\r\\n            emit UpdatePool(\\r\\n                pid,\\r\\n                pool.lastRewardTimestamp,\\r\\n                lpSupply,\\r\\n                pool.accTokenPerShare\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Update reward vairables for all pools. Be careful of gas spending!\\r\\n    function massUpdatePools() public {\\r\\n        uint256 length = poolIds.length;\\r\\n        for (uint256 pid = 0; pid < length; ++pid) {\\r\\n            updatePool(poolIds[pid]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Function called by SolarDistributorV2 whenever staker claims SOLAR harvest. Allows staker to also receive a 2nd reward token.\\r\\n    /// @param _user Address of user\\r\\n    /// @param _amount Number of LP tokens the user has\\r\\n    function onSolarReward(\\r\\n        uint256 _pid,\\r\\n        address _user,\\r\\n        uint256 _amount\\r\\n    ) external override onlyDistributorV2 nonReentrant {\\r\\n        PoolInfo memory pool = updatePool(_pid);\\r\\n        UserInfo storage user = userInfo[_pid][_user];\\r\\n\\r\\n        uint256 pending = 0;\\r\\n        uint256 rewardBalance = this.pendingBalance();\\r\\n\\r\\n        if (user.amount > 0 && rewardBalance > 0) {\\r\\n            pending = (((user.amount * pool.accTokenPerShare) /\\r\\n                ACC_TOKEN_PRECISION) - user.rewardDebt);\\r\\n\\r\\n            if (pending * ACC_TOKEN_PRECISION > rewardBalance) {\\r\\n                pending = rewardBalance / ACC_TOKEN_PRECISION;\\r\\n            }\\r\\n\\r\\n            totalDebtPaid += pending * ACC_TOKEN_PRECISION;\\r\\n\\r\\n            if (isNative) {\\r\\n                (bool success, ) = _user.call{value: pending}(\\\"\\\");\\r\\n                require(success, \\\"Transfer failed\\\");\\r\\n            } else {\\r\\n                rewardToken.safeTransfer(_user, pending);\\r\\n            }\\r\\n        }\\r\\n        user.amount = _amount;\\r\\n        user.rewardDebt =\\r\\n            (user.amount * pool.accTokenPerShare) /\\r\\n            ACC_TOKEN_PRECISION;\\r\\n\\r\\n        emit OnReward(_user, pending);\\r\\n    }\\r\\n\\r\\n    /// @notice View function to see pending tokens\\r\\n    /// @param _pid pool id.\\r\\n    /// @param _user Address of user.\\r\\n    /// @return pending reward for a given user.\\r\\n    function pendingTokens(uint256 _pid, address _user)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (uint256 pending)\\r\\n    {\\r\\n        PoolInfo memory pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][_user];\\r\\n\\r\\n        uint256 accTokenPerShare = pool.accTokenPerShare;\\r\\n        uint256 lpSupply = distributorV2.poolTotalLp(_pid);\\r\\n        uint256 rewardBalance = this.balance();\\r\\n\\r\\n        if (\\r\\n            block.timestamp > pool.lastRewardTimestamp &&\\r\\n            lpSupply != 0 &&\\r\\n            rewardBalance > 0\\r\\n        ) {\\r\\n            uint256 timeElapsed = block.timestamp - pool.lastRewardTimestamp;\\r\\n            uint256 tokenReward = (timeElapsed *\\r\\n                tokenPerSec *\\r\\n                pool.allocPoint) / totalAllocPoint;\\r\\n\\r\\n            if (tokenReward * ACC_TOKEN_PRECISION > rewardBalance) {\\r\\n                tokenReward = rewardBalance / ACC_TOKEN_PRECISION;\\r\\n            }\\r\\n\\r\\n            accTokenPerShare += (tokenReward * ACC_TOKEN_PRECISION) / lpSupply;\\r\\n        }\\r\\n\\r\\n        pending = (((user.amount * accTokenPerShare) / ACC_TOKEN_PRECISION) -\\r\\n            user.rewardDebt);\\r\\n    }\\r\\n\\r\\n    /// @notice In case rewarder is stopped before emissions finished, this function allows\\r\\n    /// withdrawal of remaining tokens.\\r\\n    function emergencyWithdraw() public onlyOwner {\\r\\n        if (isNative) {\\r\\n            (bool success, ) = msg.sender.call{value: address(this).balance}(\\r\\n                \\\"\\\"\\r\\n            );\\r\\n            require(success, \\\"Transfer failed\\\");\\r\\n        } else {\\r\\n            rewardToken.safeTransfer(\\r\\n                address(msg.sender),\\r\\n                rewardToken.balanceOf(address(this))\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice View function to see pool rewards per sec\\r\\n    function poolRewardsPerSec(uint256 _pid)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        if (this.balance() > 0) {\\r\\n            return (pool.allocPoint / totalAllocPoint) * tokenPerSec;\\r\\n        } else {\\r\\n            return 0;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7c67b12e86d5b09150d16a77ed2922f60d0728f0b04f099de76176b3547af8e3\",\"license\":\"MIT\"},\"contracts/farm/v2/rewarders/IComplexRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\nimport \\\"../libraries/IBoringERC20.sol\\\";\\r\\n\\r\\ninterface IComplexRewarder {\\r\\n    function onSolarReward(\\r\\n        uint256 pid,\\r\\n        address user,\\r\\n        uint256 newLpAmount\\r\\n    ) external;\\r\\n\\r\\n    function pendingTokens(uint256 pid, address user)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 pending);\\r\\n\\r\\n    function rewardToken() external view returns (IBoringERC20);\\r\\n\\r\\n    function poolRewardsPerSec(uint256 pid) external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x55911c291cec3b94dca14d8d6894cbce317f42429e4a36845dfb748f41948990\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e060405260006005556000600655600060075560006008553480156200002557600080fd5b5060405162002418380380620024188339810160408190526200004891620001ea565b620000533362000194565b600180819055506200007084620001e460201b62001b011760201c565b620000dd5760405162461bcd60e51b815260206004820152603260248201527f636f6e7374727563746f723a2072657761726420746f6b656e206d7573742062604482015271194818481d985b1a590818dbdb9d1c9858dd60721b60648201526084015b60405180910390fd5b620000f382620001e460201b62001b011760201c565b620001675760405162461bcd60e51b815260206004820152603860248201527f636f6e7374727563746f723a20536f6c61724469737472696275746f7256322060448201527f6d75737420626520612076616c696420636f6e747261637400000000000000006064820152608401620000d4565b6001600160601b0319606094851b8116608052600993909355921b1660c052151560f81b60a05262000263565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b3b151590565b600080600080608085870312156200020157600080fd5b84516200020e816200024a565b60208601516040870151919550935062000228816200024a565b606086015190925080151581146200023f57600080fd5b939692955090935050565b6001600160a01b03811681146200026057600080fd5b50565b60805160601c60a05160f81c60c05160601c61212f620002e9600039600081816103c00152818161088b0152818161141f015261190601526000818161034601528181610e4b01528181610eff0152818161110001526116c801526000818161051501528181610f3c01528181611222015281816112b301526117d6015261212f6000f3fe6080604052600436106101a15760003560e01c8063795bbf8b116100e1578063b69ef8a81161008a578063f7c618c111610064578063f7c618c114610503578063fc7b9c1814610537578063fe8343fb1461054d578063ffcd42631461056d57600080fd5b8063b69ef8a8146104b9578063db2e21bc146104ce578063f2fde38b146104e357600080fd5b80638da5cb5b116100bb5780638da5cb5b1461041a57806393f1a40b146104455780639e447fc61461049957600080fd5b8063795bbf8b146103985780637d0d9d5f146103ae5780638bdf67f21461040757600080fd5b806351eb05a61161014e57806369883b4e1161012857806369883b4e146102ff578063715018a61461031f57806373cfc6b214610334578063771602f71461037857600080fd5b806351eb05a61461029357806357b4d18e146102d5578063630b5ba1146102ea57600080fd5b80631ab06ee51161017f5780631ab06ee51461023b578063465e81ec1461025d57806350fd1f3e1461027d57600080fd5b80630e15561a146101a65780631526fe27146101cf57806317caf6f114610225575b600080fd5b3480156101b257600080fd5b506101bc60065481565b6040519081526020015b60405180910390f35b3480156101db57600080fd5b5061020a6101ea366004611ecb565b600260208190526000918252604090912080546001820154919092015483565b604080519384526020840192909252908201526060016101c6565b34801561023157600080fd5b506101bc60055481565b34801561024757600080fd5b5061025b610256366004611f5e565b61058d565b005b34801561026957600080fd5b506101bc610278366004611ecb565b610695565b34801561028957600080fd5b506101bc60095481565b34801561029f57600080fd5b506102b36102ae366004611ecb565b610768565b60408051825181526020808401519082015291810151908201526060016101c6565b3480156102e157600080fd5b506101bc610a64565b3480156102f657600080fd5b5061025b610a8d565b34801561030b57600080fd5b506101bc61031a366004611ecb565b610ad6565b34801561032b57600080fd5b5061025b610af7565b34801561034057600080fd5b506103687f000000000000000000000000000000000000000000000000000000000000000081565b60405190151581526020016101c6565b34801561038457600080fd5b5061025b610393366004611f5e565b610b84565b3480156103a457600080fd5b506101bc60085481565b3480156103ba57600080fd5b506103e27f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101c6565b61025b610415366004611ecb565b610d38565b34801561042657600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff166103e2565b34801561045157600080fd5b50610484610460366004611efd565b60046020908152600092835260408084209091529082529020805460019091015482565b604080519283526020830191909152016101c6565b3480156104a557600080fd5b5061025b6104b4366004611ecb565b610f8f565b3480156104c557600080fd5b506101bc611059565b3480156104da57600080fd5b5061025b61107d565b3480156104ef57600080fd5b5061025b6104fe366004611e8e565b6112da565b34801561050f57600080fd5b506103e27f000000000000000000000000000000000000000000000000000000000000000081565b34801561054357600080fd5b506101bc60075481565b34801561055957600080fd5b5061025b610568366004611f29565b611407565b34801561057957600080fd5b506101bc610588366004611efd565b61187d565b60005473ffffffffffffffffffffffffffffffffffffffff163314610613576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6000828152600260208190526040909120015460055482916106349161204b565b61063e9190611fbb565b600555600082815260026020819052604091829020018290555182907fc0cfd54d2de2b55f1e6e108d3ec53ff0a1abe6055401d32c61e9433b747ef9f8906106899084815260200190565b60405180910390a25050565b60008060026000848152602001908152602001600020905060003073ffffffffffffffffffffffffffffffffffffffff1663b69ef8a86040518163ffffffff1660e01b815260040160206040518083038186803b1580156106f557600080fd5b505afa158015610709573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072d9190611ee4565b11156107595760095460055482600201546107489190611fd3565b610752919061200e565b9392505050565b50600092915050565b50919050565b61078c60405180606001604052806000815260200160008152602001600081525090565b5060008181526002602081815260408084208151606081018352815481526001820154818501529301548382015280517fb69ef8a80000000000000000000000000000000000000000000000000000000081529051929392309263b69ef8a89260048082019391829003018186803b15801561080757600080fd5b505afa15801561081b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083f9190611ee4565b90508160200151421180156108545750600081115b15610762576040517f654c9ece000000000000000000000000000000000000000000000000000000008152600481018490526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063654c9ece9060240160206040518083038186803b1580156108e257600080fd5b505afa1580156108f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091a9190611ee4565b905080156109ed576000836020015142610934919061204b565b9050600060055485604001516009548461094e919061200e565b610958919061200e565b6109629190611fd3565b905083610977670de0b6b3a76400008361200e565b11156109925761098f670de0b6b3a764000085611fd3565b90505b6109a4670de0b6b3a76400008261200e565b600760008282546109b59190611fbb565b909155508390506109ce670de0b6b3a76400008361200e565b6109d89190611fd3565b855186906109e7908390611fbb565b90525050505b426020848101918252600086815260028083526040918290208751808255945160018201819055838901519190920155815190815291820184905281019190915284907f3be3541fc42237d611b30329040bfa4569541d156560acdbbae57640d20b8f469060600160405180910390a25050919050565b60006008546006541015610a785750600090565b600854600654610a88919061204b565b905090565b60035460005b81811015610ad257610ac160038281548110610ab157610ab16120ca565b9060005260206000200154610768565b50610acb81612062565b9050610a93565b5050565b60038181548110610ae657600080fd5b600091825260209091200154905081565b60005473ffffffffffffffffffffffffffffffffffffffff163314610b78576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161060a565b610b826000611b07565b565b60005473ffffffffffffffffffffffffffffffffffffffff163314610c05576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161060a565b60008281526002602052604090206001015415610c7e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f706f6f6c20616c72656164792065786973747300000000000000000000000000604482015260640161060a565b8060056000828254610c909190611fbb565b9091555050604080516060810182526000808252426020808401918252838501868152878452600291829052858420945185559151600180860191909155915193019290925560038054928301815590527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b018390555182907fa6b36ea399c1eae2ba98a011138f78722b48f46ad93349269348ccc6e8f1cced906106899084815260200190565b60005473ffffffffffffffffffffffffffffffffffffffff163314610db9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161060a565b60008111610e49576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f6465706f73697420726577617264733a20616d6f756e74206e6565647320746f60448201527f20626520686967686572207468616e2030000000000000000000000000000000606482015260840161060a565b7f000000000000000000000000000000000000000000000000000000000000000015610efd57803414610efd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f6465706f73697420726577617264733a20616d6f756e7420646f65736e74206d60448201527f6174636800000000000000000000000000000000000000000000000000000000606482015260840161060a565b7f0000000000000000000000000000000000000000000000000000000000000000610f6457610f6473ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016333084611b7c565b610f76670de0b6b3a76400008261200e565b60066000828254610f879190611fbb565b909155505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314611010576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161060a565b611018610a8d565b60095460408051918252602082018390527fc390a98ace15a7bb6bab611eedfdbb2685043b241a869420043cdfb23ccfee50910160405180910390a1600955565b6000600754600654101561106d5750600090565b600754600654610a88919061204b565b60005473ffffffffffffffffffffffffffffffffffffffff1633146110fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161060a565b7f0000000000000000000000000000000000000000000000000000000000000000156111d957604051600090339047908381818185875af1925050503d8060008114611166576040519150601f19603f3d011682016040523d82523d6000602084013e61116b565b606091505b50509050806111d6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5472616e73666572206661696c65640000000000000000000000000000000000604482015260640161060a565b50565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152610b8290339073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b15801561126457600080fd5b505afa158015611278573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129c9190611ee4565b73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169190611cf5565b60005473ffffffffffffffffffffffffffffffffffffffff16331461135b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161060a565b73ffffffffffffffffffffffffffffffffffffffff81166113fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161060a565b6111d681611b07565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146114f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604160248201527f6f6e6c794469737472696275746f7256323a206f6e6c7920536f6c617244697360448201527f7472696275746f7256322063616e2063616c6c20746869732066756e6374696f60648201527f6e00000000000000000000000000000000000000000000000000000000000000608482015260a40161060a565b6002600154141561155f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161060a565b6002600155600061156f84610768565b600085815260046020818152604080842073ffffffffffffffffffffffffffffffffffffffff89168552825280842081517f57b4d18e000000000000000000000000000000000000000000000000000000008152915195965094849330936357b4d18e9380830193919290829003018186803b1580156115ee57600080fd5b505afa158015611602573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116269190611ee4565b8354909150158015906116395750600081115b156117fd57600183015484518454670de0b6b3a76400009161165a9161200e565b6116649190611fd3565b61166e919061204b565b915080611683670de0b6b3a76400008461200e565b111561169e5761169b670de0b6b3a764000082611fd3565b91505b6116b0670de0b6b3a76400008361200e565b600860008282546116c19190611fbb565b90915550507f0000000000000000000000000000000000000000000000000000000000000000156117bc5760008673ffffffffffffffffffffffffffffffffffffffff168360405160006040518083038185875af1925050503d8060008114611746576040519150601f19603f3d011682016040523d82523d6000602084013e61174b565b606091505b50509050806117b6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5472616e73666572206661696c65640000000000000000000000000000000000604482015260640161060a565b506117fd565b6117fd73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168784611cf5565b8483558351670de0b6b3a764000090611816908761200e565b6118209190611fd3565b600184015560405182815273ffffffffffffffffffffffffffffffffffffffff8716907fd1072bb52c3131d0c96197b73fb8a45637e30f8b6664fc142310cc9b242859b49060200160405180910390a25050600180555050505050565b600082815260026020818152604080842081516060810183528154815260018201548185015293015483820152858452600480835281852073ffffffffffffffffffffffffffffffffffffffff87811687529352818520845192517f654c9ece0000000000000000000000000000000000000000000000000000000081529182018890529285917f00000000000000000000000000000000000000000000000000000000000000009091169063654c9ece9060240160206040518083038186803b15801561194a57600080fd5b505afa15801561195e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119829190611ee4565b905060003073ffffffffffffffffffffffffffffffffffffffff1663b69ef8a86040518163ffffffff1660e01b815260040160206040518083038186803b1580156119cc57600080fd5b505afa1580156119e0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a049190611ee4565b9050846020015142118015611a1857508115155b8015611a245750600081115b15611ac5576000856020015142611a3b919061204b565b90506000600554876040015160095484611a55919061200e565b611a5f919061200e565b611a699190611fd3565b905082611a7e670de0b6b3a76400008361200e565b1115611a9957611a96670de0b6b3a764000084611fd3565b90505b83611aac670de0b6b3a76400008361200e565b611ab69190611fd3565b611ac09086611fbb565b945050505b60018401548454670de0b6b3a764000090611ae190869061200e565b611aeb9190611fd3565b611af5919061204b565b98975050505050505050565b3b151590565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd000000000000000000000000000000000000000000000000000000001790529151600092839290881691611c1b9190611f80565b6000604051808303816000865af19150503d8060008114611c58576040519150601f19603f3d011682016040523d82523d6000602084013e611c5d565b606091505b5091509150818015611c87575080511580611c87575080806020019051810190611c879190611ea9565b611ced576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f426f72696e6745524332303a205472616e7366657246726f6d206661696c6564604482015260640161060a565b505050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790529151600092839290871691611d8c9190611f80565b6000604051808303816000865af19150503d8060008114611dc9576040519150601f19603f3d011682016040523d82523d6000602084013e611dce565b606091505b5091509150818015611df8575080511580611df8575080806020019051810190611df89190611ea9565b611e5e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f426f72696e6745524332303a205472616e73666572206661696c656400000000604482015260640161060a565b5050505050565b803573ffffffffffffffffffffffffffffffffffffffff81168114611e8957600080fd5b919050565b600060208284031215611ea057600080fd5b61075282611e65565b600060208284031215611ebb57600080fd5b8151801515811461075257600080fd5b600060208284031215611edd57600080fd5b5035919050565b600060208284031215611ef657600080fd5b5051919050565b60008060408385031215611f1057600080fd5b82359150611f2060208401611e65565b90509250929050565b600080600060608486031215611f3e57600080fd5b83359250611f4e60208501611e65565b9150604084013590509250925092565b60008060408385031215611f7157600080fd5b50508035926020909101359150565b6000825160005b81811015611fa15760208186018101518583015201611f87565b81811115611fb0576000828501525b509190910192915050565b60008219821115611fce57611fce61209b565b500190565b600082612009577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156120465761204661209b565b500290565b60008282101561205d5761205d61209b565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156120945761209461209b565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea26469706673582212207e50411b8fc7944a6762b74bcefdc6be6b3237cbc860691cdc776ef4c6f043ca64736f6c63430008070033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "add(uint256,uint256)": {
        "params": {
          "_allocPoint": "allocation of the new pool.",
          "_pid": "pool id on DistributorV2"
        }
      },
      "depositRewards(uint256)": {
        "params": {
          "_amount": "The number of tokens to distribute"
        }
      },
      "onSolarReward(uint256,address,uint256)": {
        "params": {
          "_amount": "Number of LP tokens the user has",
          "_user": "Address of user"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingTokens(uint256,address)": {
        "params": {
          "_pid": "pool id.",
          "_user": "Address of user."
        },
        "returns": {
          "pending": "reward for a given user."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "set(uint256,uint256)": {
        "params": {
          "_allocPoint": "New AP of the pool.",
          "_pid": "The index of the pool. See `poolInfo`."
        }
      },
      "setRewardRate(uint256)": {
        "params": {
          "_tokenPerSec": "The number of tokens to distribute per second"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updatePool(uint256)": {
        "params": {
          "pid": "The index of the pool. See `poolInfo`."
        },
        "returns": {
          "pool": "Returns the pool that was updated."
        }
      }
    },
    "stateVariables": {
      "ACC_TOKEN_PRECISION": {
        "details": "Token precision"
      },
      "tokenPerSec": {
        "details": "Total token to distribute per second"
      },
      "totalAllocPoint": {
        "details": "Total allocation points. Must be the sum of all allocation points in all pools."
      },
      "totalDebt": {
        "details": "Total debt"
      },
      "totalDebtPaid": {
        "details": "Total debt paid"
      },
      "totalRewards": {
        "details": "Total rewards"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "add(uint256,uint256)": {
        "notice": "Add a new pool. Can only be called by the owner."
      },
      "balance()": {
        "notice": "View function to see calculated balance of reward token."
      },
      "depositRewards(uint256)": {
        "notice": "Add rewards to the rewarder"
      },
      "emergencyWithdraw()": {
        "notice": "In case rewarder is stopped before emissions finished, this function allows withdrawal of remaining tokens."
      },
      "onSolarReward(uint256,address,uint256)": {
        "notice": "Function called by SolarDistributorV2 whenever staker claims SOLAR harvest. Allows staker to also receive a 2nd reward token."
      },
      "pendingBalance()": {
        "notice": "View function to see pending balance of reward token."
      },
      "pendingTokens(uint256,address)": {
        "notice": "View function to see pending tokens"
      },
      "poolInfo(uint256)": {
        "notice": "Info of each pool."
      },
      "poolRewardsPerSec(uint256)": {
        "notice": "View function to see pool rewards per sec"
      },
      "set(uint256,uint256)": {
        "notice": "Update the given pool's allocation point and `IRewarder` contract. Can only be called by the owner."
      },
      "setRewardRate(uint256)": {
        "notice": "Sets the distribution reward rate. This will also update the poolInfo."
      },
      "updatePool(uint256)": {
        "notice": "Update reward variables of the given pool."
      },
      "userInfo(uint256,address)": {
        "notice": "Info of each user that stakes LP tokens."
      }
    },
    "notice": "This is a sample contract to be used in the SolarDistributorV2 contract for partners to reward stakers with their native token alongside SOLAR. It assumes no minting rights, so requires a set amount of YOUR_TOKEN to be transferred to this contract prior. E.g. say you've allocated 100,000 XYZ to the SOLAR-XYZ farm over 30 days. Then you would need to transfer 100,000 XYZ and set the block reward accordingly so it's fully distributed after 30 days.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 375,
        "contract": "contracts/farm/v2/rewarders/ComplexRewarderPerSec.sol:ComplexRewarderPerSec",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 650,
        "contract": "contracts/farm/v2/rewarders/ComplexRewarderPerSec.sol:ComplexRewarderPerSec",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 12227,
        "contract": "contracts/farm/v2/rewarders/ComplexRewarderPerSec.sol:ComplexRewarderPerSec",
        "label": "poolInfo",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(PoolInfo)12221_storage)"
      },
      {
        "astId": 12230,
        "contract": "contracts/farm/v2/rewarders/ComplexRewarderPerSec.sol:ComplexRewarderPerSec",
        "label": "poolIds",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 12238,
        "contract": "contracts/farm/v2/rewarders/ComplexRewarderPerSec.sol:ComplexRewarderPerSec",
        "label": "userInfo",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)12214_storage))"
      },
      {
        "astId": 12242,
        "contract": "contracts/farm/v2/rewarders/ComplexRewarderPerSec.sol:ComplexRewarderPerSec",
        "label": "totalAllocPoint",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 12246,
        "contract": "contracts/farm/v2/rewarders/ComplexRewarderPerSec.sol:ComplexRewarderPerSec",
        "label": "totalRewards",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 12250,
        "contract": "contracts/farm/v2/rewarders/ComplexRewarderPerSec.sol:ComplexRewarderPerSec",
        "label": "totalDebt",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 12254,
        "contract": "contracts/farm/v2/rewarders/ComplexRewarderPerSec.sol:ComplexRewarderPerSec",
        "label": "totalDebtPaid",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 12257,
        "contract": "contracts/farm/v2/rewarders/ComplexRewarderPerSec.sol:ComplexRewarderPerSec",
        "label": "tokenPerSec",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(UserInfo)12214_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ComplexRewarderPerSec.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)12214_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)12214_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct ComplexRewarderPerSec.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)12214_storage)"
      },
      "t_mapping(t_uint256,t_struct(PoolInfo)12221_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ComplexRewarderPerSec.PoolInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolInfo)12221_storage"
      },
      "t_struct(PoolInfo)12221_storage": {
        "encoding": "inplace",
        "label": "struct ComplexRewarderPerSec.PoolInfo",
        "members": [
          {
            "astId": 12216,
            "contract": "contracts/farm/v2/rewarders/ComplexRewarderPerSec.sol:ComplexRewarderPerSec",
            "label": "accTokenPerShare",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 12218,
            "contract": "contracts/farm/v2/rewarders/ComplexRewarderPerSec.sol:ComplexRewarderPerSec",
            "label": "lastRewardTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 12220,
            "contract": "contracts/farm/v2/rewarders/ComplexRewarderPerSec.sol:ComplexRewarderPerSec",
            "label": "allocPoint",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(UserInfo)12214_storage": {
        "encoding": "inplace",
        "label": "struct ComplexRewarderPerSec.UserInfo",
        "members": [
          {
            "astId": 12211,
            "contract": "contracts/farm/v2/rewarders/ComplexRewarderPerSec.sol:ComplexRewarderPerSec",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 12213,
            "contract": "contracts/farm/v2/rewarders/ComplexRewarderPerSec.sol:ComplexRewarderPerSec",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}