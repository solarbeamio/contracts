{
  "address": "0xf84186b18c2Cc2354ce1aa8A5F9aCd763AA5a096",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_WETH",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountADesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBDesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenDesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETHMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidityETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETH",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "getAmountIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "getAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "getAmountsIn",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "getAmountsOut",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        }
      ],
      "name": "quote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETHMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETH",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETHMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityETHSupportingFeeOnTransferTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountETH",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETHMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "approveMax",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "removeLiquidityETHWithPermit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETH",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETHMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "approveMax",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountETH",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "approveMax",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "removeLiquidityWithPermit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapETHForExactTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactETHForTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactETHForTokensSupportingFeeOnTransferTokens",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForETH",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForETHSupportingFeeOnTransferTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForTokensSupportingFeeOnTransferTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapTokensForExactETH",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapTokensForExactTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x0dd58718c967b606d4b8a47cd332c346da42a8bea22de201b0208a82124c6e97",
  "receipt": {
    "to": null,
    "from": "0xf884c8774b09b3302f98e38C944eB352264024F8",
    "contractAddress": "0xf84186b18c2Cc2354ce1aa8A5F9aCd763AA5a096",
    "transactionIndex": 40,
    "gasUsed": "4722265",
    "logsBloom": "0x
    "blockHash": "0x9beedfdd1f801ee259ef4dcad6e09e82029d02222321757e5b6f912109f8a803",
    "transactionHash": "0x0dd58718c967b606d4b8a47cd332c346da42a8bea22de201b0208a82124c6e97",
    "logs": [],
    "blockNumber": 1061525,
    "cumulativeGasUsed": "5930389",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xEaD88f14C503E69d1064d6c36BAd69a89300f5F2",
    "0x98878B06940aE243284CA214f92Bb71a2b032B8A"
  ],
  "solcInputHash": "272f21c2e5768f8946aee12d982a113a",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidityETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"getAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"getAmountsIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityETHSupportingFeeOnTransferTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityETHWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityETHWithPermitSupportingFeeOnTransferTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapETHForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactETHForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactETHForTokensSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForETH\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForETHSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokensSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactETH\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/uniswapv2/SolarRouter02.sol\":\"SolarRouter02\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/uniswapv2/SolarRouter02.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity =0.6.12;\\r\\n\\r\\nimport './libraries/SolarLibrary.sol';\\r\\nimport './libraries/SafeMath.sol';\\r\\nimport './libraries/TransferHelper.sol';\\r\\nimport './interfaces/ISolarRouter02.sol';\\r\\nimport './interfaces/ISolarFactory.sol';\\r\\nimport './interfaces/IERC20.sol';\\r\\nimport './interfaces/IWETH.sol';\\r\\n\\r\\ncontract SolarRouter02 is ISolarRouter02 {\\r\\n    using SafeMathSolar for uint;\\r\\n\\r\\n    address public immutable override factory;\\r\\n    address public immutable override WETH;\\r\\n\\r\\n    modifier ensure(uint deadline) {\\r\\n        require(deadline >= block.timestamp, 'SolarRouter: EXPIRED');\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(address _factory, address _WETH) public {\\r\\n        factory = _factory;\\r\\n        WETH = _WETH;\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        assert(msg.sender == WETH); // only accept ETH via fallback from the WETH contract\\r\\n    }\\r\\n\\r\\n    // **** ADD LIQUIDITY ****\\r\\n    function _addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin\\r\\n    ) internal virtual returns (uint amountA, uint amountB) {\\r\\n        // create the pair if it doesn't exist yet\\r\\n        if (ISolarFactory(factory).getPair(tokenA, tokenB) == address(0)) {\\r\\n            ISolarFactory(factory).createPair(tokenA, tokenB);\\r\\n        }\\r\\n        (uint reserveA, uint reserveB) = SolarLibrary.getReserves(factory, tokenA, tokenB);\\r\\n        if (reserveA == 0 && reserveB == 0) {\\r\\n            (amountA, amountB) = (amountADesired, amountBDesired);\\r\\n        } else {\\r\\n            uint amountBOptimal = SolarLibrary.quote(amountADesired, reserveA, reserveB);\\r\\n            if (amountBOptimal <= amountBDesired) {\\r\\n                require(amountBOptimal >= amountBMin, 'SolarRouter: INSUFFICIENT_B_AMOUNT');\\r\\n                (amountA, amountB) = (amountADesired, amountBOptimal);\\r\\n            } else {\\r\\n                uint amountAOptimal = SolarLibrary.quote(amountBDesired, reserveB, reserveA);\\r\\n                assert(amountAOptimal <= amountADesired);\\r\\n                require(amountAOptimal >= amountAMin, 'SolarRouter: INSUFFICIENT_A_AMOUNT');\\r\\n                (amountA, amountB) = (amountAOptimal, amountBDesired);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external virtual override ensure(deadline) returns (uint amountA, uint amountB, uint liquidity) {\\r\\n        (amountA, amountB) = _addLiquidity(tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin);\\r\\n        address pair = SolarLibrary.pairFor(factory, tokenA, tokenB);\\r\\n        TransferHelper.safeTransferFrom(tokenA, msg.sender, pair, amountA);\\r\\n        TransferHelper.safeTransferFrom(tokenB, msg.sender, pair, amountB);\\r\\n        liquidity = ISolarPair(pair).mint(to);\\r\\n    }\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external virtual override payable ensure(deadline) returns (uint amountToken, uint amountETH, uint liquidity) {\\r\\n        (amountToken, amountETH) = _addLiquidity(\\r\\n            token,\\r\\n            WETH,\\r\\n            amountTokenDesired,\\r\\n            msg.value,\\r\\n            amountTokenMin,\\r\\n            amountETHMin\\r\\n        );\\r\\n        address pair = SolarLibrary.pairFor(factory, token, WETH);\\r\\n        TransferHelper.safeTransferFrom(token, msg.sender, pair, amountToken);\\r\\n        IWETH(WETH).deposit{value: amountETH}();\\r\\n        assert(IWETH(WETH).transfer(pair, amountETH));\\r\\n        liquidity = ISolarPair(pair).mint(to);\\r\\n        // refund dust eth, if any\\r\\n        if (msg.value > amountETH) TransferHelper.safeTransferETH(msg.sender, msg.value - amountETH);\\r\\n    }\\r\\n\\r\\n    // **** REMOVE LIQUIDITY ****\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) public virtual override ensure(deadline) returns (uint amountA, uint amountB) {\\r\\n        address pair = SolarLibrary.pairFor(factory, tokenA, tokenB);\\r\\n        ISolarPair(pair).transferFrom(msg.sender, pair, liquidity); // send liquidity to pair\\r\\n        (uint amount0, uint amount1) = ISolarPair(pair).burn(to);\\r\\n        (address token0,) = SolarLibrary.sortTokens(tokenA, tokenB);\\r\\n        (amountA, amountB) = tokenA == token0 ? (amount0, amount1) : (amount1, amount0);\\r\\n        require(amountA >= amountAMin, 'SolarRouter: INSUFFICIENT_A_AMOUNT');\\r\\n        require(amountB >= amountBMin, 'SolarRouter: INSUFFICIENT_B_AMOUNT');\\r\\n    }\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) public virtual override ensure(deadline) returns (uint amountToken, uint amountETH) {\\r\\n        (amountToken, amountETH) = removeLiquidity(\\r\\n            token,\\r\\n            WETH,\\r\\n            liquidity,\\r\\n            amountTokenMin,\\r\\n            amountETHMin,\\r\\n            address(this),\\r\\n            deadline\\r\\n        );\\r\\n        TransferHelper.safeTransfer(token, to, amountToken);\\r\\n        IWETH(WETH).withdraw(amountETH);\\r\\n        TransferHelper.safeTransferETH(to, amountETH);\\r\\n    }\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external virtual override returns (uint amountA, uint amountB) {\\r\\n        address pair = SolarLibrary.pairFor(factory, tokenA, tokenB);\\r\\n        uint value = approveMax ? uint(-1) : liquidity;\\r\\n        ISolarPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\\r\\n        (amountA, amountB) = removeLiquidity(tokenA, tokenB, liquidity, amountAMin, amountBMin, to, deadline);\\r\\n    }\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external virtual override returns (uint amountToken, uint amountETH) {\\r\\n        address pair = SolarLibrary.pairFor(factory, token, WETH);\\r\\n        uint value = approveMax ? uint(-1) : liquidity;\\r\\n        ISolarPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\\r\\n        (amountToken, amountETH) = removeLiquidityETH(token, liquidity, amountTokenMin, amountETHMin, to, deadline);\\r\\n    }\\r\\n\\r\\n    // **** REMOVE LIQUIDITY (supporting fee-on-transfer tokens) ****\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) public virtual override ensure(deadline) returns (uint amountETH) {\\r\\n        (, amountETH) = removeLiquidity(\\r\\n            token,\\r\\n            WETH,\\r\\n            liquidity,\\r\\n            amountTokenMin,\\r\\n            amountETHMin,\\r\\n            address(this),\\r\\n            deadline\\r\\n        );\\r\\n        TransferHelper.safeTransfer(token, to, IERC20Solar(token).balanceOf(address(this)));\\r\\n        IWETH(WETH).withdraw(amountETH);\\r\\n        TransferHelper.safeTransferETH(to, amountETH);\\r\\n    }\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external virtual override returns (uint amountETH) {\\r\\n        address pair = SolarLibrary.pairFor(factory, token, WETH);\\r\\n        uint value = approveMax ? uint(-1) : liquidity;\\r\\n        ISolarPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\\r\\n        amountETH = removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n            token, liquidity, amountTokenMin, amountETHMin, to, deadline\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // **** SWAP ****\\r\\n    // requires the initial amount to have already been sent to the first pair\\r\\n    function _swap(uint[] memory amounts, address[] memory path, address _to) internal virtual {\\r\\n        for (uint i; i < path.length - 1; i++) {\\r\\n            (address input, address output) = (path[i], path[i + 1]);\\r\\n            (address token0,) = SolarLibrary.sortTokens(input, output);\\r\\n            uint amountOut = amounts[i + 1];\\r\\n            (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOut) : (amountOut, uint(0));\\r\\n            address to = i < path.length - 2 ? SolarLibrary.pairFor(factory, output, path[i + 2]) : _to;\\r\\n            ISolarPair(SolarLibrary.pairFor(factory, input, output)).swap(\\r\\n                amount0Out, amount1Out, to, new bytes(0)\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external virtual override ensure(deadline) returns (uint[] memory amounts) {\\r\\n        uint fee = 25;\\r\\n        amounts = SolarLibrary.getAmountsOut(factory, amountIn, path, fee);\\r\\n        require(amounts[amounts.length - 1] >= amountOutMin, 'SolarRouter: INSUFFICIENT_OUTPUT_AMOUNT');\\r\\n        TransferHelper.safeTransferFrom(\\r\\n            path[0], msg.sender, SolarLibrary.pairFor(factory, path[0], path[1]), amounts[0]\\r\\n        );\\r\\n        _swap(amounts, path, to);\\r\\n    }\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external virtual override ensure(deadline) returns (uint[] memory amounts) {\\r\\n        uint fee = 25;\\r\\n        amounts = SolarLibrary.getAmountsIn(factory, amountOut, path, fee);\\r\\n        require(amounts[0] <= amountInMax, 'SolarRouter: EXCESSIVE_INPUT_AMOUNT');\\r\\n        TransferHelper.safeTransferFrom(\\r\\n            path[0], msg.sender, SolarLibrary.pairFor(factory, path[0], path[1]), amounts[0]\\r\\n        );\\r\\n        _swap(amounts, path, to);\\r\\n    }\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        virtual\\r\\n        override\\r\\n        payable\\r\\n        ensure(deadline)\\r\\n        returns (uint[] memory amounts)\\r\\n    {\\r\\n        require(path[0] == WETH, 'SolarRouter: INVALID_PATH');\\r\\n        uint fee = 25;\\r\\n        amounts = SolarLibrary.getAmountsOut(factory, msg.value, path, fee);\\r\\n        require(amounts[amounts.length - 1] >= amountOutMin, 'SolarRouter: INSUFFICIENT_OUTPUT_AMOUNT');\\r\\n        IWETH(WETH).deposit{value: amounts[0]}();\\r\\n        assert(IWETH(WETH).transfer(SolarLibrary.pairFor(factory, path[0], path[1]), amounts[0]));\\r\\n        _swap(amounts, path, to);\\r\\n    }\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        virtual\\r\\n        override\\r\\n        ensure(deadline)\\r\\n        returns (uint[] memory amounts)\\r\\n    {\\r\\n        require(path[path.length - 1] == WETH, 'SolarRouter: INVALID_PATH');\\r\\n        uint fee = 25;\\r\\n        amounts = SolarLibrary.getAmountsIn(factory, amountOut, path, fee);\\r\\n        require(amounts[0] <= amountInMax, 'SolarRouter: EXCESSIVE_INPUT_AMOUNT');\\r\\n        TransferHelper.safeTransferFrom(\\r\\n            path[0], msg.sender, SolarLibrary.pairFor(factory, path[0], path[1]), amounts[0]\\r\\n        );\\r\\n        _swap(amounts, path, address(this));\\r\\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\\r\\n        TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\\r\\n    }\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        virtual\\r\\n        override\\r\\n        ensure(deadline)\\r\\n        returns (uint[] memory amounts)\\r\\n    {\\r\\n        require(path[path.length - 1] == WETH, 'SolarRouter: INVALID_PATH');\\r\\n        uint fee = 25;\\r\\n        amounts = SolarLibrary.getAmountsOut(factory, amountIn, path, fee);\\r\\n        require(amounts[amounts.length - 1] >= amountOutMin, 'SolarRouter: INSUFFICIENT_OUTPUT_AMOUNT');\\r\\n        TransferHelper.safeTransferFrom(\\r\\n            path[0], msg.sender, SolarLibrary.pairFor(factory, path[0], path[1]), amounts[0]\\r\\n        );\\r\\n        _swap(amounts, path, address(this));\\r\\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\\r\\n        TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\\r\\n    }\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        virtual\\r\\n        override\\r\\n        payable\\r\\n        ensure(deadline)\\r\\n        returns (uint[] memory amounts)\\r\\n    {\\r\\n        require(path[0] == WETH, 'SolarRouter: INVALID_PATH');\\r\\n        uint fee = 25;\\r\\n        amounts = SolarLibrary.getAmountsIn(factory, amountOut, path, fee);\\r\\n        require(amounts[0] <= msg.value, 'SolarRouter: EXCESSIVE_INPUT_AMOUNT');\\r\\n        IWETH(WETH).deposit{value: amounts[0]}();\\r\\n        assert(IWETH(WETH).transfer(SolarLibrary.pairFor(factory, path[0], path[1]), amounts[0]));\\r\\n        _swap(amounts, path, to);\\r\\n        // refund dust eth, if any\\r\\n        if (msg.value > amounts[0]) TransferHelper.safeTransferETH(msg.sender, msg.value - amounts[0]);\\r\\n    }\\r\\n\\r\\n    // **** SWAP (supporting fee-on-transfer tokens) ****\\r\\n    // requires the initial amount to have already been sent to the first pair\\r\\n    function _swapSupportingFeeOnTransferTokens(address[] memory path, address _to) internal virtual {\\r\\n        for (uint i; i < path.length - 1; i++) {\\r\\n            (address input, address output) = (path[i], path[i + 1]);\\r\\n            (address token0,) = SolarLibrary.sortTokens(input, output);\\r\\n            ISolarPair pair = ISolarPair(SolarLibrary.pairFor(factory, input, output));\\r\\n            uint amountInput;\\r\\n            uint amountOutput;\\r\\n\\r\\n            { // scope to avoid stack too deep errors\\r\\n                (uint reserve0, uint reserve1,) = pair.getReserves();\\r\\n                (uint reserveInput, uint reserveOutput) = input == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\r\\n                uint fee = 25;\\r\\n                amountInput = IERC20Solar(input).balanceOf(address(pair)).sub(reserveInput);\\r\\n                amountOutput = SolarLibrary.getAmountOut(amountInput, reserveInput, reserveOutput, fee);\\r\\n            }\\r\\n\\r\\n            (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOutput) : (amountOutput, uint(0));\\r\\n            address to = i < path.length - 2 ? SolarLibrary.pairFor(factory, output, path[i + 2]) : _to;\\r\\n            pair.swap(amount0Out, amount1Out, to, new bytes(0));\\r\\n        }\\r\\n    }\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external virtual override ensure(deadline) {\\r\\n        TransferHelper.safeTransferFrom(\\r\\n            path[0], msg.sender, SolarLibrary.pairFor(factory, path[0], path[1]), amountIn\\r\\n        );\\r\\n        uint balanceBefore = IERC20Solar(path[path.length - 1]).balanceOf(to);\\r\\n        _swapSupportingFeeOnTransferTokens(path, to);\\r\\n        require(\\r\\n            IERC20Solar(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin,\\r\\n            'SolarRouter: INSUFFICIENT_OUTPUT_AMOUNT'\\r\\n        );\\r\\n    }\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    )\\r\\n        external\\r\\n        virtual\\r\\n        override\\r\\n        payable\\r\\n        ensure(deadline)\\r\\n    {\\r\\n        require(path[0] == WETH, 'SolarRouter: INVALID_PATH');\\r\\n        uint amountIn = msg.value;\\r\\n        IWETH(WETH).deposit{value: amountIn}();\\r\\n        assert(IWETH(WETH).transfer(SolarLibrary.pairFor(factory, path[0], path[1]), amountIn));\\r\\n        uint balanceBefore = IERC20Solar(path[path.length - 1]).balanceOf(to);\\r\\n        _swapSupportingFeeOnTransferTokens(path, to);\\r\\n        require(\\r\\n            IERC20Solar(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin,\\r\\n            'SolarRouter: INSUFFICIENT_OUTPUT_AMOUNT'\\r\\n        );\\r\\n    }\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    )\\r\\n        external\\r\\n        virtual\\r\\n        override\\r\\n        ensure(deadline)\\r\\n    {\\r\\n        require(path[path.length - 1] == WETH, 'SolarRouter: INVALID_PATH');\\r\\n        TransferHelper.safeTransferFrom(\\r\\n            path[0], msg.sender, SolarLibrary.pairFor(factory, path[0], path[1]), amountIn\\r\\n        );\\r\\n        _swapSupportingFeeOnTransferTokens(path, address(this));\\r\\n        uint amountOut = IERC20Solar(WETH).balanceOf(address(this));\\r\\n        require(amountOut >= amountOutMin, 'SolarRouter: INSUFFICIENT_OUTPUT_AMOUNT');\\r\\n        IWETH(WETH).withdraw(amountOut);\\r\\n        TransferHelper.safeTransferETH(to, amountOut);\\r\\n    }\\r\\n\\r\\n    // **** LIBRARY FUNCTIONS ****\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) public pure virtual override returns (uint amountB) {\\r\\n        return SolarLibrary.quote(amountA, reserveA, reserveB);\\r\\n    }\\r\\n\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut, uint fee)\\r\\n        public\\r\\n        pure\\r\\n        virtual\\r\\n        override\\r\\n        returns (uint amountOut)\\r\\n    {\\r\\n        return SolarLibrary.getAmountOut(amountIn, reserveIn, reserveOut, fee);\\r\\n    }\\r\\n\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut, uint fee)\\r\\n        public\\r\\n        pure\\r\\n        virtual\\r\\n        override\\r\\n        returns (uint amountIn)\\r\\n    {\\r\\n        return SolarLibrary.getAmountIn(amountOut, reserveIn, reserveOut, fee);\\r\\n    }\\r\\n\\r\\n    function getAmountsOut(uint amountIn, address[] memory path, uint fee)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (uint[] memory amounts)\\r\\n    {\\r\\n        return SolarLibrary.getAmountsOut(factory, amountIn, path, fee);\\r\\n    }\\r\\n\\r\\n    function getAmountsIn(uint amountOut, address[] memory path, uint fee)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (uint[] memory amounts)\\r\\n    {\\r\\n        return SolarLibrary.getAmountsIn(factory, amountOut, path, fee);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x86c174d8fcfc144109ae8146f1d6e3964c39d3f11253387991bbff9efe2a128f\",\"license\":\"GPL-3.0\"},\"contracts/uniswapv2/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity =0.6.12;\\r\\n\\r\\ninterface IERC20Solar {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n    function symbol() external view returns (string memory);\\r\\n    function decimals() external view returns (uint8);\\r\\n    function totalSupply() external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x23992a54f9b87ad0529d830703c5f1804614e26f4cbee2d5af3c33a4a35dfa0f\",\"license\":\"GPL-3.0\"},\"contracts/uniswapv2/interfaces/ISolarFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity =0.6.12;\\r\\n\\r\\ninterface ISolarFactory {\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n    function feeToSetter() external view returns (address);\\r\\n    function migrator() external view returns (address);\\r\\n    function auro() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n    function allPairs(uint) external view returns (address pair);\\r\\n    function allPairsLength() external view returns (uint);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n    function setFeeToSetter(address) external;\\r\\n    function setMigrator(address) external;\\r\\n    function setAuroAddress(address) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x92eabc68c42b28d04300386e704510970e75596ea718211b3543801e0fa523fa\",\"license\":\"GPL-3.0\"},\"contracts/uniswapv2/interfaces/ISolarPair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity =0.6.12;\\r\\n\\r\\ninterface ISolarPair {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n    function symbol() external pure returns (string memory);\\r\\n    function decimals() external pure returns (uint8);\\r\\n    function totalSupply() external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n    function nonces(address owner) external view returns (uint);\\r\\n\\r\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint amount0In,\\r\\n        uint amount1In,\\r\\n        uint amount0Out,\\r\\n        uint amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n    function factory() external view returns (address);\\r\\n    function token0() external view returns (address);\\r\\n    function token1() external view returns (address);\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n    function price0CumulativeLast() external view returns (uint);\\r\\n    function price1CumulativeLast() external view returns (uint);\\r\\n    function kLast() external view returns (uint);\\r\\n\\r\\n    function mint(address to) external returns (uint liquidity);\\r\\n    function burn(address to) external returns (uint amount0, uint amount1);\\r\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n    function skim(address to) external;\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\",\"keccak256\":\"0xbb1110af424c4f300d584c2f394606cf3dc5deb604c3c6609660c1c7f0af7879\",\"license\":\"GPL-3.0\"},\"contracts/uniswapv2/interfaces/ISolarRouter01.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity =0.6.12;\\r\\n\\r\\ninterface ISolarRouter01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut, uint fee) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut, uint fee) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path, uint fee) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path, uint fee) external view returns (uint[] memory amounts);\\r\\n}\",\"keccak256\":\"0x32f2137182906bf167a1ce552692e48adc88a0ccc0435a08ab3e0d293b06f268\",\"license\":\"GPL-3.0\"},\"contracts/uniswapv2/interfaces/ISolarRouter02.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity =0.6.12;\\r\\n\\r\\nimport './ISolarRouter01.sol';\\r\\n\\r\\ninterface ISolarRouter02 is ISolarRouter01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\",\"keccak256\":\"0xfdc060e52a597035214067abb5670f547724f53d5e945efc85a15c3796ec1b7b\",\"license\":\"GPL-3.0\"},\"contracts/uniswapv2/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity =0.6.12;\\r\\n\\r\\ninterface IWETH {\\r\\n    function deposit() external payable;\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function withdraw(uint) external;\\r\\n}\",\"keccak256\":\"0x446f0d376fb063184ac780a6d55efedcc3afe61b4c749f651e0cc68ff3ea8cd7\",\"license\":\"GPL-3.0\"},\"contracts/uniswapv2/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity =0.6.12;\\r\\n\\r\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\r\\n\\r\\nlibrary SafeMathSolar {\\r\\n    function add(uint x, uint y) internal pure returns (uint z) {\\r\\n        require((z = x + y) >= x, 'ds-math-add-overflow');\\r\\n    }\\r\\n\\r\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\r\\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\\r\\n    }\\r\\n\\r\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\r\\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe1f86b712294e3f2c1a25b66ea3b0db81c2ba48e628f659853a43a233e70323f\",\"license\":\"GPL-3.0\"},\"contracts/uniswapv2/libraries/SolarLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity =0.6.12;\\r\\n\\r\\nimport '../interfaces/ISolarPair.sol';\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\nlibrary SolarLibrary {\\r\\n    using SafeMathSolar for uint;\\r\\n\\r\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\r\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\r\\n        require(tokenA != tokenB, 'SolarLibrary: IDENTICAL_ADDRESSES');\\r\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\r\\n        require(token0 != address(0), 'SolarLibrary: ZERO_ADDRESS');\\r\\n    }\\r\\n\\r\\n    // calculates the CREATE2 address for a pair without making any external calls\\r\\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\\r\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\r\\n        pair = address(uint(keccak256(abi.encodePacked(\\r\\n                hex'ff',\\r\\n                factory,\\r\\n                keccak256(abi.encodePacked(token0, token1)),\\r\\n                hex'9a100ded5f254443fbd264cb7e87831e398a8b642e061670a9bc35ba27293dbf' // init code hash\\r\\n            ))));\\r\\n    }\\r\\n\\r\\n    // fetches and sorts the reserves for a pair\\r\\n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\\r\\n        (address token0,) = sortTokens(tokenA, tokenB);\\r\\n        (uint reserve0, uint reserve1,) = ISolarPair(pairFor(factory, tokenA, tokenB)).getReserves();\\r\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\r\\n    }\\r\\n\\r\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\\r\\n        require(amountA > 0, 'SolarLibrary: INSUFFICIENT_AMOUNT');\\r\\n        require(reserveA > 0 && reserveB > 0, 'SolarLibrary: INSUFFICIENT_LIQUIDITY');\\r\\n        amountB = amountA.mul(reserveB) / reserveA;\\r\\n    }\\r\\n\\r\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut, uint fee) internal pure returns (uint amountOut) {\\r\\n        require(amountIn > 0, 'SolarLibrary: INSUFFICIENT_INPUT_AMOUNT');\\r\\n        require(reserveIn > 0 && reserveOut > 0, 'SolarLibrary: INSUFFICIENT_LIQUIDITY');\\r\\n        uint feeMul = uint(10000).sub(fee);\\r\\n        uint amountInWithFee = amountIn.mul(feeMul);\\r\\n        uint numerator = amountInWithFee.mul(reserveOut);\\r\\n        uint denominator = reserveIn.mul(10000).add(amountInWithFee);\\r\\n        amountOut = numerator / denominator;\\r\\n    }\\r\\n\\r\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut, uint fee) internal pure returns (uint amountIn) {\\r\\n        require(amountOut > 0, 'SolarLibrary: INSUFFICIENT_OUTPUT_AMOUNT');\\r\\n        require(reserveIn > 0 && reserveOut > 0, 'SolarLibrary: INSUFFICIENT_LIQUIDITY');\\r\\n        uint feeMul = uint(10000).sub(fee);\\r\\n        uint numerator = reserveIn.mul(amountOut).mul(10000);\\r\\n        uint denominator = reserveOut.sub(amountOut).mul(feeMul);\\r\\n        amountIn = (numerator / denominator).add(1);\\r\\n    }\\r\\n\\r\\n    // performs chained getAmountOut calculations on any number of pairs\\r\\n    function getAmountsOut(address factory, uint amountIn, address[] memory path, uint fee) internal view returns (uint[] memory amounts) {\\r\\n        require(path.length >= 2, 'SolarLibrary: INVALID_PATH');\\r\\n        amounts = new uint[](path.length);\\r\\n        amounts[0] = amountIn;\\r\\n        for (uint i; i < path.length - 1; i++) {\\r\\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\\r\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut, fee);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // performs chained getAmountIn calculations on any number of pairs\\r\\n    function getAmountsIn(address factory, uint amountOut, address[] memory path, uint fee) internal view returns (uint[] memory amounts) {\\r\\n        require(path.length >= 2, 'SolarLibrary: INVALID_PATH');\\r\\n        amounts = new uint[](path.length);\\r\\n        amounts[amounts.length - 1] = amountOut;\\r\\n        for (uint i = path.length - 1; i > 0; i--) {\\r\\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\\r\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut, fee);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2c37c042cf296a6b95b828c3263b11356336f30e6a6c167312651c4111bcb3ad\",\"license\":\"GPL-3.0\"},\"contracts/uniswapv2/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity =0.6.12;\\r\\n\\r\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\r\\nlibrary TransferHelper {\\r\\n    function safeApprove(address token, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\r\\n    }\\r\\n\\r\\n    function safeTransfer(address token, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\r\\n    }\\r\\n\\r\\n    function safeTransferETH(address to, uint value) internal {\\r\\n        (bool success,) = to.call{value:value}(new bytes(0));\\r\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x01b3100d3b2ca589013a1c2c39cf0161ca12dde0f96c62394e099daecd760669\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b50604051620056a0380380620056a0833981810160405260408110156200003757600080fd5b5080516020909101516001600160601b0319606092831b8116608052911b1660a05260805160601c60a05160601c61551962000187600039806101ac5280610e6d5280610ea85280610fd0528061129b52806116fe528061190f5280611e255280611f6452806120725280612179528061233452806123c9528061268b52806127325280612800528061291052806129f85280612a79528061309952806133e7528061343d528061347152806134f252806136e05280613898528061392d5250806110c852806111c852806113725280611523528061164652806117f652806118ed5280611ada5280612265528061240852806125bf5280612ab85280612db9528061304b528061307752806131cc5280613282528061341b52806137cc528061396c52806142b352806142f652806148795280614a4c5280614e695280614f56528061503052506155196000f3fe60806040526004361061018f5760003560e01c80638803dbee116100d6578063c45a01551161007f578063e8e3370011610059578063e8e3370014610c81578063f305d71914610d0e578063fb3bdb4114610d61576101d5565b8063c45a015514610b33578063ded9382a14610b48578063e815c46614610bc8576101d5565b8063af2979eb116100b0578063af2979eb146109d6578063b6f9de9514610a36578063baa2abde14610ac9576101d5565b80638803dbee146108bd578063ad5c464814610962578063ad615dec146109a0576101d5565b806352707d8c116101385780635c11d795116101125780635c11d795146106e0578063791ac947146107855780637ff36ab51461082a576101d5565b806352707d8c146105d6578063571fd012146106245780635b0d598414610660576101d5565b806338ed17391161016957806338ed1739146103d35780634955796c146104785780634a25d94a14610531576101d5565b806302751cec146101da57806318cbafe5146102535780632195995c14610348576101d5565b366101d5573373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146101d357fe5b005b600080fd5b3480156101e657600080fd5b5061023a600480360360c08110156101fd57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135916040820135916060810135916080820135169060a00135610df4565b6040805192835260208301919091528051918290030190f35b34801561025f57600080fd5b506102f8600480360360a081101561027657600080fd5b81359160208101359181019060608101604082013564010000000081111561029d57600080fd5b8201836020820111156102af57600080fd5b803590602001918460208302840111640100000000831117156102d157600080fd5b919350915073ffffffffffffffffffffffffffffffffffffffff8135169060200135610f47565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561033457818101518382015260200161031c565b505050509050019250505060405180910390f35b34801561035457600080fd5b5061023a600480360361016081101561036c57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013582169160408201359160608101359160808201359160a08101359091169060c08101359060e081013515159060ff6101008201351690610120810135906101400135611368565b3480156103df57600080fd5b506102f8600480360360a08110156103f657600080fd5b81359160208101359181019060608101604082013564010000000081111561041d57600080fd5b82018360208201111561042f57600080fd5b8035906020019184602083028401116401000000008311171561045157600080fd5b919350915073ffffffffffffffffffffffffffffffffffffffff81351690602001356114a6565b34801561048457600080fd5b506102f86004803603606081101561049b57600080fd5b813591908101906040810160208201356401000000008111156104bd57600080fd5b8201836020820111156104cf57600080fd5b803590602001918460208302840111640100000000831117156104f157600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550509135925061163f915050565b34801561053d57600080fd5b506102f8600480360360a081101561055457600080fd5b81359160208101359181019060608101604082013564010000000081111561057b57600080fd5b82018360208201111561058d57600080fd5b803590602001918460208302840111640100000000831117156105af57600080fd5b919350915073ffffffffffffffffffffffffffffffffffffffff8135169060200135611675565b3480156105e257600080fd5b50610612600480360360808110156105f957600080fd5b50803590602081013590604081013590606001356118c0565b60408051918252519081900360200190f35b34801561063057600080fd5b506106126004803603608081101561064757600080fd5b50803590602081013590604081013590606001356118d7565b34801561066c57600080fd5b50610612600480360361014081101561068457600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135916040820135916060810135916080820135169060a08101359060c081013515159060ff60e082013516906101008101359061012001356118e5565b3480156106ec57600080fd5b506101d3600480360360a081101561070357600080fd5b81359160208101359181019060608101604082013564010000000081111561072a57600080fd5b82018360208201111561073c57600080fd5b8035906020019184602083028401116401000000008311171561075e57600080fd5b919350915073ffffffffffffffffffffffffffffffffffffffff8135169060200135611a37565b34801561079157600080fd5b506101d3600480360360a08110156107a857600080fd5b8135916020810135918101906060810160408201356401000000008111156107cf57600080fd5b8201836020820111156107e157600080fd5b8035906020019184602083028401116401000000008311171561080357600080fd5b919350915073ffffffffffffffffffffffffffffffffffffffff8135169060200135611d9e565b6102f86004803603608081101561084057600080fd5b8135919081019060408101602082013564010000000081111561086257600080fd5b82018360208201111561087457600080fd5b8035906020019184602083028401116401000000008311171561089657600080fd5b919350915073ffffffffffffffffffffffffffffffffffffffff8135169060200135612105565b3480156108c957600080fd5b506102f8600480360360a08110156108e057600080fd5b81359160208101359181019060608101604082013564010000000081111561090757600080fd5b82018360208201111561091957600080fd5b8035906020019184602083028401116401000000008311171561093b57600080fd5b919350915073ffffffffffffffffffffffffffffffffffffffff8135169060200135612542565b34801561096e57600080fd5b50610977612689565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b3480156109ac57600080fd5b50610612600480360360608110156109c357600080fd5b50803590602081013590604001356126ad565b3480156109e257600080fd5b50610612600480360360c08110156109f957600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135916040820135916060810135916080820135169060a001356126ba565b6101d360048036036080811015610a4c57600080fd5b81359190810190604081016020820135640100000000811115610a6e57600080fd5b820183602082011115610a8057600080fd5b80359060200191846020830284011164010000000083111715610aa257600080fd5b919350915073ffffffffffffffffffffffffffffffffffffffff813516906020013561289e565b348015610ad557600080fd5b5061023a600480360360e0811015610aec57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013582169160408201359160608101359160808201359160a08101359091169060c00135612d3f565b348015610b3f57600080fd5b50610977613049565b348015610b5457600080fd5b5061023a6004803603610140811015610b6c57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135916040820135916060810135916080820135169060a08101359060c081013515159060ff60e0820135169061010081013590610120013561306d565b348015610bd457600080fd5b506102f860048036036060811015610beb57600080fd5b81359190810190604081016020820135640100000000811115610c0d57600080fd5b820183602082011115610c1f57600080fd5b80359060200191846020830284011164010000000083111715610c4157600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955050913592506131c5915050565b348015610c8d57600080fd5b50610cf06004803603610100811015610ca557600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013582169160408201359160608101359160808201359160a08101359160c0820135169060e001356131f3565b60408051938452602084019290925282820152519081900360600190f35b610cf0600480360360c0811015610d2457600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135916040820135916060810135916080820135169060a0013561336c565b6102f860048036036080811015610d7757600080fd5b81359190810190604081016020820135640100000000811115610d9957600080fd5b820183602082011115610dab57600080fd5b80359060200191846020830284011164010000000083111715610dcd57600080fd5b919350915073ffffffffffffffffffffffffffffffffffffffff813516906020013561366c565b6000808242811015610e6757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f536f6c6172526f757465723a2045585049524544000000000000000000000000604482015290519081900360640190fd5b610e96897f00000000000000000000000000000000000000000000000000000000000000008a8a8a308a612d3f565b9093509150610ea6898685613aad565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d836040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015610f1957600080fd5b505af1158015610f2d573d6000803e3d6000fd5b50505050610f3b8583613c8a565b50965096945050505050565b60608142811015610fb957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f536f6c6172526f757465723a2045585049524544000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001686867fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810181811061101e57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146110bd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f536f6c6172526f757465723a20494e56414c49445f5041544800000000000000604482015290519081900360640190fd5b6000601990506111237f00000000000000000000000000000000000000000000000000000000000000008a898980806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250879250613dc7915050565b9250878360018551038151811061113657fe5b60200260200101511015611195576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602781526020018061542f6027913960400191505060405180910390fd5b61125a878760008181106111a557fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff16336112407f00000000000000000000000000000000000000000000000000000000000000008b8b60008181106111f457fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168c8c600181811061121e57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff16613f2f565b8660008151811061124d57fe5b602002602001015161401a565b611299838888808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152503092506141ea915050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d846001865103815181106112e557fe5b60200260200101516040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561132357600080fd5b505af1158015611337573d6000803e3d6000fd5b5050505061135c858460018651038151811061134f57fe5b6020026020010151613c8a565b50509695505050505050565b60008060006113987f00000000000000000000000000000000000000000000000000000000000000008f8f613f2f565b90506000876113a7578c6113c9565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b604080517fd505accf00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101839052606481018c905260ff8a16608482015260a4810189905260c48101889052905191925073ffffffffffffffffffffffffffffffffffffffff84169163d505accf9160e48082019260009290919082900301818387803b15801561146557600080fd5b505af1158015611479573d6000803e3d6000fd5b5050505061148c8f8f8f8f8f8f8f612d3f565b809450819550505050509b509b9950505050505050505050565b6060814281101561151857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f536f6c6172526f757465723a2045585049524544000000000000000000000000604482015290519081900360640190fd5b60006019905061157e7f00000000000000000000000000000000000000000000000000000000000000008a898980806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250879250613dc7915050565b9250878360018551038151811061159157fe5b602002602001015110156115f0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602781526020018061542f6027913960400191505060405180910390fd5b611600878760008181106111a557fe5b61135c838888808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508a92506141ea915050565b606061166d7f0000000000000000000000000000000000000000000000000000000000000000858585613dc7565b949350505050565b606081428110156116e757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f536f6c6172526f757465723a2045585049524544000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001686867fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810181811061174c57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146117eb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f536f6c6172526f757465723a20494e56414c49445f5041544800000000000000604482015290519081900360640190fd5b6000601990506118517f00000000000000000000000000000000000000000000000000000000000000008a89898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525087925061445b915050565b9250878360008151811061186157fe5b60200260200101511115611195576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806154c16023913960400191505060405180910390fd5b60006118ce858585856145ea565b95945050505050565b60006118ce85858585614706565b6000806119337f00000000000000000000000000000000000000000000000000000000000000008d7f0000000000000000000000000000000000000000000000000000000000000000613f2f565b9050600086611942578b611964565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b604080517fd505accf00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101839052606481018b905260ff8916608482015260a4810188905260c48101879052905191925073ffffffffffffffffffffffffffffffffffffffff84169163d505accf9160e48082019260009290919082900301818387803b158015611a0057600080fd5b505af1158015611a14573d6000803e3d6000fd5b50505050611a268d8d8d8d8d8d6126ba565b9d9c50505050505050505050505050565b8042811015611aa757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f536f6c6172526f757465723a2045585049524544000000000000000000000000604482015290519081900360640190fd5b611b3685856000818110611ab757fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1633611b307f000000000000000000000000000000000000000000000000000000000000000089896000818110611b0657fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168a8a600181811061121e57fe5b8a61401a565b600085857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101818110611b6657fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611be957600080fd5b505afa158015611bfd573d6000803e3d6000fd5b505050506040513d6020811015611c1357600080fd5b50516040805160208881028281018201909352888252929350611c55929091899189918291850190849080828437600092019190915250889250614822915050565b86611d3d8288887fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101818110611c8857fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231886040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611d0b57600080fd5b505afa158015611d1f573d6000803e3d6000fd5b505050506040513d6020811015611d3557600080fd5b505190614ba7565b1015611d94576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602781526020018061542f6027913960400191505060405180910390fd5b5050505050505050565b8042811015611e0e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f536f6c6172526f757465723a2045585049524544000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001685857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101818110611e7357fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611f1257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f536f6c6172526f757465723a20494e56414c49445f5041544800000000000000604482015290519081900360640190fd5b611f2285856000818110611ab757fe5b611f60858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250309250614822915050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611fe957600080fd5b505afa158015611ffd573d6000803e3d6000fd5b505050506040513d602081101561201357600080fd5b5051905086811015612070576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602781526020018061542f6027913960400191505060405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156120e357600080fd5b505af11580156120f7573d6000803e3d6000fd5b50505050611d948482613c8a565b6060814281101561217757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f536f6c6172526f757465723a2045585049524544000000000000000000000000604482015290519081900360640190fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16868660008181106121bb57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461225a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f536f6c6172526f757465723a20494e56414c49445f5041544800000000000000604482015290519081900360640190fd5b6000601990506122c07f000000000000000000000000000000000000000000000000000000000000000034898980806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250879250613dc7915050565b925087836001855103815181106122d357fe5b60200260200101511015612332576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602781526020018061542f6027913960400191505060405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db08460008151811061237b57fe5b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b1580156123ae57600080fd5b505af11580156123c2573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb61245e7f00000000000000000000000000000000000000000000000000000000000000008a8a600081811061243457fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168b8b600181811061121e57fe5b8560008151811061246b57fe5b60200260200101516040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156124c657600080fd5b505af11580156124da573d6000803e3d6000fd5b505050506040513d60208110156124f057600080fd5b50516124f857fe5b612537838888808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508a92506141ea915050565b505095945050505050565b606081428110156125b457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f536f6c6172526f757465723a2045585049524544000000000000000000000000604482015290519081900360640190fd5b60006019905061261a7f00000000000000000000000000000000000000000000000000000000000000008a89898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525087925061445b915050565b9250878360008151811061262a57fe5b602002602001015111156115f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806154c16023913960400191505060405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000081565b600061166d848484614c1f565b6000814281101561272c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f536f6c6172526f757465723a2045585049524544000000000000000000000000604482015290519081900360640190fd5b61275b887f00000000000000000000000000000000000000000000000000000000000000008989893089612d3f565b9050809250506127fe88858a73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156127cd57600080fd5b505afa1580156127e1573d6000803e3d6000fd5b505050506040513d60208110156127f757600080fd5b5051613aad565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d836040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561287157600080fd5b505af1158015612885573d6000803e3d6000fd5b505050506128938483613c8a565b509695505050505050565b804281101561290e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f536f6c6172526f757465723a2045585049524544000000000000000000000000604482015290519081900360640190fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168585600081811061295257fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146129f157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f536f6c6172526f757465723a20494e56414c49445f5041544800000000000000604482015290519081900360640190fd5b60003490507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015612a5e57600080fd5b505af1158015612a72573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb612ae47f000000000000000000000000000000000000000000000000000000000000000089896000818110611b0657fe5b836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015612b3857600080fd5b505af1158015612b4c573d6000803e3d6000fd5b505050506040513d6020811015612b6257600080fd5b5051612b6a57fe5b600086867fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101818110612b9a57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231866040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015612c1d57600080fd5b505afa158015612c31573d6000803e3d6000fd5b505050506040513d6020811015612c4757600080fd5b50516040805160208981028281018201909352898252929350612c899290918a918a918291850190849080828437600092019190915250899250614822915050565b87611d3d8289897fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101818110612cbc57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231896040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611d0b57600080fd5b6000808242811015612db257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f536f6c6172526f757465723a2045585049524544000000000000000000000000604482015290519081900360640190fd5b6000612ddf7f00000000000000000000000000000000000000000000000000000000000000008c8c613f2f565b604080517f23b872dd00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff831660248201819052604482018d9052915192935090916323b872dd916064808201926020929091908290030181600087803b158015612e6057600080fd5b505af1158015612e74573d6000803e3d6000fd5b505050506040513d6020811015612e8a57600080fd5b5050604080517f89afcb4400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff888116600483015282516000938493928616926389afcb44926024808301939282900301818787803b158015612efd57600080fd5b505af1158015612f11573d6000803e3d6000fd5b505050506040513d6040811015612f2757600080fd5b50805160209091015190925090506000612f418e8e614cf9565b5090508073ffffffffffffffffffffffffffffffffffffffff168e73ffffffffffffffffffffffffffffffffffffffff1614612f7e578183612f81565b82825b90975095508a871015612fdf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806153ec6022913960400191505060405180910390fd5b89861015613038576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806153ca6022913960400191505060405180910390fd5b505050505097509795505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008060006130bd7f00000000000000000000000000000000000000000000000000000000000000008e7f0000000000000000000000000000000000000000000000000000000000000000613f2f565b90506000876130cc578c6130ee565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b604080517fd505accf00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101839052606481018c905260ff8a16608482015260a4810189905260c48101889052905191925073ffffffffffffffffffffffffffffffffffffffff84169163d505accf9160e48082019260009290919082900301818387803b15801561318a57600080fd5b505af115801561319e573d6000803e3d6000fd5b505050506131b08e8e8e8e8e8e610df4565b909f909e509c50505050505050505050505050565b606061166d7f000000000000000000000000000000000000000000000000000000000000000085858561445b565b6000806000834281101561326857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f536f6c6172526f757465723a2045585049524544000000000000000000000000604482015290519081900360640190fd5b6132768c8c8c8c8c8c614e4c565b909450925060006132a87f00000000000000000000000000000000000000000000000000000000000000008e8e613f2f565b90506132b68d33838861401a565b6132c28c33838761401a565b8073ffffffffffffffffffffffffffffffffffffffff16636a627842886040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561332b57600080fd5b505af115801561333f573d6000803e3d6000fd5b505050506040513d602081101561335557600080fd5b5051949d939c50939a509198505050505050505050565b600080600083428110156133e157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f536f6c6172526f757465723a2045585049524544000000000000000000000000604482015290519081900360640190fd5b61340f8a7f00000000000000000000000000000000000000000000000000000000000000008b348c8c614e4c565b909450925060006134617f00000000000000000000000000000000000000000000000000000000000000008c7f0000000000000000000000000000000000000000000000000000000000000000613f2f565b905061346f8b33838861401a565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0856040518263ffffffff1660e01b81526004016000604051808303818588803b1580156134d757600080fd5b505af11580156134eb573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb82866040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561358157600080fd5b505af1158015613595573d6000803e3d6000fd5b505050506040513d60208110156135ab57600080fd5b50516135b357fe5b8073ffffffffffffffffffffffffffffffffffffffff16636a627842886040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561361c57600080fd5b505af1158015613630573d6000803e3d6000fd5b505050506040513d602081101561364657600080fd5b505192503484101561365e5761365e33853403613c8a565b505096509650969350505050565b606081428110156136de57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f536f6c6172526f757465723a2045585049524544000000000000000000000000604482015290519081900360640190fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168686600081811061372257fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146137c157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f536f6c6172526f757465723a20494e56414c49445f5041544800000000000000604482015290519081900360640190fd5b6000601990506138277f00000000000000000000000000000000000000000000000000000000000000008989898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525087925061445b915050565b9250348360008151811061383757fe5b60200260200101511115613896576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806154c16023913960400191505060405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0846000815181106138df57fe5b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b15801561391257600080fd5b505af1158015613926573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6139987f00000000000000000000000000000000000000000000000000000000000000008a8a600081811061243457fe5b856000815181106139a557fe5b60200260200101516040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015613a0057600080fd5b505af1158015613a14573d6000803e3d6000fd5b505050506040513d6020811015613a2a57600080fd5b5051613a3257fe5b613a71838888808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508a92506141ea915050565b82600081518110613a7e57fe5b6020026020010151341115612537576125373384600081518110613a9e57fe5b60200260200101513403613c8a565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000178152925182516000946060949389169392918291908083835b60208310613b8357805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101613b46565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114613be5576040519150601f19603f3d011682016040523d82523d6000602084013e613bea565b606091505b5091509150818015613c18575080511580613c185750808060200190516020811015613c1557600080fd5b50515b613c8357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c454400604482015290519081900360640190fd5b5050505050565b6040805160008082526020820190925273ffffffffffffffffffffffffffffffffffffffff84169083906040518082805190602001908083835b60208310613d0157805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101613cc4565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114613d63576040519150601f19603f3d011682016040523d82523d6000602084013e613d68565b606091505b5050905080613dc2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602381526020018061547a6023913960400191505060405180910390fd5b505050565b6060600283511015613e3a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f536f6c61724c6962726172793a20494e56414c49445f50415448000000000000604482015290519081900360640190fd5b825167ffffffffffffffff81118015613e5257600080fd5b50604051908082528060200260200182016040528015613e7c578160200160208202803683370190505b5090508381600081518110613e8d57fe5b60200260200101818152505060005b6001845103811015613f2657600080613edf88878581518110613ebb57fe5b6020026020010151888660010181518110613ed257fe5b6020026020010151615179565b91509150613f02848481518110613ef257fe5b60200260200101518383886145ea565b848460010181518110613f1157fe5b60209081029190910101525050600101613e9c565b50949350505050565b6000806000613f3e8585614cf9565b604080517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606094851b811660208084019190915293851b81166034830152825160288184030181526048830184528051908501207fff0000000000000000000000000000000000000000000000000000000000000060688401529a90941b9093166069840152607d8301989098527f9a100ded5f254443fbd264cb7e87831e398a8b642e061670a9bc35ba27293dbf609d808401919091528851808403909101815260bd909201909752805196019590952095945050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017815292518251600094606094938a169392918291908083835b602083106140f857805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016140bb565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461415a576040519150601f19603f3d011682016040523d82523d6000602084013e61415f565b606091505b509150915081801561418d57508051158061418d575080806020019051602081101561418a57600080fd5b50515b6141e2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602481526020018061549d6024913960400191505060405180910390fd5b505050505050565b60005b60018351038110156144555760008084838151811061420857fe5b602002602001015185846001018151811061421f57fe5b60200260200101519150915060006142378383614cf9565b509050600087856001018151811061424b57fe5b602002602001015190506000808373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161461429357826000614297565b6000835b91509150600060028a510388106142ae57886142ef565b6142ef7f0000000000000000000000000000000000000000000000000000000000000000878c8b600201815181106142e257fe5b6020026020010151613f2f565b905061431c7f00000000000000000000000000000000000000000000000000000000000000008888613f2f565b73ffffffffffffffffffffffffffffffffffffffff1663022c0d9f84848460006040519080825280601f01601f191660200182016040528015614366576020820181803683370190505b506040518563ffffffff1660e01b8152600401808581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156143db5781810151838201526020016143c3565b50505050905090810190601f1680156144085780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561442a57600080fd5b505af115801561443e573d6000803e3d6000fd5b5050600190990198506141ed975050505050505050565b50505050565b60606002835110156144ce57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f536f6c61724c6962726172793a20494e56414c49445f50415448000000000000604482015290519081900360640190fd5b825167ffffffffffffffff811180156144e657600080fd5b50604051908082528060200260200182016040528015614510578160200160208202803683370190505b509050838160018351038151811061452457fe5b602090810291909101015282517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff015b8015613f26576000806145848887600186038151811061457057fe5b6020026020010151888681518110613ed257fe5b915091506145a784848151811061459757fe5b6020026020010151838388614706565b8460018503815181106145b657fe5b602090810291909101015250507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01614554565b6000808511614644576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001806153a36027913960400191505060405180910390fd5b6000841180156146545750600083115b6146a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806154566024913960400191505060405180910390fd5b60006146b761271084614ba7565b905060006146c58783615261565b905060006146d38287615261565b905060006146ed836146e78a612710615261565b906152e7565b90508082816146f857fe5b049998505050505050505050565b6000808511614760576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602881526020018061535a6028913960400191505060405180910390fd5b6000841180156147705750600083115b6147c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806154566024913960400191505060405180910390fd5b60006147d361271084614ba7565b905060006147ed6127106147e7888a615261565b90615261565b905060006147ff836147e7888b614ba7565b9050614816600182848161480f57fe5b04906152e7565b98975050505050505050565b60005b6001835103811015613dc25760008084838151811061484057fe5b602002602001015185846001018151811061485757fe5b602002602001015191509150600061486f8383614cf9565b509050600061489f7f00000000000000000000000000000000000000000000000000000000000000008585613f2f565b90506000806000808473ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156148ed57600080fd5b505afa158015614901573d6000803e3d6000fd5b505050506040513d606081101561491757600080fd5b5080516020909101516dffffffffffffffffffffffffffff918216935016905060008073ffffffffffffffffffffffffffffffffffffffff8a811690891614614961578284614964565b83835b915091506000601990506149d9838c73ffffffffffffffffffffffffffffffffffffffff166370a082318b6040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611d0b57600080fd5b96506149e7878484846145ea565b955050505050506000808573ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614614a2c57826000614a30565b6000835b91509150600060028c51038a10614a47578a614a7b565b614a7b7f0000000000000000000000000000000000000000000000000000000000000000898e8d600201815181106142e257fe5b60408051600080825260208201928390527f022c0d9f000000000000000000000000000000000000000000000000000000008352602482018781526044830187905273ffffffffffffffffffffffffffffffffffffffff8086166064850152608060848501908152845160a48601819052969750908c169563022c0d9f958a958a958a9591949193919260c486019290918190849084905b83811015614b2b578181015183820152602001614b13565b50505050905090810190601f168015614b585780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b158015614b7a57600080fd5b505af1158015614b8e573d6000803e3d6000fd5b50506001909b019a506148259950505050505050505050565b80820382811115614c1957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f64732d6d6174682d7375622d756e646572666c6f770000000000000000000000604482015290519081900360640190fd5b92915050565b6000808411614c79576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602181526020018061540e6021913960400191505060405180910390fd5b600083118015614c895750600082115b614cde576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806154566024913960400191505060405180910390fd5b82614ce98584615261565b81614cf057fe5b04949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415614d81576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806153826021913960400191505060405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1610614dbb578284614dbe565b83835b909250905073ffffffffffffffffffffffffffffffffffffffff8216614e4557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f536f6c61724c6962726172793a205a45524f5f41444452455353000000000000604482015290519081900360640190fd5b9250929050565b600080600073ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e6a439058a8a6040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b158015614f0c57600080fd5b505afa158015614f20573d6000803e3d6000fd5b505050506040513d6020811015614f3657600080fd5b505173ffffffffffffffffffffffffffffffffffffffff161415615028577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c9c6539689896040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b158015614ffb57600080fd5b505af115801561500f573d6000803e3d6000fd5b505050506040513d602081101561502557600080fd5b50505b6000806150567f00000000000000000000000000000000000000000000000000000000000000008b8b615179565b91509150816000148015615068575080155b156150785787935086925061516c565b6000615085898484614c1f565b90508781116150f257858110156150e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806153ca6022913960400191505060405180910390fd5b88945092508261516a565b60006150ff898486614c1f565b90508981111561510b57fe5b87811015615164576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806153ec6022913960400191505060405180910390fd5b94508793505b505b5050965096945050505050565b60008060006151888585614cf9565b509050600080615199888888613f2f565b73ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156151de57600080fd5b505afa1580156151f2573d6000803e3d6000fd5b505050506040513d606081101561520857600080fd5b5080516020909101516dffffffffffffffffffffffffffff918216935016905073ffffffffffffffffffffffffffffffffffffffff8781169084161461524f578082615252565b81815b90999098509650505050505050565b600081158061527c5750508082028282828161527957fe5b04145b614c1957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6d756c2d6f766572666c6f77000000000000000000000000604482015290519081900360640190fd5b80820182811015614c1957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f77000000000000000000000000604482015290519081900360640190fdfe536f6c61724c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e54536f6c61724c6962726172793a204944454e544943414c5f414444524553534553536f6c61724c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e54536f6c6172526f757465723a20494e53554646494349454e545f425f414d4f554e54536f6c6172526f757465723a20494e53554646494349454e545f415f414d4f554e54536f6c61724c6962726172793a20494e53554646494349454e545f414d4f554e54536f6c6172526f757465723a20494e53554646494349454e545f4f55545055545f414d4f554e54536f6c61724c6962726172793a20494e53554646494349454e545f4c49515549444954595472616e7366657248656c7065723a204554485f5452414e534645525f4641494c45445472616e7366657248656c7065723a205452414e534645525f46524f4d5f4641494c4544536f6c6172526f757465723a204558434553534956455f494e5055545f414d4f554e54a26469706673582212201e64446dbea0f96e0662ad81b4738a5e1719b0a7fc60e7ac7176b60d5c94a92a64736f6c634300060c0033",
  "deployedBytecode": "0x60806040526004361061018f5760003560e01c80638803dbee116100d6578063c45a01551161007f578063e8e3370011610059578063e8e3370014610c81578063f305d71914610d0e578063fb3bdb4114610d61576101d5565b8063c45a015514610b33578063ded9382a14610b48578063e815c46614610bc8576101d5565b8063af2979eb116100b0578063af2979eb146109d6578063b6f9de9514610a36578063baa2abde14610ac9576101d5565b80638803dbee146108bd578063ad5c464814610962578063ad615dec146109a0576101d5565b806352707d8c116101385780635c11d795116101125780635c11d795146106e0578063791ac947146107855780637ff36ab51461082a576101d5565b806352707d8c146105d6578063571fd012146106245780635b0d598414610660576101d5565b806338ed17391161016957806338ed1739146103d35780634955796c146104785780634a25d94a14610531576101d5565b806302751cec146101da57806318cbafe5146102535780632195995c14610348576101d5565b366101d5573373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146101d357fe5b005b600080fd5b3480156101e657600080fd5b5061023a600480360360c08110156101fd57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135916040820135916060810135916080820135169060a00135610df4565b6040805192835260208301919091528051918290030190f35b34801561025f57600080fd5b506102f8600480360360a081101561027657600080fd5b81359160208101359181019060608101604082013564010000000081111561029d57600080fd5b8201836020820111156102af57600080fd5b803590602001918460208302840111640100000000831117156102d157600080fd5b919350915073ffffffffffffffffffffffffffffffffffffffff8135169060200135610f47565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561033457818101518382015260200161031c565b505050509050019250505060405180910390f35b34801561035457600080fd5b5061023a600480360361016081101561036c57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013582169160408201359160608101359160808201359160a08101359091169060c08101359060e081013515159060ff6101008201351690610120810135906101400135611368565b3480156103df57600080fd5b506102f8600480360360a08110156103f657600080fd5b81359160208101359181019060608101604082013564010000000081111561041d57600080fd5b82018360208201111561042f57600080fd5b8035906020019184602083028401116401000000008311171561045157600080fd5b919350915073ffffffffffffffffffffffffffffffffffffffff81351690602001356114a6565b34801561048457600080fd5b506102f86004803603606081101561049b57600080fd5b813591908101906040810160208201356401000000008111156104bd57600080fd5b8201836020820111156104cf57600080fd5b803590602001918460208302840111640100000000831117156104f157600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550509135925061163f915050565b34801561053d57600080fd5b506102f8600480360360a081101561055457600080fd5b81359160208101359181019060608101604082013564010000000081111561057b57600080fd5b82018360208201111561058d57600080fd5b803590602001918460208302840111640100000000831117156105af57600080fd5b919350915073ffffffffffffffffffffffffffffffffffffffff8135169060200135611675565b3480156105e257600080fd5b50610612600480360360808110156105f957600080fd5b50803590602081013590604081013590606001356118c0565b60408051918252519081900360200190f35b34801561063057600080fd5b506106126004803603608081101561064757600080fd5b50803590602081013590604081013590606001356118d7565b34801561066c57600080fd5b50610612600480360361014081101561068457600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135916040820135916060810135916080820135169060a08101359060c081013515159060ff60e082013516906101008101359061012001356118e5565b3480156106ec57600080fd5b506101d3600480360360a081101561070357600080fd5b81359160208101359181019060608101604082013564010000000081111561072a57600080fd5b82018360208201111561073c57600080fd5b8035906020019184602083028401116401000000008311171561075e57600080fd5b919350915073ffffffffffffffffffffffffffffffffffffffff8135169060200135611a37565b34801561079157600080fd5b506101d3600480360360a08110156107a857600080fd5b8135916020810135918101906060810160408201356401000000008111156107cf57600080fd5b8201836020820111156107e157600080fd5b8035906020019184602083028401116401000000008311171561080357600080fd5b919350915073ffffffffffffffffffffffffffffffffffffffff8135169060200135611d9e565b6102f86004803603608081101561084057600080fd5b8135919081019060408101602082013564010000000081111561086257600080fd5b82018360208201111561087457600080fd5b8035906020019184602083028401116401000000008311171561089657600080fd5b919350915073ffffffffffffffffffffffffffffffffffffffff8135169060200135612105565b3480156108c957600080fd5b506102f8600480360360a08110156108e057600080fd5b81359160208101359181019060608101604082013564010000000081111561090757600080fd5b82018360208201111561091957600080fd5b8035906020019184602083028401116401000000008311171561093b57600080fd5b919350915073ffffffffffffffffffffffffffffffffffffffff8135169060200135612542565b34801561096e57600080fd5b50610977612689565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b3480156109ac57600080fd5b50610612600480360360608110156109c357600080fd5b50803590602081013590604001356126ad565b3480156109e257600080fd5b50610612600480360360c08110156109f957600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135916040820135916060810135916080820135169060a001356126ba565b6101d360048036036080811015610a4c57600080fd5b81359190810190604081016020820135640100000000811115610a6e57600080fd5b820183602082011115610a8057600080fd5b80359060200191846020830284011164010000000083111715610aa257600080fd5b919350915073ffffffffffffffffffffffffffffffffffffffff813516906020013561289e565b348015610ad557600080fd5b5061023a600480360360e0811015610aec57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013582169160408201359160608101359160808201359160a08101359091169060c00135612d3f565b348015610b3f57600080fd5b50610977613049565b348015610b5457600080fd5b5061023a6004803603610140811015610b6c57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135916040820135916060810135916080820135169060a08101359060c081013515159060ff60e0820135169061010081013590610120013561306d565b348015610bd457600080fd5b506102f860048036036060811015610beb57600080fd5b81359190810190604081016020820135640100000000811115610c0d57600080fd5b820183602082011115610c1f57600080fd5b80359060200191846020830284011164010000000083111715610c4157600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955050913592506131c5915050565b348015610c8d57600080fd5b50610cf06004803603610100811015610ca557600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013582169160408201359160608101359160808201359160a08101359160c0820135169060e001356131f3565b60408051938452602084019290925282820152519081900360600190f35b610cf0600480360360c0811015610d2457600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135916040820135916060810135916080820135169060a0013561336c565b6102f860048036036080811015610d7757600080fd5b81359190810190604081016020820135640100000000811115610d9957600080fd5b820183602082011115610dab57600080fd5b80359060200191846020830284011164010000000083111715610dcd57600080fd5b919350915073ffffffffffffffffffffffffffffffffffffffff813516906020013561366c565b6000808242811015610e6757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f536f6c6172526f757465723a2045585049524544000000000000000000000000604482015290519081900360640190fd5b610e96897f00000000000000000000000000000000000000000000000000000000000000008a8a8a308a612d3f565b9093509150610ea6898685613aad565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d836040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015610f1957600080fd5b505af1158015610f2d573d6000803e3d6000fd5b50505050610f3b8583613c8a565b50965096945050505050565b60608142811015610fb957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f536f6c6172526f757465723a2045585049524544000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001686867fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810181811061101e57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146110bd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f536f6c6172526f757465723a20494e56414c49445f5041544800000000000000604482015290519081900360640190fd5b6000601990506111237f00000000000000000000000000000000000000000000000000000000000000008a898980806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250879250613dc7915050565b9250878360018551038151811061113657fe5b60200260200101511015611195576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602781526020018061542f6027913960400191505060405180910390fd5b61125a878760008181106111a557fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff16336112407f00000000000000000000000000000000000000000000000000000000000000008b8b60008181106111f457fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168c8c600181811061121e57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff16613f2f565b8660008151811061124d57fe5b602002602001015161401a565b611299838888808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152503092506141ea915050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d846001865103815181106112e557fe5b60200260200101516040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561132357600080fd5b505af1158015611337573d6000803e3d6000fd5b5050505061135c858460018651038151811061134f57fe5b6020026020010151613c8a565b50509695505050505050565b60008060006113987f00000000000000000000000000000000000000000000000000000000000000008f8f613f2f565b90506000876113a7578c6113c9565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b604080517fd505accf00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101839052606481018c905260ff8a16608482015260a4810189905260c48101889052905191925073ffffffffffffffffffffffffffffffffffffffff84169163d505accf9160e48082019260009290919082900301818387803b15801561146557600080fd5b505af1158015611479573d6000803e3d6000fd5b5050505061148c8f8f8f8f8f8f8f612d3f565b809450819550505050509b509b9950505050505050505050565b6060814281101561151857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f536f6c6172526f757465723a2045585049524544000000000000000000000000604482015290519081900360640190fd5b60006019905061157e7f00000000000000000000000000000000000000000000000000000000000000008a898980806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250879250613dc7915050565b9250878360018551038151811061159157fe5b602002602001015110156115f0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602781526020018061542f6027913960400191505060405180910390fd5b611600878760008181106111a557fe5b61135c838888808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508a92506141ea915050565b606061166d7f0000000000000000000000000000000000000000000000000000000000000000858585613dc7565b949350505050565b606081428110156116e757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f536f6c6172526f757465723a2045585049524544000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001686867fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810181811061174c57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146117eb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f536f6c6172526f757465723a20494e56414c49445f5041544800000000000000604482015290519081900360640190fd5b6000601990506118517f00000000000000000000000000000000000000000000000000000000000000008a89898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525087925061445b915050565b9250878360008151811061186157fe5b60200260200101511115611195576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806154c16023913960400191505060405180910390fd5b60006118ce858585856145ea565b95945050505050565b60006118ce85858585614706565b6000806119337f00000000000000000000000000000000000000000000000000000000000000008d7f0000000000000000000000000000000000000000000000000000000000000000613f2f565b9050600086611942578b611964565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b604080517fd505accf00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101839052606481018b905260ff8916608482015260a4810188905260c48101879052905191925073ffffffffffffffffffffffffffffffffffffffff84169163d505accf9160e48082019260009290919082900301818387803b158015611a0057600080fd5b505af1158015611a14573d6000803e3d6000fd5b50505050611a268d8d8d8d8d8d6126ba565b9d9c50505050505050505050505050565b8042811015611aa757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f536f6c6172526f757465723a2045585049524544000000000000000000000000604482015290519081900360640190fd5b611b3685856000818110611ab757fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1633611b307f000000000000000000000000000000000000000000000000000000000000000089896000818110611b0657fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168a8a600181811061121e57fe5b8a61401a565b600085857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101818110611b6657fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611be957600080fd5b505afa158015611bfd573d6000803e3d6000fd5b505050506040513d6020811015611c1357600080fd5b50516040805160208881028281018201909352888252929350611c55929091899189918291850190849080828437600092019190915250889250614822915050565b86611d3d8288887fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101818110611c8857fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231886040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611d0b57600080fd5b505afa158015611d1f573d6000803e3d6000fd5b505050506040513d6020811015611d3557600080fd5b505190614ba7565b1015611d94576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602781526020018061542f6027913960400191505060405180910390fd5b5050505050505050565b8042811015611e0e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f536f6c6172526f757465723a2045585049524544000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001685857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101818110611e7357fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611f1257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f536f6c6172526f757465723a20494e56414c49445f5041544800000000000000604482015290519081900360640190fd5b611f2285856000818110611ab757fe5b611f60858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250309250614822915050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611fe957600080fd5b505afa158015611ffd573d6000803e3d6000fd5b505050506040513d602081101561201357600080fd5b5051905086811015612070576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602781526020018061542f6027913960400191505060405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156120e357600080fd5b505af11580156120f7573d6000803e3d6000fd5b50505050611d948482613c8a565b6060814281101561217757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f536f6c6172526f757465723a2045585049524544000000000000000000000000604482015290519081900360640190fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16868660008181106121bb57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461225a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f536f6c6172526f757465723a20494e56414c49445f5041544800000000000000604482015290519081900360640190fd5b6000601990506122c07f000000000000000000000000000000000000000000000000000000000000000034898980806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250879250613dc7915050565b925087836001855103815181106122d357fe5b60200260200101511015612332576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602781526020018061542f6027913960400191505060405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db08460008151811061237b57fe5b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b1580156123ae57600080fd5b505af11580156123c2573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb61245e7f00000000000000000000000000000000000000000000000000000000000000008a8a600081811061243457fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168b8b600181811061121e57fe5b8560008151811061246b57fe5b60200260200101516040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156124c657600080fd5b505af11580156124da573d6000803e3d6000fd5b505050506040513d60208110156124f057600080fd5b50516124f857fe5b612537838888808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508a92506141ea915050565b505095945050505050565b606081428110156125b457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f536f6c6172526f757465723a2045585049524544000000000000000000000000604482015290519081900360640190fd5b60006019905061261a7f00000000000000000000000000000000000000000000000000000000000000008a89898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525087925061445b915050565b9250878360008151811061262a57fe5b602002602001015111156115f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806154c16023913960400191505060405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000081565b600061166d848484614c1f565b6000814281101561272c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f536f6c6172526f757465723a2045585049524544000000000000000000000000604482015290519081900360640190fd5b61275b887f00000000000000000000000000000000000000000000000000000000000000008989893089612d3f565b9050809250506127fe88858a73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156127cd57600080fd5b505afa1580156127e1573d6000803e3d6000fd5b505050506040513d60208110156127f757600080fd5b5051613aad565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d836040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561287157600080fd5b505af1158015612885573d6000803e3d6000fd5b505050506128938483613c8a565b509695505050505050565b804281101561290e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f536f6c6172526f757465723a2045585049524544000000000000000000000000604482015290519081900360640190fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168585600081811061295257fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146129f157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f536f6c6172526f757465723a20494e56414c49445f5041544800000000000000604482015290519081900360640190fd5b60003490507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015612a5e57600080fd5b505af1158015612a72573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb612ae47f000000000000000000000000000000000000000000000000000000000000000089896000818110611b0657fe5b836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015612b3857600080fd5b505af1158015612b4c573d6000803e3d6000fd5b505050506040513d6020811015612b6257600080fd5b5051612b6a57fe5b600086867fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101818110612b9a57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231866040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015612c1d57600080fd5b505afa158015612c31573d6000803e3d6000fd5b505050506040513d6020811015612c4757600080fd5b50516040805160208981028281018201909352898252929350612c899290918a918a918291850190849080828437600092019190915250899250614822915050565b87611d3d8289897fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101818110612cbc57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231896040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611d0b57600080fd5b6000808242811015612db257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f536f6c6172526f757465723a2045585049524544000000000000000000000000604482015290519081900360640190fd5b6000612ddf7f00000000000000000000000000000000000000000000000000000000000000008c8c613f2f565b604080517f23b872dd00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff831660248201819052604482018d9052915192935090916323b872dd916064808201926020929091908290030181600087803b158015612e6057600080fd5b505af1158015612e74573d6000803e3d6000fd5b505050506040513d6020811015612e8a57600080fd5b5050604080517f89afcb4400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff888116600483015282516000938493928616926389afcb44926024808301939282900301818787803b158015612efd57600080fd5b505af1158015612f11573d6000803e3d6000fd5b505050506040513d6040811015612f2757600080fd5b50805160209091015190925090506000612f418e8e614cf9565b5090508073ffffffffffffffffffffffffffffffffffffffff168e73ffffffffffffffffffffffffffffffffffffffff1614612f7e578183612f81565b82825b90975095508a871015612fdf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806153ec6022913960400191505060405180910390fd5b89861015613038576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806153ca6022913960400191505060405180910390fd5b505050505097509795505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008060006130bd7f00000000000000000000000000000000000000000000000000000000000000008e7f0000000000000000000000000000000000000000000000000000000000000000613f2f565b90506000876130cc578c6130ee565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b604080517fd505accf00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101839052606481018c905260ff8a16608482015260a4810189905260c48101889052905191925073ffffffffffffffffffffffffffffffffffffffff84169163d505accf9160e48082019260009290919082900301818387803b15801561318a57600080fd5b505af115801561319e573d6000803e3d6000fd5b505050506131b08e8e8e8e8e8e610df4565b909f909e509c50505050505050505050505050565b606061166d7f000000000000000000000000000000000000000000000000000000000000000085858561445b565b6000806000834281101561326857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f536f6c6172526f757465723a2045585049524544000000000000000000000000604482015290519081900360640190fd5b6132768c8c8c8c8c8c614e4c565b909450925060006132a87f00000000000000000000000000000000000000000000000000000000000000008e8e613f2f565b90506132b68d33838861401a565b6132c28c33838761401a565b8073ffffffffffffffffffffffffffffffffffffffff16636a627842886040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561332b57600080fd5b505af115801561333f573d6000803e3d6000fd5b505050506040513d602081101561335557600080fd5b5051949d939c50939a509198505050505050505050565b600080600083428110156133e157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f536f6c6172526f757465723a2045585049524544000000000000000000000000604482015290519081900360640190fd5b61340f8a7f00000000000000000000000000000000000000000000000000000000000000008b348c8c614e4c565b909450925060006134617f00000000000000000000000000000000000000000000000000000000000000008c7f0000000000000000000000000000000000000000000000000000000000000000613f2f565b905061346f8b33838861401a565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0856040518263ffffffff1660e01b81526004016000604051808303818588803b1580156134d757600080fd5b505af11580156134eb573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb82866040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561358157600080fd5b505af1158015613595573d6000803e3d6000fd5b505050506040513d60208110156135ab57600080fd5b50516135b357fe5b8073ffffffffffffffffffffffffffffffffffffffff16636a627842886040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561361c57600080fd5b505af1158015613630573d6000803e3d6000fd5b505050506040513d602081101561364657600080fd5b505192503484101561365e5761365e33853403613c8a565b505096509650969350505050565b606081428110156136de57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f536f6c6172526f757465723a2045585049524544000000000000000000000000604482015290519081900360640190fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168686600081811061372257fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146137c157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f536f6c6172526f757465723a20494e56414c49445f5041544800000000000000604482015290519081900360640190fd5b6000601990506138277f00000000000000000000000000000000000000000000000000000000000000008989898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525087925061445b915050565b9250348360008151811061383757fe5b60200260200101511115613896576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806154c16023913960400191505060405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0846000815181106138df57fe5b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b15801561391257600080fd5b505af1158015613926573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6139987f00000000000000000000000000000000000000000000000000000000000000008a8a600081811061243457fe5b856000815181106139a557fe5b60200260200101516040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015613a0057600080fd5b505af1158015613a14573d6000803e3d6000fd5b505050506040513d6020811015613a2a57600080fd5b5051613a3257fe5b613a71838888808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508a92506141ea915050565b82600081518110613a7e57fe5b6020026020010151341115612537576125373384600081518110613a9e57fe5b60200260200101513403613c8a565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000178152925182516000946060949389169392918291908083835b60208310613b8357805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101613b46565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114613be5576040519150601f19603f3d011682016040523d82523d6000602084013e613bea565b606091505b5091509150818015613c18575080511580613c185750808060200190516020811015613c1557600080fd5b50515b613c8357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c454400604482015290519081900360640190fd5b5050505050565b6040805160008082526020820190925273ffffffffffffffffffffffffffffffffffffffff84169083906040518082805190602001908083835b60208310613d0157805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101613cc4565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114613d63576040519150601f19603f3d011682016040523d82523d6000602084013e613d68565b606091505b5050905080613dc2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602381526020018061547a6023913960400191505060405180910390fd5b505050565b6060600283511015613e3a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f536f6c61724c6962726172793a20494e56414c49445f50415448000000000000604482015290519081900360640190fd5b825167ffffffffffffffff81118015613e5257600080fd5b50604051908082528060200260200182016040528015613e7c578160200160208202803683370190505b5090508381600081518110613e8d57fe5b60200260200101818152505060005b6001845103811015613f2657600080613edf88878581518110613ebb57fe5b6020026020010151888660010181518110613ed257fe5b6020026020010151615179565b91509150613f02848481518110613ef257fe5b60200260200101518383886145ea565b848460010181518110613f1157fe5b60209081029190910101525050600101613e9c565b50949350505050565b6000806000613f3e8585614cf9565b604080517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606094851b811660208084019190915293851b81166034830152825160288184030181526048830184528051908501207fff0000000000000000000000000000000000000000000000000000000000000060688401529a90941b9093166069840152607d8301989098527f9a100ded5f254443fbd264cb7e87831e398a8b642e061670a9bc35ba27293dbf609d808401919091528851808403909101815260bd909201909752805196019590952095945050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017815292518251600094606094938a169392918291908083835b602083106140f857805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016140bb565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461415a576040519150601f19603f3d011682016040523d82523d6000602084013e61415f565b606091505b509150915081801561418d57508051158061418d575080806020019051602081101561418a57600080fd5b50515b6141e2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602481526020018061549d6024913960400191505060405180910390fd5b505050505050565b60005b60018351038110156144555760008084838151811061420857fe5b602002602001015185846001018151811061421f57fe5b60200260200101519150915060006142378383614cf9565b509050600087856001018151811061424b57fe5b602002602001015190506000808373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161461429357826000614297565b6000835b91509150600060028a510388106142ae57886142ef565b6142ef7f0000000000000000000000000000000000000000000000000000000000000000878c8b600201815181106142e257fe5b6020026020010151613f2f565b905061431c7f00000000000000000000000000000000000000000000000000000000000000008888613f2f565b73ffffffffffffffffffffffffffffffffffffffff1663022c0d9f84848460006040519080825280601f01601f191660200182016040528015614366576020820181803683370190505b506040518563ffffffff1660e01b8152600401808581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156143db5781810151838201526020016143c3565b50505050905090810190601f1680156144085780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561442a57600080fd5b505af115801561443e573d6000803e3d6000fd5b5050600190990198506141ed975050505050505050565b50505050565b60606002835110156144ce57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f536f6c61724c6962726172793a20494e56414c49445f50415448000000000000604482015290519081900360640190fd5b825167ffffffffffffffff811180156144e657600080fd5b50604051908082528060200260200182016040528015614510578160200160208202803683370190505b509050838160018351038151811061452457fe5b602090810291909101015282517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff015b8015613f26576000806145848887600186038151811061457057fe5b6020026020010151888681518110613ed257fe5b915091506145a784848151811061459757fe5b6020026020010151838388614706565b8460018503815181106145b657fe5b602090810291909101015250507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01614554565b6000808511614644576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001806153a36027913960400191505060405180910390fd5b6000841180156146545750600083115b6146a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806154566024913960400191505060405180910390fd5b60006146b761271084614ba7565b905060006146c58783615261565b905060006146d38287615261565b905060006146ed836146e78a612710615261565b906152e7565b90508082816146f857fe5b049998505050505050505050565b6000808511614760576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602881526020018061535a6028913960400191505060405180910390fd5b6000841180156147705750600083115b6147c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806154566024913960400191505060405180910390fd5b60006147d361271084614ba7565b905060006147ed6127106147e7888a615261565b90615261565b905060006147ff836147e7888b614ba7565b9050614816600182848161480f57fe5b04906152e7565b98975050505050505050565b60005b6001835103811015613dc25760008084838151811061484057fe5b602002602001015185846001018151811061485757fe5b602002602001015191509150600061486f8383614cf9565b509050600061489f7f00000000000000000000000000000000000000000000000000000000000000008585613f2f565b90506000806000808473ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156148ed57600080fd5b505afa158015614901573d6000803e3d6000fd5b505050506040513d606081101561491757600080fd5b5080516020909101516dffffffffffffffffffffffffffff918216935016905060008073ffffffffffffffffffffffffffffffffffffffff8a811690891614614961578284614964565b83835b915091506000601990506149d9838c73ffffffffffffffffffffffffffffffffffffffff166370a082318b6040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611d0b57600080fd5b96506149e7878484846145ea565b955050505050506000808573ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614614a2c57826000614a30565b6000835b91509150600060028c51038a10614a47578a614a7b565b614a7b7f0000000000000000000000000000000000000000000000000000000000000000898e8d600201815181106142e257fe5b60408051600080825260208201928390527f022c0d9f000000000000000000000000000000000000000000000000000000008352602482018781526044830187905273ffffffffffffffffffffffffffffffffffffffff8086166064850152608060848501908152845160a48601819052969750908c169563022c0d9f958a958a958a9591949193919260c486019290918190849084905b83811015614b2b578181015183820152602001614b13565b50505050905090810190601f168015614b585780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b158015614b7a57600080fd5b505af1158015614b8e573d6000803e3d6000fd5b50506001909b019a506148259950505050505050505050565b80820382811115614c1957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f64732d6d6174682d7375622d756e646572666c6f770000000000000000000000604482015290519081900360640190fd5b92915050565b6000808411614c79576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602181526020018061540e6021913960400191505060405180910390fd5b600083118015614c895750600082115b614cde576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806154566024913960400191505060405180910390fd5b82614ce98584615261565b81614cf057fe5b04949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415614d81576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806153826021913960400191505060405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1610614dbb578284614dbe565b83835b909250905073ffffffffffffffffffffffffffffffffffffffff8216614e4557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f536f6c61724c6962726172793a205a45524f5f41444452455353000000000000604482015290519081900360640190fd5b9250929050565b600080600073ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e6a439058a8a6040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b158015614f0c57600080fd5b505afa158015614f20573d6000803e3d6000fd5b505050506040513d6020811015614f3657600080fd5b505173ffffffffffffffffffffffffffffffffffffffff161415615028577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c9c6539689896040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b158015614ffb57600080fd5b505af115801561500f573d6000803e3d6000fd5b505050506040513d602081101561502557600080fd5b50505b6000806150567f00000000000000000000000000000000000000000000000000000000000000008b8b615179565b91509150816000148015615068575080155b156150785787935086925061516c565b6000615085898484614c1f565b90508781116150f257858110156150e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806153ca6022913960400191505060405180910390fd5b88945092508261516a565b60006150ff898486614c1f565b90508981111561510b57fe5b87811015615164576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806153ec6022913960400191505060405180910390fd5b94508793505b505b5050965096945050505050565b60008060006151888585614cf9565b509050600080615199888888613f2f565b73ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156151de57600080fd5b505afa1580156151f2573d6000803e3d6000fd5b505050506040513d606081101561520857600080fd5b5080516020909101516dffffffffffffffffffffffffffff918216935016905073ffffffffffffffffffffffffffffffffffffffff8781169084161461524f578082615252565b81815b90999098509650505050505050565b600081158061527c5750508082028282828161527957fe5b04145b614c1957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6d756c2d6f766572666c6f77000000000000000000000000604482015290519081900360640190fd5b80820182811015614c1957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f77000000000000000000000000604482015290519081900360640190fdfe536f6c61724c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e54536f6c61724c6962726172793a204944454e544943414c5f414444524553534553536f6c61724c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e54536f6c6172526f757465723a20494e53554646494349454e545f425f414d4f554e54536f6c6172526f757465723a20494e53554646494349454e545f415f414d4f554e54536f6c61724c6962726172793a20494e53554646494349454e545f414d4f554e54536f6c6172526f757465723a20494e53554646494349454e545f4f55545055545f414d4f554e54536f6c61724c6962726172793a20494e53554646494349454e545f4c49515549444954595472616e7366657248656c7065723a204554485f5452414e534645525f4641494c45445472616e7366657248656c7065723a205452414e534645525f46524f4d5f4641494c4544536f6c6172526f757465723a204558434553534956455f494e5055545f414d4f554e54a26469706673582212201e64446dbea0f96e0662ad81b4738a5e1719b0a7fc60e7ac7176b60d5c94a92a64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}