{
  "address": "0x0D0b4862F5FfA3A47D04DDf0351356d20C830460",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IBoringERC20",
          "name": "_solar",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_solarPerBlock",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_teamAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasuryAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_investorAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_teamPercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_treasuryPercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_investorPercent",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract IBoringERC20",
          "name": "lpToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "depositFeeBP",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "harvestInterval",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract IRewarder[]",
          "name": "rewarders",
          "type": "address[]"
        }
      ],
      "name": "Add",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newAmount",
          "type": "uint256"
        }
      ],
      "name": "AllocPointsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newAmount",
          "type": "uint256"
        }
      ],
      "name": "EmissionRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountLockedUp",
          "type": "uint256"
        }
      ],
      "name": "RewardLockedUp",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "depositFeeBP",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "harvestInterval",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract IRewarder[]",
          "name": "rewarders",
          "type": "address[]"
        }
      ],
      "name": "Set",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "SetInvestorAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldPercent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPercent",
          "type": "uint256"
        }
      ],
      "name": "SetInvestorPercent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "SetTeamAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldPercent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPercent",
          "type": "uint256"
        }
      ],
      "name": "SetTeamPercent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "SetTreasuryAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldPercent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPercent",
          "type": "uint256"
        }
      ],
      "name": "SetTreasuryPercent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAXIMUM_DEPOSIT_FEE_RATE",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAXIMUM_HARVEST_INTERVAL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "contract IBoringERC20",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_depositFeeBP",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_harvestInterval",
          "type": "uint256"
        },
        {
          "internalType": "contract IRewarder[]",
          "name": "_rewarders",
          "type": "address[]"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "canHarvest",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_to",
          "type": "uint256"
        }
      ],
      "name": "getMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_pids",
          "type": "uint256[]"
        }
      ],
      "name": "harvestMany",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "investorAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "investorPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "massUpdatePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        },
        {
          "internalType": "string[]",
          "name": "symbols",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "contract IBoringERC20",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accSolarPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "depositFeeBP",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "harvestInterval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalLp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_depositFeeBP",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_harvestInterval",
          "type": "uint256"
        },
        {
          "internalType": "contract IRewarder[]",
          "name": "_rewarders",
          "type": "address[]"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_investorAddress",
          "type": "address"
        }
      ],
      "name": "setInvestorAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newInvestorPercent",
          "type": "uint256"
        }
      ],
      "name": "setInvestorPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_teamAddress",
          "type": "address"
        }
      ],
      "name": "setTeamAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newTeamPercent",
          "type": "uint256"
        }
      ],
      "name": "setTeamPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasuryAddress",
          "type": "address"
        }
      ],
      "name": "setTreasuryAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newTreasuryPercent",
          "type": "uint256"
        }
      ],
      "name": "setTreasuryPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "solar",
      "outputs": [
        {
          "internalType": "contract IBoringERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "solarPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startFarming",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "teamAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "teamPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAllocPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLockedUpRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSolarInPools",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        }
      ],
      "name": "updateAllocPoint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_solarPerBlock",
          "type": "uint256"
        }
      ],
      "name": "updateEmissionRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardLockedUp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nextHarvestUntil",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0a4791b575358833a5ca13917eda5390f85a66da19625b0eb279502a343239ed",
  "receipt": {
    "to": null,
    "from": "0xf884c8774b09b3302f98e38C944eB352264024F8",
    "contractAddress": "0x0D0b4862F5FfA3A47D04DDf0351356d20C830460",
    "transactionIndex": 0,
    "gasUsed": "4454384",
    "logsBloom": "0x
    "blockHash": "0x557eacbfe88d788df23c22aee588c79de2eb05b55b64ba699d5a52f5c0b7aec6",
    "transactionHash": "0x0a4791b575358833a5ca13917eda5390f85a66da19625b0eb279502a343239ed",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 994497,
        "transactionHash": "0x0a4791b575358833a5ca13917eda5390f85a66da19625b0eb279502a343239ed",
        "address": "0x0D0b4862F5FfA3A47D04DDf0351356d20C830460",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f884c8774b09b3302f98e38c944eb352264024f8"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x557eacbfe88d788df23c22aee588c79de2eb05b55b64ba699d5a52f5c0b7aec6"
      }
    ],
    "blockNumber": 994497,
    "cumulativeGasUsed": "4454384",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xB256C57AA0778a184D26D3B7c033dB950c7bF007",
    "60000000000000000000",
    "0xf884c8774b09b3302f98e38C944eB352264024F8",
    "0xf884c8774b09b3302f98e38C944eB352264024F8",
    "0xf884c8774b09b3302f98e38C944eB352264024F8",
    10,
    10,
    10
  ],
  "solcInputHash": "912786fc91fa8d4d3ec7ea647c5ab2b4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBoringERC20\",\"name\":\"_solar\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_solarPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_teamAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasuryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_investorAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_teamPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_treasuryPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_investorPercent\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IBoringERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"depositFeeBP\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"harvestInterval\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IRewarder[]\",\"name\":\"rewarders\",\"type\":\"address[]\"}],\"name\":\"Add\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"AllocPointsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"EmissionRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLockedUp\",\"type\":\"uint256\"}],\"name\":\"RewardLockedUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"depositFeeBP\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"harvestInterval\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IRewarder[]\",\"name\":\"rewarders\",\"type\":\"address[]\"}],\"name\":\"Set\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"SetInvestorAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPercent\",\"type\":\"uint256\"}],\"name\":\"SetInvestorPercent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"SetTeamAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPercent\",\"type\":\"uint256\"}],\"name\":\"SetTeamPercent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"SetTreasuryAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPercent\",\"type\":\"uint256\"}],\"name\":\"SetTreasuryPercent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAXIMUM_DEPOSIT_FEE_RATE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_HARVEST_INTERVAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IBoringERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_depositFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_harvestInterval\",\"type\":\"uint256\"},{\"internalType\":\"contract IRewarder[]\",\"name\":\"_rewarders\",\"type\":\"address[]\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"canHarvest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_pids\",\"type\":\"uint256[]\"}],\"name\":\"harvestMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investorPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"symbols\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IBoringERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accSolarPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"depositFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"harvestInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_depositFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_harvestInterval\",\"type\":\"uint256\"},{\"internalType\":\"contract IRewarder[]\",\"name\":\"_rewarders\",\"type\":\"address[]\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_investorAddress\",\"type\":\"address\"}],\"name\":\"setInvestorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newInvestorPercent\",\"type\":\"uint256\"}],\"name\":\"setInvestorPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teamAddress\",\"type\":\"address\"}],\"name\":\"setTeamAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newTeamPercent\",\"type\":\"uint256\"}],\"name\":\"setTeamPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryAddress\",\"type\":\"address\"}],\"name\":\"setTreasuryAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newTreasuryPercent\",\"type\":\"uint256\"}],\"name\":\"setTreasuryPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"solar\",\"outputs\":[{\"internalType\":\"contract IBoringERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"solarPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startFarming\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLockedUpRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSolarInPools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"}],\"name\":\"updateAllocPoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_solarPerBlock\",\"type\":\"uint256\"}],\"name\":\"updateEmissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardLockedUp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextHarvestUntil\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/farm/v2/SolarDistributorV2.sol\":\"SolarDistributorV2\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"contracts/farm/v2/SolarDistributorV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"./rewarders/IRewarder.sol\\\";\\r\\nimport \\\"./libraries/BoringERC20.sol\\\";\\r\\n\\r\\ncontract SolarDistributorV2 is Ownable, ReentrancyGuard {\\r\\n    using BoringERC20 for IBoringERC20;\\r\\n\\r\\n    // Info of each user.\\r\\n    struct UserInfo {\\r\\n        uint256 amount; // How many LP tokens the user has provided.\\r\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\r\\n        uint256 rewardLockedUp; // Reward locked up.\\r\\n        uint256 nextHarvestUntil; // When can the user harvest again.\\r\\n    }\\r\\n\\r\\n    // Info of each pool.\\r\\n    struct PoolInfo {\\r\\n        IBoringERC20 lpToken; // Address of LP token contract.\\r\\n        uint256 allocPoint; // How many allocation points assigned to this pool. Solar to distribute per block.\\r\\n        uint256 lastRewardBlock; // Last block number that Solar distribution occurs.\\r\\n        uint256 accSolarPerShare; // Accumulated Solar per share, times 1e12. See below.\\r\\n        uint16 depositFeeBP; // Deposit fee in basis points\\r\\n        uint256 harvestInterval; // Harvest interval in seconds\\r\\n        uint256 totalLp; // Total token in Pool\\r\\n        IRewarder[] rewarders; // Array of rewarder contract for pools with incentives\\r\\n    }\\r\\n\\r\\n    IBoringERC20 public solar;\\r\\n\\r\\n    // Solar tokens created per block\\r\\n    uint256 public solarPerBlock;\\r\\n\\r\\n    // Max harvest interval: 14 days\\r\\n    uint256 public constant MAXIMUM_HARVEST_INTERVAL = 14 days;\\r\\n\\r\\n    // Maximum deposit fee rate: 10%\\r\\n    uint16 public constant MAXIMUM_DEPOSIT_FEE_RATE = 1000;\\r\\n\\r\\n    // Info of each pool\\r\\n    PoolInfo[] public poolInfo;\\r\\n\\r\\n    // Info of each user that stakes LP tokens.\\r\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\r\\n\\r\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\r\\n    uint256 public totalAllocPoint = 0;\\r\\n\\r\\n    // The block number when Solar mining starts.\\r\\n    uint256 public startBlock;\\r\\n\\r\\n    // Total locked up rewards\\r\\n    uint256 public totalLockedUpRewards;\\r\\n\\r\\n    // Total Solar in Solar Pools (can be multiple pools)\\r\\n    uint256 public totalSolarInPools = 0;\\r\\n\\r\\n    // Team address.\\r\\n    address public teamAddress;\\r\\n\\r\\n    // Treasury address.\\r\\n    address public treasuryAddress;\\r\\n\\r\\n    // Investor address.\\r\\n    address public investorAddress;\\r\\n\\r\\n    // Percentage of pool rewards that goto the team.\\r\\n    uint256 public teamPercent;\\r\\n\\r\\n    // Percentage of pool rewards that goes to the treasury.\\r\\n    uint256 public treasuryPercent;\\r\\n\\r\\n    // Percentage of pool rewards that goes to the investor.\\r\\n    uint256 public investorPercent;\\r\\n\\r\\n    modifier validatePoolByPid(uint256 _pid) {\\r\\n        require(_pid < poolInfo.length, \\\"Pool does not exist\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    event Add(\\r\\n        uint256 indexed pid,\\r\\n        uint256 allocPoint,\\r\\n        IBoringERC20 indexed lpToken,\\r\\n        uint16 depositFeeBP,\\r\\n        uint256 harvestInterval,\\r\\n        IRewarder[] indexed rewarders\\r\\n    );\\r\\n\\r\\n    event Set(\\r\\n        uint256 indexed pid,\\r\\n        uint256 allocPoint,\\r\\n        uint16 depositFeeBP,\\r\\n        uint256 harvestInterval,\\r\\n        IRewarder[] indexed rewarders\\r\\n    );\\r\\n\\r\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n\\r\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n\\r\\n    event EmergencyWithdraw(\\r\\n        address indexed user,\\r\\n        uint256 indexed pid,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    event EmissionRateUpdated(\\r\\n        address indexed caller,\\r\\n        uint256 previousAmount,\\r\\n        uint256 newAmount\\r\\n    );\\r\\n\\r\\n    event RewardLockedUp(\\r\\n        address indexed user,\\r\\n        uint256 indexed pid,\\r\\n        uint256 amountLockedUp\\r\\n    );\\r\\n\\r\\n    event AllocPointsUpdated(\\r\\n        address indexed caller,\\r\\n        uint256 previousAmount,\\r\\n        uint256 newAmount\\r\\n    );\\r\\n\\r\\n    event SetTeamAddress(\\r\\n        address indexed oldAddress,\\r\\n        address indexed newAddress\\r\\n    );\\r\\n\\r\\n    event SetTreasuryAddress(\\r\\n        address indexed oldAddress,\\r\\n        address indexed newAddress\\r\\n    );\\r\\n\\r\\n    event SetInvestorAddress(\\r\\n        address indexed oldAddress,\\r\\n        address indexed newAddress\\r\\n    );\\r\\n\\r\\n    event SetTeamPercent(uint256 oldPercent, uint256 newPercent);\\r\\n\\r\\n    event SetTreasuryPercent(uint256 oldPercent, uint256 newPercent);\\r\\n\\r\\n    event SetInvestorPercent(uint256 oldPercent, uint256 newPercent);\\r\\n\\r\\n    constructor(\\r\\n        IBoringERC20 _solar,\\r\\n        uint256 _solarPerBlock,\\r\\n        address _teamAddress,\\r\\n        address _treasuryAddress,\\r\\n        address _investorAddress,\\r\\n        uint256 _teamPercent,\\r\\n        uint256 _treasuryPercent,\\r\\n        uint256 _investorPercent\\r\\n    ) {\\r\\n        require(\\r\\n            0 <= _teamPercent && _teamPercent <= 1000,\\r\\n            \\\"constructor: invalid team percent value\\\"\\r\\n        );\\r\\n        require(\\r\\n            0 <= _treasuryPercent && _treasuryPercent <= 1000,\\r\\n            \\\"constructor: invalid treasury percent value\\\"\\r\\n        );\\r\\n        require(\\r\\n            0 <= _investorPercent && _investorPercent <= 1000,\\r\\n            \\\"constructor: invalid investor percent value\\\"\\r\\n        );\\r\\n        require(\\r\\n            _teamPercent + _treasuryPercent + _investorPercent <= 1000,\\r\\n            \\\"constructor: total percent over max\\\"\\r\\n        );\\r\\n\\r\\n        //StartBlock always many years later from contract construct, will be set later in StartFarming function\\r\\n        startBlock = block.number + (10 * 365 * 24 * 60 * 60);\\r\\n\\r\\n        solar = _solar;\\r\\n        solarPerBlock = _solarPerBlock;\\r\\n\\r\\n        teamAddress = _teamAddress;\\r\\n        treasuryAddress = _treasuryAddress;\\r\\n        investorAddress = _investorAddress;\\r\\n\\r\\n        teamPercent = _teamPercent;\\r\\n        treasuryPercent = _treasuryPercent;\\r\\n        investorPercent = _investorPercent;\\r\\n    }\\r\\n\\r\\n    // Return reward multiplier over the given _from to _to block.\\r\\n    function getMultiplier(uint256 _from, uint256 _to)\\r\\n        public\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _to - _from;\\r\\n    }\\r\\n\\r\\n    // Set farming start, can call only once\\r\\n    function startFarming() public onlyOwner {\\r\\n        require(\\r\\n            block.number < startBlock,\\r\\n            \\\"startFarming: farm started already\\\"\\r\\n        );\\r\\n\\r\\n        uint256 length = poolInfo.length;\\r\\n        for (uint256 pid = 0; pid < length; ++pid) {\\r\\n            PoolInfo storage pool = poolInfo[pid];\\r\\n            pool.lastRewardBlock = block.number;\\r\\n        }\\r\\n\\r\\n        startBlock = block.number;\\r\\n    }\\r\\n\\r\\n    function poolLength() external view returns (uint256) {\\r\\n        return poolInfo.length;\\r\\n    }\\r\\n\\r\\n    // Add a new lp to the pool. Can only be called by the owner.\\r\\n    // Can add multiple pool with same lp token without messing up rewards, because each pool's balance is tracked using its own totalLp\\r\\n    function add(\\r\\n        uint256 _allocPoint,\\r\\n        IBoringERC20 _lpToken,\\r\\n        uint16 _depositFeeBP,\\r\\n        uint256 _harvestInterval,\\r\\n        IRewarder[] calldata _rewarders\\r\\n    ) public onlyOwner {\\r\\n        require(\\r\\n            _depositFeeBP <= MAXIMUM_DEPOSIT_FEE_RATE,\\r\\n            \\\"add: deposit fee too high\\\"\\r\\n        );\\r\\n        require(\\r\\n            _harvestInterval <= MAXIMUM_HARVEST_INTERVAL,\\r\\n            \\\"add: invalid harvest interval\\\"\\r\\n        );\\r\\n        require(\\r\\n            Address.isContract(address(_lpToken)),\\r\\n            \\\"add: LP token must be a valid contract\\\"\\r\\n        );\\r\\n\\r\\n        for (\\r\\n            uint256 rewarderId = 0;\\r\\n            rewarderId < _rewarders.length;\\r\\n            ++rewarderId\\r\\n        ) {\\r\\n            require(\\r\\n                Address.isContract(address(_rewarders[rewarderId])),\\r\\n                \\\"add: rewarder must be contract\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        massUpdatePools();\\r\\n\\r\\n        uint256 lastRewardBlock = block.number > startBlock\\r\\n            ? block.number\\r\\n            : startBlock;\\r\\n\\r\\n        totalAllocPoint = totalAllocPoint + _allocPoint;\\r\\n\\r\\n        poolInfo.push(\\r\\n            PoolInfo({\\r\\n                lpToken: _lpToken,\\r\\n                allocPoint: _allocPoint,\\r\\n                lastRewardBlock: lastRewardBlock,\\r\\n                accSolarPerShare: 0,\\r\\n                depositFeeBP: _depositFeeBP,\\r\\n                harvestInterval: _harvestInterval,\\r\\n                totalLp: 0,\\r\\n                rewarders: _rewarders\\r\\n            })\\r\\n        );\\r\\n\\r\\n        emit Add(\\r\\n            poolInfo.length - 1,\\r\\n            _allocPoint,\\r\\n            _lpToken,\\r\\n            _depositFeeBP,\\r\\n            _harvestInterval,\\r\\n            _rewarders\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // Update the given pool's Solar allocation point and deposit fee. Can only be called by the owner.\\r\\n    function set(\\r\\n        uint256 _pid,\\r\\n        uint256 _allocPoint,\\r\\n        uint16 _depositFeeBP,\\r\\n        uint256 _harvestInterval,\\r\\n        IRewarder[] calldata _rewarders\\r\\n    ) public onlyOwner validatePoolByPid(_pid) {\\r\\n        require(\\r\\n            _depositFeeBP <= MAXIMUM_DEPOSIT_FEE_RATE,\\r\\n            \\\"set: deposit fee too high\\\"\\r\\n        );\\r\\n        require(\\r\\n            _harvestInterval <= MAXIMUM_HARVEST_INTERVAL,\\r\\n            \\\"set: invalid harvest interval\\\"\\r\\n        );\\r\\n\\r\\n        for (\\r\\n            uint256 rewarderId = 0;\\r\\n            rewarderId < _rewarders.length;\\r\\n            ++rewarderId\\r\\n        ) {\\r\\n            require(\\r\\n                Address.isContract(address(_rewarders[rewarderId])),\\r\\n                \\\"add: rewarder must be contract\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        massUpdatePools();\\r\\n\\r\\n        totalAllocPoint =\\r\\n            totalAllocPoint -\\r\\n            poolInfo[_pid].allocPoint +\\r\\n            _allocPoint;\\r\\n\\r\\n        poolInfo[_pid].allocPoint = _allocPoint;\\r\\n        poolInfo[_pid].depositFeeBP = _depositFeeBP;\\r\\n        poolInfo[_pid].harvestInterval = _harvestInterval;\\r\\n        poolInfo[_pid].rewarders = _rewarders;\\r\\n        emit Set(\\r\\n            _pid,\\r\\n            _allocPoint,\\r\\n            _depositFeeBP,\\r\\n            _harvestInterval,\\r\\n            _rewarders\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // View function to see pending rewards on frontend.\\r\\n    function pendingTokens(uint256 _pid, address _user)\\r\\n        external\\r\\n        view\\r\\n        validatePoolByPid(_pid)\\r\\n        returns (\\r\\n            address[] memory addresses,\\r\\n            string[] memory symbols,\\r\\n            uint256[] memory amounts\\r\\n        )\\r\\n    {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][_user];\\r\\n        uint256 accSolarPerShare = pool.accSolarPerShare;\\r\\n        uint256 lpSupply = pool.totalLp;\\r\\n\\r\\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\\r\\n            uint256 multiplier = getMultiplier(\\r\\n                pool.lastRewardBlock,\\r\\n                block.number\\r\\n            );\\r\\n\\r\\n            uint256 solarReward = ((multiplier * solarPerBlock) *\\r\\n                pool.allocPoint) / totalAllocPoint;\\r\\n\\r\\n            accSolarPerShare =\\r\\n                accSolarPerShare +\\r\\n                (((solarReward * 1e12) / lpSupply));\\r\\n        }\\r\\n\\r\\n        uint256 pendingSolar = (((user.amount * accSolarPerShare) / 1e12) -\\r\\n            user.rewardDebt) + user.rewardLockedUp;\\r\\n\\r\\n        addresses = new address[](pool.rewarders.length + 1);\\r\\n        symbols = new string[](pool.rewarders.length + 1);\\r\\n        amounts = new uint256[](pool.rewarders.length + 1);\\r\\n\\r\\n        addresses[0] = address(solar);\\r\\n        symbols[0] = IBoringERC20(solar).safeSymbol();\\r\\n        amounts[0] = pendingSolar;\\r\\n\\r\\n        for (\\r\\n            uint256 rewarderId = 0;\\r\\n            rewarderId < pool.rewarders.length;\\r\\n            ++rewarderId\\r\\n        ) {\\r\\n            addresses[rewarderId + 1] = address(\\r\\n                pool.rewarders[rewarderId].rewardToken()\\r\\n            );\\r\\n\\r\\n            symbols[rewarderId + 1] = IBoringERC20(\\r\\n                pool.rewarders[rewarderId].rewardToken()\\r\\n            ).safeSymbol();\\r\\n\\r\\n            amounts[rewarderId + 1] = pool.rewarders[rewarderId].pendingTokens(\\r\\n                _user\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // View function to see if user can harvest Solar.\\r\\n    function canHarvest(uint256 _pid, address _user)\\r\\n        public\\r\\n        view\\r\\n        validatePoolByPid(_pid)\\r\\n        returns (bool)\\r\\n    {\\r\\n        UserInfo storage user = userInfo[_pid][_user];\\r\\n        return\\r\\n            block.number >= startBlock &&\\r\\n            block.timestamp >= user.nextHarvestUntil;\\r\\n    }\\r\\n\\r\\n    // Update reward vairables for all pools. Be careful of gas spending!\\r\\n    function massUpdatePools() public {\\r\\n        uint256 length = poolInfo.length;\\r\\n        for (uint256 pid = 0; pid < length; ++pid) {\\r\\n            updatePool(pid);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Update reward variables of the given pool to be up-to-date.\\r\\n    function updatePool(uint256 _pid) public validatePoolByPid(_pid) {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n\\r\\n        if (block.number <= pool.lastRewardBlock) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 lpSupply = pool.totalLp;\\r\\n\\r\\n        if (lpSupply == 0 || pool.allocPoint == 0) {\\r\\n            pool.lastRewardBlock = block.number;\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\\r\\n\\r\\n        uint256 solarReward = ((multiplier * solarPerBlock) * pool.allocPoint) /\\r\\n            totalAllocPoint;\\r\\n\\r\\n        uint256 lpPercent = 1000 -\\r\\n            teamPercent -\\r\\n            treasuryPercent -\\r\\n            investorPercent;\\r\\n\\r\\n        solar.mint(teamAddress, (solarReward * teamPercent) / 1000);\\r\\n        solar.mint(treasuryAddress, (solarReward * treasuryPercent) / 1000);\\r\\n        solar.mint(investorAddress, (solarReward * investorPercent) / 1000);\\r\\n        solar.mint(address(this), (solarReward * lpPercent) / 1000);\\r\\n\\r\\n        pool.accSolarPerShare =\\r\\n            pool.accSolarPerShare +\\r\\n            (((solarReward * 1e12) / pool.totalLp) * lpPercent) /\\r\\n            1000;\\r\\n        pool.lastRewardBlock = block.number;\\r\\n    }\\r\\n\\r\\n    // Deposit tokens for Solar allocation.\\r\\n    function deposit(uint256 _pid, uint256 _amount)\\r\\n        public\\r\\n        nonReentrant\\r\\n        validatePoolByPid(_pid)\\r\\n    {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n\\r\\n        updatePool(_pid);\\r\\n\\r\\n        payOrLockupPendingSolar(_pid);\\r\\n\\r\\n        if (_amount > 0) {\\r\\n            uint256 beforeDeposit = pool.lpToken.balanceOf(address(this));\\r\\n            pool.lpToken.safeTransferFrom(msg.sender, address(this), _amount);\\r\\n            uint256 afterDeposit = pool.lpToken.balanceOf(address(this));\\r\\n\\r\\n            _amount = afterDeposit - beforeDeposit;\\r\\n\\r\\n            if (pool.depositFeeBP > 0) {\\r\\n                uint256 depositFee = (_amount * pool.depositFeeBP) / 10000;\\r\\n                pool.lpToken.safeTransfer(treasuryAddress, depositFee);\\r\\n\\r\\n                _amount = _amount - depositFee;\\r\\n            }\\r\\n\\r\\n            user.amount = user.amount + _amount;\\r\\n            pool.totalLp = pool.totalLp + _amount;\\r\\n\\r\\n            if (address(pool.lpToken) == address(solar)) {\\r\\n                totalSolarInPools = totalSolarInPools + _amount;\\r\\n            }\\r\\n        }\\r\\n        user.rewardDebt = (user.amount * pool.accSolarPerShare) / 1e12;\\r\\n\\r\\n        for (\\r\\n            uint256 rewarderId = 0;\\r\\n            rewarderId < pool.rewarders.length;\\r\\n            ++rewarderId\\r\\n        ) {\\r\\n            pool.rewarders[rewarderId].onSolarReward(msg.sender, user.amount);\\r\\n        }\\r\\n\\r\\n        emit Deposit(msg.sender, _pid, _amount);\\r\\n    }\\r\\n\\r\\n    // Withdraw tokens\\r\\n    function withdraw(uint256 _pid, uint256 _amount)\\r\\n        public\\r\\n        nonReentrant\\r\\n        validatePoolByPid(_pid)\\r\\n    {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n\\r\\n        //this will make sure that user can only withdraw from his pool\\r\\n        require(user.amount >= _amount, \\\"withdraw: user amount not enough\\\");\\r\\n\\r\\n        //Cannot withdraw more than pool's balance\\r\\n        require(pool.totalLp >= _amount, \\\"withdraw: pool total not enough\\\");\\r\\n\\r\\n        updatePool(_pid);\\r\\n\\r\\n        payOrLockupPendingSolar(_pid);\\r\\n\\r\\n        if (_amount > 0) {\\r\\n            user.amount = user.amount - _amount;\\r\\n            pool.totalLp = pool.totalLp - _amount;\\r\\n            if (address(pool.lpToken) == address(solar)) {\\r\\n                totalSolarInPools = totalSolarInPools - _amount;\\r\\n            }\\r\\n            pool.lpToken.safeTransfer(msg.sender, _amount);\\r\\n        }\\r\\n        user.rewardDebt = (user.amount * pool.accSolarPerShare) / 1e12;\\r\\n\\r\\n        for (\\r\\n            uint256 rewarderId = 0;\\r\\n            rewarderId < pool.rewarders.length;\\r\\n            ++rewarderId\\r\\n        ) {\\r\\n            pool.rewarders[rewarderId].onSolarReward(msg.sender, user.amount);\\r\\n        }\\r\\n\\r\\n        emit Withdraw(msg.sender, _pid, _amount);\\r\\n    }\\r\\n\\r\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\r\\n    function emergencyWithdraw(uint256 _pid) public nonReentrant {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n        uint256 amount = user.amount;\\r\\n\\r\\n        //Cannot withdraw more than pool's balance\\r\\n        require(\\r\\n            pool.totalLp >= amount,\\r\\n            \\\"emergency withdraw: pool total not enough\\\"\\r\\n        );\\r\\n\\r\\n        user.amount = 0;\\r\\n        user.rewardDebt = 0;\\r\\n        user.rewardLockedUp = 0;\\r\\n        user.nextHarvestUntil = 0;\\r\\n        pool.totalLp = pool.totalLp - amount;\\r\\n\\r\\n        if (address(pool.lpToken) == address(solar)) {\\r\\n            totalSolarInPools = totalSolarInPools - amount;\\r\\n        }\\r\\n\\r\\n        pool.lpToken.safeTransfer(msg.sender, amount);\\r\\n\\r\\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\\r\\n    }\\r\\n\\r\\n    // Pay or lockup pending Solar.\\r\\n    function payOrLockupPendingSolar(uint256 _pid) internal {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n\\r\\n        if (user.nextHarvestUntil == 0 && block.number >= startBlock) {\\r\\n            user.nextHarvestUntil = block.timestamp + pool.harvestInterval;\\r\\n        }\\r\\n\\r\\n        uint256 pending = ((user.amount * pool.accSolarPerShare) / 1e12) -\\r\\n            user.rewardDebt;\\r\\n\\r\\n        if (canHarvest(_pid, msg.sender)) {\\r\\n            if (pending > 0 || user.rewardLockedUp > 0) {\\r\\n                uint256 totalRewards = pending + user.rewardLockedUp;\\r\\n\\r\\n                // reset lockup\\r\\n                totalLockedUpRewards =\\r\\n                    totalLockedUpRewards -\\r\\n                    user.rewardLockedUp;\\r\\n\\r\\n                user.rewardLockedUp = 0;\\r\\n                user.nextHarvestUntil = block.timestamp + pool.harvestInterval;\\r\\n\\r\\n                // send rewards\\r\\n                safeSolarTransfer(msg.sender, totalRewards);\\r\\n            }\\r\\n        } else if (pending > 0) {\\r\\n            user.rewardLockedUp = user.rewardLockedUp + pending;\\r\\n            totalLockedUpRewards = totalLockedUpRewards + pending;\\r\\n            emit RewardLockedUp(msg.sender, _pid, pending);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Safe Solar transfer function, just in case if rounding error causes pool do not have enough Solar.\\r\\n    function safeSolarTransfer(address _to, uint256 _amount) internal {\\r\\n        if (solar.balanceOf(address(this)) > totalSolarInPools) {\\r\\n            //solarBal = total Solar in SolarDistributor - total Solar in Solar pools, this will make sure that SolarDistributor never transfer rewards from deposited Solar pools\\r\\n            uint256 solarBal = solar.balanceOf(address(this)) -\\r\\n                totalSolarInPools;\\r\\n            if (_amount >= solarBal) {\\r\\n                solar.safeTransfer(_to, solarBal);\\r\\n            } else if (_amount > 0) {\\r\\n                solar.safeTransfer(_to, _amount);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function updateEmissionRate(uint256 _solarPerBlock) public onlyOwner {\\r\\n        massUpdatePools();\\r\\n\\r\\n        emit EmissionRateUpdated(msg.sender, solarPerBlock, _solarPerBlock);\\r\\n\\r\\n        solarPerBlock = _solarPerBlock;\\r\\n    }\\r\\n\\r\\n    function updateAllocPoint(uint256 _pid, uint256 _allocPoint)\\r\\n        public\\r\\n        onlyOwner\\r\\n    {\\r\\n        massUpdatePools();\\r\\n\\r\\n        emit AllocPointsUpdated(\\r\\n            msg.sender,\\r\\n            poolInfo[_pid].allocPoint,\\r\\n            _allocPoint\\r\\n        );\\r\\n\\r\\n        totalAllocPoint =\\r\\n            totalAllocPoint -\\r\\n            poolInfo[_pid].allocPoint +\\r\\n            _allocPoint;\\r\\n        poolInfo[_pid].allocPoint = _allocPoint;\\r\\n    }\\r\\n\\r\\n    // Function to harvest many pools in a single transaction\\r\\n    function harvestMany(uint256[] calldata _pids) public {\\r\\n        for (uint256 index = 0; index < _pids.length; ++index) {\\r\\n            deposit(_pids[index], 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Update team address by the previous team address.\\r\\n    function setTeamAddress(address _teamAddress) public {\\r\\n        require(\\r\\n            msg.sender == teamAddress,\\r\\n            \\\"set team address: only previous team address can call this method\\\"\\r\\n        );\\r\\n        teamAddress = _teamAddress;\\r\\n        emit SetTeamAddress(msg.sender, _teamAddress);\\r\\n    }\\r\\n\\r\\n    function setTeamPercent(uint256 _newTeamPercent) public onlyOwner {\\r\\n        require(\\r\\n            0 <= _newTeamPercent && _newTeamPercent <= 1000,\\r\\n            \\\"set team percent: invalid percent value\\\"\\r\\n        );\\r\\n        require(\\r\\n            treasuryPercent + _newTeamPercent + investorPercent <= 1000,\\r\\n            \\\"set team percent: total percent over max\\\"\\r\\n        );\\r\\n        emit SetTeamPercent(teamPercent, _newTeamPercent);\\r\\n        teamPercent = _newTeamPercent;\\r\\n    }\\r\\n\\r\\n    // Update treasury address by the previous treasury.\\r\\n    function setTreasuryAddr(address _treasuryAddress) public {\\r\\n        require(msg.sender == treasuryAddress, \\\"set treasury address: wut?\\\");\\r\\n        treasuryAddress = _treasuryAddress;\\r\\n        emit SetTreasuryAddress(msg.sender, _treasuryAddress);\\r\\n    }\\r\\n\\r\\n    function setTreasuryPercent(uint256 _newTreasuryPercent) public onlyOwner {\\r\\n        require(\\r\\n            0 <= _newTreasuryPercent && _newTreasuryPercent <= 1000,\\r\\n            \\\"set treasury percent: invalid percent value\\\"\\r\\n        );\\r\\n        require(\\r\\n            teamPercent + _newTreasuryPercent + investorPercent <= 1000,\\r\\n            \\\"set treasury percent: total percent over max\\\"\\r\\n        );\\r\\n        emit SetTeamPercent(treasuryPercent, _newTreasuryPercent);\\r\\n        treasuryPercent = _newTreasuryPercent;\\r\\n    }\\r\\n\\r\\n    // Update the investor address by the previous investor.\\r\\n    function setInvestorAddress(address _investorAddress) public {\\r\\n        require(\\r\\n            msg.sender == investorAddress,\\r\\n            \\\"set investor address: only previous investor can call this method\\\"\\r\\n        );\\r\\n        investorAddress = _investorAddress;\\r\\n        emit SetInvestorAddress(msg.sender, _investorAddress);\\r\\n    }\\r\\n\\r\\n    function setInvestorPercent(uint256 _newInvestorPercent) public onlyOwner {\\r\\n        require(\\r\\n            0 <= _newInvestorPercent && _newInvestorPercent <= 1000,\\r\\n            \\\"set investor percent: invalid percent value\\\"\\r\\n        );\\r\\n        require(\\r\\n            teamPercent + _newInvestorPercent + treasuryPercent <= 1000,\\r\\n            \\\"set investor percent: total percent over max\\\"\\r\\n        );\\r\\n        emit SetTeamPercent(investorPercent, _newInvestorPercent);\\r\\n        investorPercent = _newInvestorPercent;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb5f6594bae65162d4f4543470d2b39247da7fd3e192d3d938466859b7e821447\",\"license\":\"MIT\"},\"contracts/farm/v2/libraries/BoringERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\n// solhint-disable avoid-low-level-calls\\r\\nimport \\\"./IBoringERC20.sol\\\";\\r\\n\\r\\nlibrary BoringERC20 {\\r\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\r\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\r\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\r\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\r\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\r\\n\\r\\n    function returnDataToString(bytes memory data)\\r\\n        internal\\r\\n        pure\\r\\n        returns (string memory)\\r\\n    {\\r\\n        if (data.length >= 64) {\\r\\n            return abi.decode(data, (string));\\r\\n        } else if (data.length == 32) {\\r\\n            uint8 i = 0;\\r\\n            while (i < 32 && data[i] != 0) {\\r\\n                i++;\\r\\n            }\\r\\n            bytes memory bytesArray = new bytes(i);\\r\\n            for (i = 0; i < 32 && data[i] != 0; i++) {\\r\\n                bytesArray[i] = data[i];\\r\\n            }\\r\\n            return string(bytesArray);\\r\\n        } else {\\r\\n            return \\\"???\\\";\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\\r\\n    /// @param token The address of the ERC-20 token contract.\\r\\n    /// @return (string) Token symbol.\\r\\n    function safeSymbol(IBoringERC20 token)\\r\\n        internal\\r\\n        view\\r\\n        returns (string memory)\\r\\n    {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(\\r\\n            abi.encodeWithSelector(SIG_SYMBOL)\\r\\n        );\\r\\n        return success ? returnDataToString(data) : \\\"???\\\";\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\\r\\n    /// @param token The address of the ERC-20 token contract.\\r\\n    /// @return (string) Token name.\\r\\n    function safeName(IBoringERC20 token)\\r\\n        internal\\r\\n        view\\r\\n        returns (string memory)\\r\\n    {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(\\r\\n            abi.encodeWithSelector(SIG_NAME)\\r\\n        );\\r\\n        return success ? returnDataToString(data) : \\\"???\\\";\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\\r\\n    /// @param token The address of the ERC-20 token contract.\\r\\n    /// @return (uint8) Token decimals.\\r\\n    function safeDecimals(IBoringERC20 token) internal view returns (uint8) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(\\r\\n            abi.encodeWithSelector(SIG_DECIMALS)\\r\\n        );\\r\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\r\\n    /// Reverts on a failed transfer.\\r\\n    /// @param token The address of the ERC-20 token.\\r\\n    /// @param to Transfer tokens to.\\r\\n    /// @param amount The token amount.\\r\\n    function safeTransfer(\\r\\n        IBoringERC20 token,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = address(token).call(\\r\\n            abi.encodeWithSelector(SIG_TRANSFER, to, amount)\\r\\n        );\\r\\n        require(\\r\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\r\\n            \\\"BoringERC20: Transfer failed\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\r\\n    /// Reverts on a failed transfer.\\r\\n    /// @param token The address of the ERC-20 token.\\r\\n    /// @param from Transfer tokens from.\\r\\n    /// @param to Transfer tokens to.\\r\\n    /// @param amount The token amount.\\r\\n    function safeTransferFrom(\\r\\n        IBoringERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = address(token).call(\\r\\n            abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount)\\r\\n        );\\r\\n        require(\\r\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\r\\n            \\\"BoringERC20: TransferFrom failed\\\"\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8d7fdeae919fa55b40b1d6da668d1ae791137deb154b68f24d75fe6b1901a44d\",\"license\":\"MIT\"},\"contracts/farm/v2/libraries/IBoringERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\ninterface IBoringERC20 {\\r\\n    function mint(address to, uint256 amount) external;\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n    /// @notice EIP 2612\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xf47947a40bd436a7d24bd22f3cf673977512966a6cbae11e551e48bb618044c7\",\"license\":\"MIT\"},\"contracts/farm/v2/rewarders/IRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\nimport \\\"../libraries/IBoringERC20.sol\\\";\\r\\n\\r\\ninterface IRewarder {\\r\\n    function onSolarReward(address user, uint256 newLpAmount) external;\\r\\n\\r\\n    function pendingTokens(address user)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 pending);\\r\\n\\r\\n    function rewardToken() external view returns (IBoringERC20);\\r\\n}\\r\\n\",\"keccak256\":\"0xdec362347027a4a9f8ff2f6c0d961f85d1fabba01aea9452b67b4b03f8819156\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600060065560006009553480156200001b57600080fd5b5060405162004f8838038062004f888339810160408190526200003e91620002c6565b620000493362000276565b600180556103e8831115620000b55760405162461bcd60e51b815260206004820152602760248201527f636f6e7374727563746f723a20696e76616c6964207465616d2070657263656e604482015266742076616c756560c81b60648201526084015b60405180910390fd5b6103e88211156200011d5760405162461bcd60e51b815260206004820152602b60248201527f636f6e7374727563746f723a20696e76616c696420747265617375727920706560448201526a7263656e742076616c756560a81b6064820152608401620000ac565b6103e8811115620001855760405162461bcd60e51b815260206004820152602b60248201527f636f6e7374727563746f723a20696e76616c696420696e766573746f7220706560448201526a7263656e742076616c756560a81b6064820152608401620000ac565b6103e88162000195848662000354565b620001a1919062000354565b1115620001fd5760405162461bcd60e51b815260206004820152602360248201527f636f6e7374727563746f723a20746f74616c2070657263656e74206f766572206044820152620dac2f60eb1b6064820152608401620000ac565b6200020d436312cc030062000354565b600755600280546001600160a01b03199081166001600160a01b039a8b1617909155600397909755600a8054881696891696909617909555600b8054871694881694909417909355600c80549095169190951617909255600d92909255600e55600f5562000392565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080600080600080600080610100898b031215620002e3578384fd5b8851620002f08162000379565b60208a015160408b015191995097506200030a8162000379565b60608a01519096506200031d8162000379565b60808a0151909550620003308162000379565b60a08a015160c08b015160e0909b0151999c989b5096999598909790945092505050565b600082198211156200037457634e487b7160e01b81526011600452602481fd5b500190565b6001600160a01b03811681146200038f57600080fd5b50565b614be680620003a26000396000f3fe608060405234801561001057600080fd5b50600436106102c85760003560e01c8063715018a61161017b578063c5f956af116100d8578063e2bbb1581161008c578063eddf965211610071578063eddf965214610636578063f2fde38b14610649578063ffcd42631461065c576102c8565b8063e2bbb15814610603578063e6fa6d6d14610616576102c8565b8063dc640ac9116100bd578063dc640ac9146105dd578063de73149d146105f0578063e164ac50146105fa576102c8565b8063c5f956af146105b4578063d761595c146105d4576102c8565b80638dbb1e3a1161012f578063949e630211610114578063949e630214610586578063a7e05b9c14610599578063afbcfea1146105ac576102c8565b80638dbb1e3a1461051357806393f1a40b14610526576102c8565b8063876d3c9c11610160578063876d3c9c146104cf57806389a2bc25146104e25780638da5cb5b146104f5576102c8565b8063715018a6146104ab578063812c64f1146104b3576102c8565b80633cb5ba9e11610229578063508593ab116101dd5780635312ea8e116101c25780635312ea8e1461047d578063630b5ba1146104905780636690864e14610498576102c8565b8063508593ab1461045757806351eb05a61461046a576102c8565b8063441a3e701161020e578063441a3e7014610432578063474fa6301461044557806348cd4cb11461044e576102c8565b80633cb5ba9e1461041657806342602f1e1461041f576102c8565b80631526fe27116102805780631c75f085116102655780631c75f085146103c05780632081ccc4146103e05780632e6c998d146103f3576102c8565b80631526fe271461035457806317caf6f1146103b7576102c8565b8063081e3eda116102b1578063081e3eda146102f25780630ba84cd2146102fa57806312e228fd1461030f576102c8565b806304ef9d58146102cd5780630735b208146102e9575b600080fd5b6102d6600e5481565b6040519081526020015b60405180910390f35b6102d6600f5481565b6004546102d6565b61030d610308366004614746565b61067e565b005b600c5461032f9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016102e0565b610367610362366004614746565b61074f565b6040805173ffffffffffffffffffffffffffffffffffffffff9098168852602088019690965294860193909352606085019190915261ffff16608084015260a083015260c082015260e0016102e0565b6102d660065481565b600a5461032f9073ffffffffffffffffffffffffffffffffffffffff1681565b61030d6103ee36600461483e565b6107b9565b610406610401366004614776565b610c95565b60405190151581526020016102e0565b6102d660035481565b61030d61042d3660046145e7565b610d53565b61030d61044036600461481d565b610e91565b6102d660085481565b6102d660075481565b61030d6104653660046147a5565b61129f565b61030d610478366004614746565b611782565b61030d61048b366004614746565b611c4e565b61030d611e87565b61030d6104a63660046145e7565b611eae565b61030d611fec565b6104bc6103e881565b60405161ffff90911681526020016102e0565b61030d6104dd366004614746565b612079565b61030d6104f0366004614746565b612279565b60005473ffffffffffffffffffffffffffffffffffffffff1661032f565b6102d661052136600461481d565b612479565b610566610534366004614776565b600560209081526000928352604080842090915290825290208054600182015460028301546003909301549192909184565b6040805194855260208501939093529183015260608201526080016102e0565b61030d610594366004614746565b61248c565b61030d6105a73660046145e7565b61268c565b61030d61277e565b600b5461032f9073ffffffffffffffffffffffffffffffffffffffff1681565b6102d660095481565b61030d6105eb366004614603565b61290d565b6102d66212750081565b6102d6600d5481565b61030d61061136600461481d565b612977565b60025461032f9073ffffffffffffffffffffffffffffffffffffffff1681565b61030d61064436600461481d565b612e61565b61030d6106573660046145e7565b61304c565b61066f61066a366004614776565b61317c565b6040516102e093929190614912565b60005473ffffffffffffffffffffffffffffffffffffffff163314610704576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b61070c611e87565b600354604080519182526020820183905233917feedc6338c9c1ad8f3cd6c90dd09dbe98dbd57e610d3e59a17996d07acb0d9511910160405180910390a2600355565b6004818154811061075f57600080fd5b6000918252602090912060089091020180546001820154600283015460038401546004850154600586015460069096015473ffffffffffffffffffffffffffffffffffffffff909516965092949193909261ffff16919087565b60005473ffffffffffffffffffffffffffffffffffffffff16331461083a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106fb565b600454869081106108a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f506f6f6c20646f6573206e6f742065786973740000000000000000000000000060448201526064016106fb565b6103e861ffff86161115610917576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f7365743a206465706f7369742066656520746f6f20686967680000000000000060448201526064016106fb565b62127500841115610984576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f7365743a20696e76616c6964206861727665737420696e74657276616c00000060448201526064016106fb565b60005b82811015610a5b576109e58484838181106109cb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906109e091906145e7565b6139db565b610a4b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f6164643a207265776172646572206d75737420626520636f6e7472616374000060448201526064016106fb565b610a5481614ad7565b9050610987565b50610a64611e87565b8560048881548110610a9f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906008020160010154600654610abe9190614a94565b610ac89190614a06565b6006819055508560048881548110610b09577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060080201600101819055508460048881548110610b59577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906008020160040160006101000a81548161ffff021916908361ffff1602179055508360048881548110610bbf577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906008020160050181905550828260048981548110610c10577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600802016007019190610c2e929190614475565b508282604051610c3f9291906148a7565b6040805191829003822088835261ffff881660208401529082018690529088907f5ed6f0deef9ab49d02900b40d596df4cd637a2a7fbfa56bbcb377389d3ce8d289060600160405180910390a350505050505050565b60045460009083908110610d05576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f506f6f6c20646f6573206e6f742065786973740000000000000000000000000060448201526064016106fb565b600084815260056020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845290915290206007544310801590610d4a575080600301544210155b95945050505050565b600c5473ffffffffffffffffffffffffffffffffffffffff163314610e20576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604160248201527f73657420696e766573746f7220616464726573733a206f6e6c7920707265766960448201527f6f757320696e766573746f722063616e2063616c6c2074686973206d6574686f60648201527f6400000000000000000000000000000000000000000000000000000000000000608482015260a4016106fb565b600c80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff831690811790915560405133907f6260cb34f06b782e83bde168f7d74ab2133041cb53b63ce22b127822a92b679190600090a350565b60026001541415610efe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106fb565b600260015560045482908110610f70576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f506f6f6c20646f6573206e6f742065786973740000000000000000000000000060448201526064016106fb565b600060048481548110610fac577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60009182526020808320878452600582526040808520338652909252922080546008909202909201925084111561103f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f77697468647261773a207573657220616d6f756e74206e6f7420656e6f75676860448201526064016106fb565b83826006015410156110ad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f77697468647261773a20706f6f6c20746f74616c206e6f7420656e6f7567680060448201526064016106fb565b6110b685611782565b6110bf856139e5565b83156111435780546110d2908590614a94565b815560068201546110e4908590614a94565b6006830155600254825473ffffffffffffffffffffffffffffffffffffffff90811691161415611120578360095461111c9190614a94565b6009555b81546111439073ffffffffffffffffffffffffffffffffffffffff163386613b94565b6003820154815464e8d4a510009161115a91614a57565b6111649190614a1e565b600182015560005b600783015481101561125b578260070181815481106111b4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60009182526020909120015482546040517f9cd00977000000000000000000000000000000000000000000000000000000008152336004820152602481019190915273ffffffffffffffffffffffffffffffffffffffff90911690639cd0097790604401600060405180830381600087803b15801561123257600080fd5b505af1158015611246573d6000803e3d6000fd5b505050508061125490614ad7565b905061116c565b50604051848152859033907ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568906020015b60405180910390a3505060018055505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314611320576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106fb565b6103e861ffff85161115611390576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f6164643a206465706f7369742066656520746f6f20686967680000000000000060448201526064016106fb565b621275008311156113fd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f6164643a20696e76616c6964206861727665737420696e74657276616c00000060448201526064016106fb565b611406856139db565b611492576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f6164643a204c5020746f6b656e206d75737420626520612076616c696420636f60448201527f6e7472616374000000000000000000000000000000000000000000000000000060648201526084016106fb565b60005b8181101561154f576114d98383838181106109cb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b61153f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f6164643a207265776172646572206d75737420626520636f6e7472616374000060448201526064016106fb565b61154881614ad7565b9050611495565b50611558611e87565b6000600754431161156b5760075461156d565b435b90508660065461157d9190614a06565b60068190555060046040518061010001604052808873ffffffffffffffffffffffffffffffffffffffff168152602001898152602001838152602001600081526020018761ffff168152602001868152602001600081526020018585808060200260200160405190810160405280939291908181526020018383602002808284376000920182905250939094525050835460018082018655948252602091829020845160089092020180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9092169190911781558382015194810194909455604083015160028501556060830151600385015560808301516004850180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff90921691909117905560a0830151600585015560c0830151600685015560e083015180519394936116f29350600785019291909101906144fd565b50505082826040516117059291906148a7565b60405190819003902060045473ffffffffffffffffffffffffffffffffffffffff88169061173590600190614a94565b604080518b815261ffff8a1660208201529081018890527f5ed295c4f5af5aeb1ccd905e1cd55a86ab3bb9fc1fe2346ff64ac47dbef366619060600160405180910390a450505050505050565b600454819081106117ef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f506f6f6c20646f6573206e6f742065786973740000000000000000000000000060448201526064016106fb565b60006004838154811061182b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906008020190508060020154431161184c5750611c4a565b600681015480158061186057506001820154155b15611872575043600290910155611c4a565b6000611882836002015443612479565b9050600060065484600101546003548461189c9190614a57565b6118a69190614a57565b6118b09190614a1e565b90506000600f54600e54600d546103e86118ca9190614a94565b6118d49190614a94565b6118de9190614a94565b600254600a54600d5492935073ffffffffffffffffffffffffffffffffffffffff918216926340c10f1992909116906103e89061191b9087614a57565b6119259190614a1e565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401600060405180830381600087803b15801561199057600080fd5b505af11580156119a4573d6000803e3d6000fd5b5050600254600b54600e5473ffffffffffffffffffffffffffffffffffffffff92831694506340c10f1993509116906103e8906119e19087614a57565b6119eb9190614a1e565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401600060405180830381600087803b158015611a5657600080fd5b505af1158015611a6a573d6000803e3d6000fd5b5050600254600c54600f5473ffffffffffffffffffffffffffffffffffffffff92831694506340c10f1993509116906103e890611aa79087614a57565b611ab19190614a1e565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401600060405180830381600087803b158015611b1c57600080fd5b505af1158015611b30573d6000803e3d6000fd5b505060025473ffffffffffffffffffffffffffffffffffffffff1691506340c10f199050306103e8611b628587614a57565b611b6c9190614a1e565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401600060405180830381600087803b158015611bd757600080fd5b505af1158015611beb573d6000803e3d6000fd5b505050506103e88186600601548464e8d4a51000611c099190614a57565b611c139190614a1e565b611c1d9190614a57565b611c279190614a1e565b8560030154611c369190614a06565b600386015550504360029093019290925550505b5050565b60026001541415611cbb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106fb565b6002600181905550600060048281548110611cff577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60009182526020808320858452600582526040808520338652909252922080546008929092029092016006810154909350811115611dbf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f656d657267656e63792077697468647261773a20706f6f6c20746f74616c206e60448201527f6f7420656e6f756768000000000000000000000000000000000000000000000060648201526084016106fb565b6000808355600183018190556002830181905560038301556006830154611de7908290614a94565b6006840155600254835473ffffffffffffffffffffffffffffffffffffffff90811691161415611e235780600954611e1f9190614a94565b6009555b8254611e469073ffffffffffffffffffffffffffffffffffffffff163383613b94565b604051818152849033907fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05959060200160405180910390a35050600180555050565b60045460005b81811015611c4a57611e9e81611782565b611ea781614ad7565b9050611e8d565b600a5473ffffffffffffffffffffffffffffffffffffffff163314611f7b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604160248201527f736574207465616d20616464726573733a206f6e6c792070726576696f75732060448201527f7465616d20616464726573732063616e2063616c6c2074686973206d6574686f60648201527f6400000000000000000000000000000000000000000000000000000000000000608482015260a4016106fb565b600a80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff831690811790915560405133907f42fbc17d847fdc3e5c82da842a5ef3979c64f3b94cd4e7382310fd5525c6ee0f90600090a350565b60005473ffffffffffffffffffffffffffffffffffffffff16331461206d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106fb565b6120776000613d04565b565b60005473ffffffffffffffffffffffffffffffffffffffff1633146120fa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106fb565b6103e881111561218c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f73657420696e766573746f722070657263656e743a20696e76616c696420706560448201527f7263656e742076616c756500000000000000000000000000000000000000000060648201526084016106fb565b6103e8600e5482600d546121a09190614a06565b6121aa9190614a06565b1115612238576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f73657420696e766573746f722070657263656e743a20746f74616c207065726360448201527f656e74206f766572206d6178000000000000000000000000000000000000000060648201526084016106fb565b600f5460408051918252602082018390527f204a076f4a2e4e5e646bb8841cc285306bf747e277f40dbfd5750e782e17b7a6910160405180910390a1600f55565b60005473ffffffffffffffffffffffffffffffffffffffff1633146122fa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106fb565b6103e881111561238c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f7365742074726561737572792070657263656e743a20696e76616c696420706560448201527f7263656e742076616c756500000000000000000000000000000000000000000060648201526084016106fb565b6103e8600f5482600d546123a09190614a06565b6123aa9190614a06565b1115612438576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f7365742074726561737572792070657263656e743a20746f74616c207065726360448201527f656e74206f766572206d6178000000000000000000000000000000000000000060648201526084016106fb565b600e5460408051918252602082018390527f204a076f4a2e4e5e646bb8841cc285306bf747e277f40dbfd5750e782e17b7a6910160405180910390a1600e55565b60006124858383614a94565b9392505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461250d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106fb565b6103e881111561259f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f736574207465616d2070657263656e743a20696e76616c69642070657263656e60448201527f742076616c75650000000000000000000000000000000000000000000000000060648201526084016106fb565b6103e8600f5482600e546125b39190614a06565b6125bd9190614a06565b111561264b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f736574207465616d2070657263656e743a20746f74616c2070657263656e742060448201527f6f766572206d617800000000000000000000000000000000000000000000000060648201526084016106fb565b600d5460408051918252602082018390527f204a076f4a2e4e5e646bb8841cc285306bf747e277f40dbfd5750e782e17b7a6910160405180910390a1600d55565b600b5473ffffffffffffffffffffffffffffffffffffffff16331461270d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f73657420747265617375727920616464726573733a207775743f00000000000060448201526064016106fb565b600b80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff831690811790915560405133907f61885cdba916be748ff3e3f6f15e4206153b8ea3b7acabade9d04b4063a8351090600090a350565b60005473ffffffffffffffffffffffffffffffffffffffff1633146127ff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106fb565b6007544310612890576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f73746172744661726d696e673a206661726d207374617274656420616c72656160448201527f647900000000000000000000000000000000000000000000000000000000000060648201526084016106fb565b60045460005b81811015612905576000600482815481106128da577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060080201905043816002018190555050806128fe90614ad7565b9050612896565b505043600755565b60005b8181101561297257612962838383818110612954577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201356000612977565b61296b81614ad7565b9050612910565b505050565b600260015414156129e4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106fb565b600260015560045482908110612a56576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f506f6f6c20646f6573206e6f742065786973740000000000000000000000000060448201526064016106fb565b600060048481548110612a92577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60009182526020808320878452600582526040808520338652909252922060089091029091019150612ac385611782565b612acc856139e5565b8315612d145781546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b158015612b3b57600080fd5b505afa158015612b4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b73919061475e565b8354909150612b9a9073ffffffffffffffffffffffffffffffffffffffff16333088613d79565b82546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b158015612c0357600080fd5b505afa158015612c17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c3b919061475e565b9050612c478282614a94565b600485015490965061ffff1615612cb657600484015460009061271090612c729061ffff1689614a57565b612c7c9190614a1e565b600b548654919250612ca89173ffffffffffffffffffffffffffffffffffffffff908116911683613b94565b612cb28188614a94565b9650505b8254612cc3908790614a06565b83556006840154612cd5908790614a06565b6006850155600254845473ffffffffffffffffffffffffffffffffffffffff90811691161415612d115785600954612d0d9190614a06565b6009555b50505b6003820154815464e8d4a5100091612d2b91614a57565b612d359190614a1e565b600182015560005b6007830154811015612e2c57826007018181548110612d85577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60009182526020909120015482546040517f9cd00977000000000000000000000000000000000000000000000000000000008152336004820152602481019190915273ffffffffffffffffffffffffffffffffffffffff90911690639cd0097790604401600060405180830381600087803b158015612e0357600080fd5b505af1158015612e17573d6000803e3d6000fd5b5050505080612e2590614ad7565b9050612d3d565b50604051848152859033907f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159060200161128c565b60005473ffffffffffffffffffffffffffffffffffffffff163314612ee2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106fb565b612eea611e87565b3373ffffffffffffffffffffffffffffffffffffffff167f802633c8d26237616d81bdac01bc40fcdf36e098832601582ec19d7e431c5ef360048481548110612f5c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600802016001015483604051612f86929190918252602082015260400190565b60405180910390a28060048381548110612fc9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906008020160010154600654612fe89190614a94565b612ff29190614a06565b6006819055508060048381548110613033577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060080201600101819055505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146130cd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106fb565b73ffffffffffffffffffffffffffffffffffffffff8116613170576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016106fb565b61317981613d04565b50565b60608060608460048054905081106131f0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f506f6f6c20646f6573206e6f742065786973740000000000000000000000000060448201526064016106fb565b60006004878154811061322c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083208a845260058252604080852073ffffffffffffffffffffffffffffffffffffffff8c168652909252922060036008909202909201908101546006820154600283015492945090914311801561328a57508015155b156132f857600061329f856002015443612479565b905060006006548660010154600354846132b99190614a57565b6132c39190614a57565b6132cd9190614a1e565b9050826132df8264e8d4a51000614a57565b6132e99190614a1e565b6132f39085614a06565b935050505b60008360020154846001015464e8d4a5100085876000015461331a9190614a57565b6133249190614a1e565b61332e9190614a94565b6133389190614a06565b600786015490915061334b906001614a06565b67ffffffffffffffff81111561338a577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156133b3578160200160208202803683370190505b5060078601549099506133c7906001614a06565b67ffffffffffffffff811115613406577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561343957816020015b60608152602001906001900390816134245790505b50600786015490985061344d906001614a06565b67ffffffffffffffff81111561348c577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156134b5578160200160208202803683370190505b506002548a5191985073ffffffffffffffffffffffffffffffffffffffff16908a9060009061350d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff928316602091820292909201015260025461353d9116613ef2565b88600081518110613577577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018190525080876000815181106135bd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505060005b60078601548110156139cd57856007018181548110613614577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60009182526020918290200154604080517ff7c618c1000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff9092169263f7c618c192600480840193829003018186803b15801561368357600080fd5b505afa158015613697573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136bb9190614663565b8a6136c7836001614a06565b815181106136fe577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050613839866007018281548110613777577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60009182526020918290200154604080517ff7c618c1000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff9092169263f7c618c192600480840193829003018186803b1580156137e657600080fd5b505afa1580156137fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061381e9190614663565b73ffffffffffffffffffffffffffffffffffffffff16613ef2565b89613845836001614a06565b8151811061387c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052508560070181815481106138c3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000918252602090912001546040517fc031a66f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d811660048301529091169063c031a66f9060240160206040518083038186803b15801561393757600080fd5b505afa15801561394b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061396f919061475e565b8861397b836001614a06565b815181106139b2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60209081029190910101526139c681614ad7565b90506135cc565b505050505050509250925092565b803b15155b919050565b600060048281548110613a21577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083208584526005825260408085203386529092529220600381015460089092029092019250158015613a5d57506007544310155b15613a77576005820154613a719042614a06565b60038201555b6000816001015464e8d4a5100084600301548460000154613a989190614a57565b613aa29190614a1e565b613aac9190614a94565b9050613ab88433610c95565b15613b2a576000811180613ad0575060008260020154115b15613b25576000826002015482613ae79190614a06565b90508260020154600854613afb9190614a94565b600855600060028401556005840154613b149042614a06565b6003840155613b23338261400a565b505b613b8e565b8015613b8e57808260020154613b409190614a06565b6002830155600854613b53908290614a06565b600855604051818152849033907fee470483107f579a55c754fa00613c45a9a3b617a418b39cb0be97e5381ba7c19060200160405180910390a35b50505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790529151600092839290871691613c2b91906148f6565b6000604051808303816000865af19150503d8060008114613c68576040519150601f19603f3d011682016040523d82523d6000602084013e613c6d565b606091505b5091509150818015613c97575080511580613c97575080806020019051810190613c979190614643565b613cfd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f426f72696e6745524332303a205472616e73666572206661696c65640000000060448201526064016106fb565b5050505050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd000000000000000000000000000000000000000000000000000000001790529151600092839290881691613e1891906148f6565b6000604051808303816000865af19150503d8060008114613e55576040519150601f19603f3d011682016040523d82523d6000602084013e613e5a565b606091505b5091509150818015613e84575080511580613e84575080806020019051810190613e849190614643565b613eea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f426f72696e6745524332303a205472616e7366657246726f6d206661696c656460448201526064016106fb565b505050505050565b60408051600481526024810182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f95d89b41000000000000000000000000000000000000000000000000000000001790529051606091600091829173ffffffffffffffffffffffffffffffffffffffff861691613f7491906148f6565b600060405180830381855afa9150503d8060008114613faf576040519150601f19603f3d011682016040523d82523d6000602084013e613fb4565b606091505b509150915081613ff9576040518060400160405280600381526020017f3f3f3f0000000000000000000000000000000000000000000000000000000000815250614002565b614002816141c0565b949350505050565b6009546002546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a082319060240160206040518083038186803b15801561407657600080fd5b505afa15801561408a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140ae919061475e565b1115611c4a576009546002546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000929173ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b15801561412257600080fd5b505afa158015614136573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061415a919061475e565b6141649190614a94565b9050808210614196576002546141919073ffffffffffffffffffffffffffffffffffffffff168483613b94565b612972565b8115612972576002546129729073ffffffffffffffffffffffffffffffffffffffff168484613b94565b606060408251106141e657818060200190518101906141df919061467f565b90506139e0565b81516020141561443b5760005b60208160ff161080156142675750828160ff168151811061423d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b01602001517fff000000000000000000000000000000000000000000000000000000000000001615155b1561427e578061427681614b10565b9150506141f3565b60008160ff1667ffffffffffffffff8111156142c3577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156142ed576020820181803683370190505b509050600091505b60208260ff161080156143695750838260ff168151811061433f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b01602001517fff000000000000000000000000000000000000000000000000000000000000001615155b1561443257838260ff16815181106143aa577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602001015160f81c60f81b818360ff16815181106143f1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508161442a81614b10565b9250506142f5565b91506139e09050565b5060408051808201909152600381527f3f3f3f000000000000000000000000000000000000000000000000000000000060208201526139e0565b8280548282559060005260206000209081019282156144ed579160200282015b828111156144ed5781547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff843516178255602090920191600190910190614495565b506144f9929150614577565b5090565b8280548282559060005260206000209081019282156144ed579160200282015b828111156144ed57825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90911617825560209092019160019091019061451d565b5b808211156144f95760008155600101614578565b60008083601f84011261459d578081fd5b50813567ffffffffffffffff8111156145b4578182fd5b60208301915083602080830285010111156145ce57600080fd5b9250929050565b803561ffff811681146139e057600080fd5b6000602082840312156145f8578081fd5b813561248581614b8e565b60008060208385031215614615578081fd5b823567ffffffffffffffff81111561462b578182fd5b6146378582860161458c565b90969095509350505050565b600060208284031215614654578081fd5b81518015158114612485578182fd5b600060208284031215614674578081fd5b815161248581614b8e565b600060208284031215614690578081fd5b815167ffffffffffffffff808211156146a7578283fd5b818401915084601f8301126146ba578283fd5b8151818111156146cc576146cc614b5f565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561471257614712614b5f565b8160405282815287602084870101111561472a578586fd5b61473b836020830160208801614aab565b979650505050505050565b600060208284031215614757578081fd5b5035919050565b60006020828403121561476f578081fd5b5051919050565b60008060408385031215614788578182fd5b82359150602083013561479a81614b8e565b809150509250929050565b60008060008060008060a087890312156147bd578182fd5b8635955060208701356147cf81614b8e565b94506147dd604088016145d5565b935060608701359250608087013567ffffffffffffffff8111156147ff578283fd5b61480b89828a0161458c565b979a9699509497509295939492505050565b6000806040838503121561482f578182fd5b50508035926020909101359150565b60008060008060008060a08789031215614856578182fd5b86359550602087013594506147dd604088016145d5565b6000815180845260208085019450808401835b8381101561489c57815187529582019590820190600101614880565b509495945050505050565b60008184825b858110156148eb5781356148c081614b8e565b73ffffffffffffffffffffffffffffffffffffffff16835260209283019291909101906001016148ad565b509095945050505050565b60008251614908818460208701614aab565b9190910192915050565b606080825284519082018190526000906020906080840190828801845b8281101561496157815173ffffffffffffffffffffffffffffffffffffffff168452928401929084019060010161492f565b5050508381038285015285518082528282019080840283018401888501865b838110156149e4577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe080878503018652825180518086526149c6818b88018c8501614aab565b96890196601f01909116939093018701925090860190600101614980565b505086810360408801526149f8818961486d565b9a9950505050505050505050565b60008219821115614a1957614a19614b30565b500190565b600082614a52577f4e487b710000000000000000000000000000000000000000000000000000000081526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614a8f57614a8f614b30565b500290565b600082821015614aa657614aa6614b30565b500390565b60005b83811015614ac6578181015183820152602001614aae565b83811115613b8e5750506000910152565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614b0957614b09614b30565b5060010190565b600060ff821660ff811415614b2757614b27614b30565b60010192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461317957600080fdfea2646970667358221220bfc53d8afb265ad542946de2eeaadbfa31b4e568076a5c71986db0715f657adb64736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102c85760003560e01c8063715018a61161017b578063c5f956af116100d8578063e2bbb1581161008c578063eddf965211610071578063eddf965214610636578063f2fde38b14610649578063ffcd42631461065c576102c8565b8063e2bbb15814610603578063e6fa6d6d14610616576102c8565b8063dc640ac9116100bd578063dc640ac9146105dd578063de73149d146105f0578063e164ac50146105fa576102c8565b8063c5f956af146105b4578063d761595c146105d4576102c8565b80638dbb1e3a1161012f578063949e630211610114578063949e630214610586578063a7e05b9c14610599578063afbcfea1146105ac576102c8565b80638dbb1e3a1461051357806393f1a40b14610526576102c8565b8063876d3c9c11610160578063876d3c9c146104cf57806389a2bc25146104e25780638da5cb5b146104f5576102c8565b8063715018a6146104ab578063812c64f1146104b3576102c8565b80633cb5ba9e11610229578063508593ab116101dd5780635312ea8e116101c25780635312ea8e1461047d578063630b5ba1146104905780636690864e14610498576102c8565b8063508593ab1461045757806351eb05a61461046a576102c8565b8063441a3e701161020e578063441a3e7014610432578063474fa6301461044557806348cd4cb11461044e576102c8565b80633cb5ba9e1461041657806342602f1e1461041f576102c8565b80631526fe27116102805780631c75f085116102655780631c75f085146103c05780632081ccc4146103e05780632e6c998d146103f3576102c8565b80631526fe271461035457806317caf6f1146103b7576102c8565b8063081e3eda116102b1578063081e3eda146102f25780630ba84cd2146102fa57806312e228fd1461030f576102c8565b806304ef9d58146102cd5780630735b208146102e9575b600080fd5b6102d6600e5481565b6040519081526020015b60405180910390f35b6102d6600f5481565b6004546102d6565b61030d610308366004614746565b61067e565b005b600c5461032f9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016102e0565b610367610362366004614746565b61074f565b6040805173ffffffffffffffffffffffffffffffffffffffff9098168852602088019690965294860193909352606085019190915261ffff16608084015260a083015260c082015260e0016102e0565b6102d660065481565b600a5461032f9073ffffffffffffffffffffffffffffffffffffffff1681565b61030d6103ee36600461483e565b6107b9565b610406610401366004614776565b610c95565b60405190151581526020016102e0565b6102d660035481565b61030d61042d3660046145e7565b610d53565b61030d61044036600461481d565b610e91565b6102d660085481565b6102d660075481565b61030d6104653660046147a5565b61129f565b61030d610478366004614746565b611782565b61030d61048b366004614746565b611c4e565b61030d611e87565b61030d6104a63660046145e7565b611eae565b61030d611fec565b6104bc6103e881565b60405161ffff90911681526020016102e0565b61030d6104dd366004614746565b612079565b61030d6104f0366004614746565b612279565b60005473ffffffffffffffffffffffffffffffffffffffff1661032f565b6102d661052136600461481d565b612479565b610566610534366004614776565b600560209081526000928352604080842090915290825290208054600182015460028301546003909301549192909184565b6040805194855260208501939093529183015260608201526080016102e0565b61030d610594366004614746565b61248c565b61030d6105a73660046145e7565b61268c565b61030d61277e565b600b5461032f9073ffffffffffffffffffffffffffffffffffffffff1681565b6102d660095481565b61030d6105eb366004614603565b61290d565b6102d66212750081565b6102d6600d5481565b61030d61061136600461481d565b612977565b60025461032f9073ffffffffffffffffffffffffffffffffffffffff1681565b61030d61064436600461481d565b612e61565b61030d6106573660046145e7565b61304c565b61066f61066a366004614776565b61317c565b6040516102e093929190614912565b60005473ffffffffffffffffffffffffffffffffffffffff163314610704576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b61070c611e87565b600354604080519182526020820183905233917feedc6338c9c1ad8f3cd6c90dd09dbe98dbd57e610d3e59a17996d07acb0d9511910160405180910390a2600355565b6004818154811061075f57600080fd5b6000918252602090912060089091020180546001820154600283015460038401546004850154600586015460069096015473ffffffffffffffffffffffffffffffffffffffff909516965092949193909261ffff16919087565b60005473ffffffffffffffffffffffffffffffffffffffff16331461083a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106fb565b600454869081106108a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f506f6f6c20646f6573206e6f742065786973740000000000000000000000000060448201526064016106fb565b6103e861ffff86161115610917576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f7365743a206465706f7369742066656520746f6f20686967680000000000000060448201526064016106fb565b62127500841115610984576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f7365743a20696e76616c6964206861727665737420696e74657276616c00000060448201526064016106fb565b60005b82811015610a5b576109e58484838181106109cb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906109e091906145e7565b6139db565b610a4b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f6164643a207265776172646572206d75737420626520636f6e7472616374000060448201526064016106fb565b610a5481614ad7565b9050610987565b50610a64611e87565b8560048881548110610a9f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906008020160010154600654610abe9190614a94565b610ac89190614a06565b6006819055508560048881548110610b09577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060080201600101819055508460048881548110610b59577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906008020160040160006101000a81548161ffff021916908361ffff1602179055508360048881548110610bbf577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906008020160050181905550828260048981548110610c10577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600802016007019190610c2e929190614475565b508282604051610c3f9291906148a7565b6040805191829003822088835261ffff881660208401529082018690529088907f5ed6f0deef9ab49d02900b40d596df4cd637a2a7fbfa56bbcb377389d3ce8d289060600160405180910390a350505050505050565b60045460009083908110610d05576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f506f6f6c20646f6573206e6f742065786973740000000000000000000000000060448201526064016106fb565b600084815260056020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845290915290206007544310801590610d4a575080600301544210155b95945050505050565b600c5473ffffffffffffffffffffffffffffffffffffffff163314610e20576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604160248201527f73657420696e766573746f7220616464726573733a206f6e6c7920707265766960448201527f6f757320696e766573746f722063616e2063616c6c2074686973206d6574686f60648201527f6400000000000000000000000000000000000000000000000000000000000000608482015260a4016106fb565b600c80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff831690811790915560405133907f6260cb34f06b782e83bde168f7d74ab2133041cb53b63ce22b127822a92b679190600090a350565b60026001541415610efe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106fb565b600260015560045482908110610f70576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f506f6f6c20646f6573206e6f742065786973740000000000000000000000000060448201526064016106fb565b600060048481548110610fac577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60009182526020808320878452600582526040808520338652909252922080546008909202909201925084111561103f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f77697468647261773a207573657220616d6f756e74206e6f7420656e6f75676860448201526064016106fb565b83826006015410156110ad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f77697468647261773a20706f6f6c20746f74616c206e6f7420656e6f7567680060448201526064016106fb565b6110b685611782565b6110bf856139e5565b83156111435780546110d2908590614a94565b815560068201546110e4908590614a94565b6006830155600254825473ffffffffffffffffffffffffffffffffffffffff90811691161415611120578360095461111c9190614a94565b6009555b81546111439073ffffffffffffffffffffffffffffffffffffffff163386613b94565b6003820154815464e8d4a510009161115a91614a57565b6111649190614a1e565b600182015560005b600783015481101561125b578260070181815481106111b4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60009182526020909120015482546040517f9cd00977000000000000000000000000000000000000000000000000000000008152336004820152602481019190915273ffffffffffffffffffffffffffffffffffffffff90911690639cd0097790604401600060405180830381600087803b15801561123257600080fd5b505af1158015611246573d6000803e3d6000fd5b505050508061125490614ad7565b905061116c565b50604051848152859033907ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568906020015b60405180910390a3505060018055505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314611320576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106fb565b6103e861ffff85161115611390576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f6164643a206465706f7369742066656520746f6f20686967680000000000000060448201526064016106fb565b621275008311156113fd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f6164643a20696e76616c6964206861727665737420696e74657276616c00000060448201526064016106fb565b611406856139db565b611492576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f6164643a204c5020746f6b656e206d75737420626520612076616c696420636f60448201527f6e7472616374000000000000000000000000000000000000000000000000000060648201526084016106fb565b60005b8181101561154f576114d98383838181106109cb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b61153f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f6164643a207265776172646572206d75737420626520636f6e7472616374000060448201526064016106fb565b61154881614ad7565b9050611495565b50611558611e87565b6000600754431161156b5760075461156d565b435b90508660065461157d9190614a06565b60068190555060046040518061010001604052808873ffffffffffffffffffffffffffffffffffffffff168152602001898152602001838152602001600081526020018761ffff168152602001868152602001600081526020018585808060200260200160405190810160405280939291908181526020018383602002808284376000920182905250939094525050835460018082018655948252602091829020845160089092020180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9092169190911781558382015194810194909455604083015160028501556060830151600385015560808301516004850180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff90921691909117905560a0830151600585015560c0830151600685015560e083015180519394936116f29350600785019291909101906144fd565b50505082826040516117059291906148a7565b60405190819003902060045473ffffffffffffffffffffffffffffffffffffffff88169061173590600190614a94565b604080518b815261ffff8a1660208201529081018890527f5ed295c4f5af5aeb1ccd905e1cd55a86ab3bb9fc1fe2346ff64ac47dbef366619060600160405180910390a450505050505050565b600454819081106117ef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f506f6f6c20646f6573206e6f742065786973740000000000000000000000000060448201526064016106fb565b60006004838154811061182b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906008020190508060020154431161184c5750611c4a565b600681015480158061186057506001820154155b15611872575043600290910155611c4a565b6000611882836002015443612479565b9050600060065484600101546003548461189c9190614a57565b6118a69190614a57565b6118b09190614a1e565b90506000600f54600e54600d546103e86118ca9190614a94565b6118d49190614a94565b6118de9190614a94565b600254600a54600d5492935073ffffffffffffffffffffffffffffffffffffffff918216926340c10f1992909116906103e89061191b9087614a57565b6119259190614a1e565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401600060405180830381600087803b15801561199057600080fd5b505af11580156119a4573d6000803e3d6000fd5b5050600254600b54600e5473ffffffffffffffffffffffffffffffffffffffff92831694506340c10f1993509116906103e8906119e19087614a57565b6119eb9190614a1e565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401600060405180830381600087803b158015611a5657600080fd5b505af1158015611a6a573d6000803e3d6000fd5b5050600254600c54600f5473ffffffffffffffffffffffffffffffffffffffff92831694506340c10f1993509116906103e890611aa79087614a57565b611ab19190614a1e565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401600060405180830381600087803b158015611b1c57600080fd5b505af1158015611b30573d6000803e3d6000fd5b505060025473ffffffffffffffffffffffffffffffffffffffff1691506340c10f199050306103e8611b628587614a57565b611b6c9190614a1e565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401600060405180830381600087803b158015611bd757600080fd5b505af1158015611beb573d6000803e3d6000fd5b505050506103e88186600601548464e8d4a51000611c099190614a57565b611c139190614a1e565b611c1d9190614a57565b611c279190614a1e565b8560030154611c369190614a06565b600386015550504360029093019290925550505b5050565b60026001541415611cbb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106fb565b6002600181905550600060048281548110611cff577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60009182526020808320858452600582526040808520338652909252922080546008929092029092016006810154909350811115611dbf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f656d657267656e63792077697468647261773a20706f6f6c20746f74616c206e60448201527f6f7420656e6f756768000000000000000000000000000000000000000000000060648201526084016106fb565b6000808355600183018190556002830181905560038301556006830154611de7908290614a94565b6006840155600254835473ffffffffffffffffffffffffffffffffffffffff90811691161415611e235780600954611e1f9190614a94565b6009555b8254611e469073ffffffffffffffffffffffffffffffffffffffff163383613b94565b604051818152849033907fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05959060200160405180910390a35050600180555050565b60045460005b81811015611c4a57611e9e81611782565b611ea781614ad7565b9050611e8d565b600a5473ffffffffffffffffffffffffffffffffffffffff163314611f7b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604160248201527f736574207465616d20616464726573733a206f6e6c792070726576696f75732060448201527f7465616d20616464726573732063616e2063616c6c2074686973206d6574686f60648201527f6400000000000000000000000000000000000000000000000000000000000000608482015260a4016106fb565b600a80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff831690811790915560405133907f42fbc17d847fdc3e5c82da842a5ef3979c64f3b94cd4e7382310fd5525c6ee0f90600090a350565b60005473ffffffffffffffffffffffffffffffffffffffff16331461206d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106fb565b6120776000613d04565b565b60005473ffffffffffffffffffffffffffffffffffffffff1633146120fa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106fb565b6103e881111561218c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f73657420696e766573746f722070657263656e743a20696e76616c696420706560448201527f7263656e742076616c756500000000000000000000000000000000000000000060648201526084016106fb565b6103e8600e5482600d546121a09190614a06565b6121aa9190614a06565b1115612238576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f73657420696e766573746f722070657263656e743a20746f74616c207065726360448201527f656e74206f766572206d6178000000000000000000000000000000000000000060648201526084016106fb565b600f5460408051918252602082018390527f204a076f4a2e4e5e646bb8841cc285306bf747e277f40dbfd5750e782e17b7a6910160405180910390a1600f55565b60005473ffffffffffffffffffffffffffffffffffffffff1633146122fa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106fb565b6103e881111561238c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f7365742074726561737572792070657263656e743a20696e76616c696420706560448201527f7263656e742076616c756500000000000000000000000000000000000000000060648201526084016106fb565b6103e8600f5482600d546123a09190614a06565b6123aa9190614a06565b1115612438576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f7365742074726561737572792070657263656e743a20746f74616c207065726360448201527f656e74206f766572206d6178000000000000000000000000000000000000000060648201526084016106fb565b600e5460408051918252602082018390527f204a076f4a2e4e5e646bb8841cc285306bf747e277f40dbfd5750e782e17b7a6910160405180910390a1600e55565b60006124858383614a94565b9392505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461250d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106fb565b6103e881111561259f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f736574207465616d2070657263656e743a20696e76616c69642070657263656e60448201527f742076616c75650000000000000000000000000000000000000000000000000060648201526084016106fb565b6103e8600f5482600e546125b39190614a06565b6125bd9190614a06565b111561264b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f736574207465616d2070657263656e743a20746f74616c2070657263656e742060448201527f6f766572206d617800000000000000000000000000000000000000000000000060648201526084016106fb565b600d5460408051918252602082018390527f204a076f4a2e4e5e646bb8841cc285306bf747e277f40dbfd5750e782e17b7a6910160405180910390a1600d55565b600b5473ffffffffffffffffffffffffffffffffffffffff16331461270d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f73657420747265617375727920616464726573733a207775743f00000000000060448201526064016106fb565b600b80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff831690811790915560405133907f61885cdba916be748ff3e3f6f15e4206153b8ea3b7acabade9d04b4063a8351090600090a350565b60005473ffffffffffffffffffffffffffffffffffffffff1633146127ff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106fb565b6007544310612890576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f73746172744661726d696e673a206661726d207374617274656420616c72656160448201527f647900000000000000000000000000000000000000000000000000000000000060648201526084016106fb565b60045460005b81811015612905576000600482815481106128da577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060080201905043816002018190555050806128fe90614ad7565b9050612896565b505043600755565b60005b8181101561297257612962838383818110612954577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201356000612977565b61296b81614ad7565b9050612910565b505050565b600260015414156129e4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106fb565b600260015560045482908110612a56576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f506f6f6c20646f6573206e6f742065786973740000000000000000000000000060448201526064016106fb565b600060048481548110612a92577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60009182526020808320878452600582526040808520338652909252922060089091029091019150612ac385611782565b612acc856139e5565b8315612d145781546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b158015612b3b57600080fd5b505afa158015612b4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b73919061475e565b8354909150612b9a9073ffffffffffffffffffffffffffffffffffffffff16333088613d79565b82546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b158015612c0357600080fd5b505afa158015612c17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c3b919061475e565b9050612c478282614a94565b600485015490965061ffff1615612cb657600484015460009061271090612c729061ffff1689614a57565b612c7c9190614a1e565b600b548654919250612ca89173ffffffffffffffffffffffffffffffffffffffff908116911683613b94565b612cb28188614a94565b9650505b8254612cc3908790614a06565b83556006840154612cd5908790614a06565b6006850155600254845473ffffffffffffffffffffffffffffffffffffffff90811691161415612d115785600954612d0d9190614a06565b6009555b50505b6003820154815464e8d4a5100091612d2b91614a57565b612d359190614a1e565b600182015560005b6007830154811015612e2c57826007018181548110612d85577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60009182526020909120015482546040517f9cd00977000000000000000000000000000000000000000000000000000000008152336004820152602481019190915273ffffffffffffffffffffffffffffffffffffffff90911690639cd0097790604401600060405180830381600087803b158015612e0357600080fd5b505af1158015612e17573d6000803e3d6000fd5b5050505080612e2590614ad7565b9050612d3d565b50604051848152859033907f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159060200161128c565b60005473ffffffffffffffffffffffffffffffffffffffff163314612ee2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106fb565b612eea611e87565b3373ffffffffffffffffffffffffffffffffffffffff167f802633c8d26237616d81bdac01bc40fcdf36e098832601582ec19d7e431c5ef360048481548110612f5c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600802016001015483604051612f86929190918252602082015260400190565b60405180910390a28060048381548110612fc9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906008020160010154600654612fe89190614a94565b612ff29190614a06565b6006819055508060048381548110613033577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060080201600101819055505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146130cd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106fb565b73ffffffffffffffffffffffffffffffffffffffff8116613170576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016106fb565b61317981613d04565b50565b60608060608460048054905081106131f0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f506f6f6c20646f6573206e6f742065786973740000000000000000000000000060448201526064016106fb565b60006004878154811061322c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083208a845260058252604080852073ffffffffffffffffffffffffffffffffffffffff8c168652909252922060036008909202909201908101546006820154600283015492945090914311801561328a57508015155b156132f857600061329f856002015443612479565b905060006006548660010154600354846132b99190614a57565b6132c39190614a57565b6132cd9190614a1e565b9050826132df8264e8d4a51000614a57565b6132e99190614a1e565b6132f39085614a06565b935050505b60008360020154846001015464e8d4a5100085876000015461331a9190614a57565b6133249190614a1e565b61332e9190614a94565b6133389190614a06565b600786015490915061334b906001614a06565b67ffffffffffffffff81111561338a577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156133b3578160200160208202803683370190505b5060078601549099506133c7906001614a06565b67ffffffffffffffff811115613406577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561343957816020015b60608152602001906001900390816134245790505b50600786015490985061344d906001614a06565b67ffffffffffffffff81111561348c577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156134b5578160200160208202803683370190505b506002548a5191985073ffffffffffffffffffffffffffffffffffffffff16908a9060009061350d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff928316602091820292909201015260025461353d9116613ef2565b88600081518110613577577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018190525080876000815181106135bd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505060005b60078601548110156139cd57856007018181548110613614577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60009182526020918290200154604080517ff7c618c1000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff9092169263f7c618c192600480840193829003018186803b15801561368357600080fd5b505afa158015613697573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136bb9190614663565b8a6136c7836001614a06565b815181106136fe577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050613839866007018281548110613777577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60009182526020918290200154604080517ff7c618c1000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff9092169263f7c618c192600480840193829003018186803b1580156137e657600080fd5b505afa1580156137fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061381e9190614663565b73ffffffffffffffffffffffffffffffffffffffff16613ef2565b89613845836001614a06565b8151811061387c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052508560070181815481106138c3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000918252602090912001546040517fc031a66f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d811660048301529091169063c031a66f9060240160206040518083038186803b15801561393757600080fd5b505afa15801561394b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061396f919061475e565b8861397b836001614a06565b815181106139b2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60209081029190910101526139c681614ad7565b90506135cc565b505050505050509250925092565b803b15155b919050565b600060048281548110613a21577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083208584526005825260408085203386529092529220600381015460089092029092019250158015613a5d57506007544310155b15613a77576005820154613a719042614a06565b60038201555b6000816001015464e8d4a5100084600301548460000154613a989190614a57565b613aa29190614a1e565b613aac9190614a94565b9050613ab88433610c95565b15613b2a576000811180613ad0575060008260020154115b15613b25576000826002015482613ae79190614a06565b90508260020154600854613afb9190614a94565b600855600060028401556005840154613b149042614a06565b6003840155613b23338261400a565b505b613b8e565b8015613b8e57808260020154613b409190614a06565b6002830155600854613b53908290614a06565b600855604051818152849033907fee470483107f579a55c754fa00613c45a9a3b617a418b39cb0be97e5381ba7c19060200160405180910390a35b50505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790529151600092839290871691613c2b91906148f6565b6000604051808303816000865af19150503d8060008114613c68576040519150601f19603f3d011682016040523d82523d6000602084013e613c6d565b606091505b5091509150818015613c97575080511580613c97575080806020019051810190613c979190614643565b613cfd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f426f72696e6745524332303a205472616e73666572206661696c65640000000060448201526064016106fb565b5050505050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd000000000000000000000000000000000000000000000000000000001790529151600092839290881691613e1891906148f6565b6000604051808303816000865af19150503d8060008114613e55576040519150601f19603f3d011682016040523d82523d6000602084013e613e5a565b606091505b5091509150818015613e84575080511580613e84575080806020019051810190613e849190614643565b613eea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f426f72696e6745524332303a205472616e7366657246726f6d206661696c656460448201526064016106fb565b505050505050565b60408051600481526024810182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f95d89b41000000000000000000000000000000000000000000000000000000001790529051606091600091829173ffffffffffffffffffffffffffffffffffffffff861691613f7491906148f6565b600060405180830381855afa9150503d8060008114613faf576040519150601f19603f3d011682016040523d82523d6000602084013e613fb4565b606091505b509150915081613ff9576040518060400160405280600381526020017f3f3f3f0000000000000000000000000000000000000000000000000000000000815250614002565b614002816141c0565b949350505050565b6009546002546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a082319060240160206040518083038186803b15801561407657600080fd5b505afa15801561408a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140ae919061475e565b1115611c4a576009546002546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000929173ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b15801561412257600080fd5b505afa158015614136573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061415a919061475e565b6141649190614a94565b9050808210614196576002546141919073ffffffffffffffffffffffffffffffffffffffff168483613b94565b612972565b8115612972576002546129729073ffffffffffffffffffffffffffffffffffffffff168484613b94565b606060408251106141e657818060200190518101906141df919061467f565b90506139e0565b81516020141561443b5760005b60208160ff161080156142675750828160ff168151811061423d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b01602001517fff000000000000000000000000000000000000000000000000000000000000001615155b1561427e578061427681614b10565b9150506141f3565b60008160ff1667ffffffffffffffff8111156142c3577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156142ed576020820181803683370190505b509050600091505b60208260ff161080156143695750838260ff168151811061433f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b01602001517fff000000000000000000000000000000000000000000000000000000000000001615155b1561443257838260ff16815181106143aa577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602001015160f81c60f81b818360ff16815181106143f1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508161442a81614b10565b9250506142f5565b91506139e09050565b5060408051808201909152600381527f3f3f3f000000000000000000000000000000000000000000000000000000000060208201526139e0565b8280548282559060005260206000209081019282156144ed579160200282015b828111156144ed5781547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff843516178255602090920191600190910190614495565b506144f9929150614577565b5090565b8280548282559060005260206000209081019282156144ed579160200282015b828111156144ed57825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90911617825560209092019160019091019061451d565b5b808211156144f95760008155600101614578565b60008083601f84011261459d578081fd5b50813567ffffffffffffffff8111156145b4578182fd5b60208301915083602080830285010111156145ce57600080fd5b9250929050565b803561ffff811681146139e057600080fd5b6000602082840312156145f8578081fd5b813561248581614b8e565b60008060208385031215614615578081fd5b823567ffffffffffffffff81111561462b578182fd5b6146378582860161458c565b90969095509350505050565b600060208284031215614654578081fd5b81518015158114612485578182fd5b600060208284031215614674578081fd5b815161248581614b8e565b600060208284031215614690578081fd5b815167ffffffffffffffff808211156146a7578283fd5b818401915084601f8301126146ba578283fd5b8151818111156146cc576146cc614b5f565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561471257614712614b5f565b8160405282815287602084870101111561472a578586fd5b61473b836020830160208801614aab565b979650505050505050565b600060208284031215614757578081fd5b5035919050565b60006020828403121561476f578081fd5b5051919050565b60008060408385031215614788578182fd5b82359150602083013561479a81614b8e565b809150509250929050565b60008060008060008060a087890312156147bd578182fd5b8635955060208701356147cf81614b8e565b94506147dd604088016145d5565b935060608701359250608087013567ffffffffffffffff8111156147ff578283fd5b61480b89828a0161458c565b979a9699509497509295939492505050565b6000806040838503121561482f578182fd5b50508035926020909101359150565b60008060008060008060a08789031215614856578182fd5b86359550602087013594506147dd604088016145d5565b6000815180845260208085019450808401835b8381101561489c57815187529582019590820190600101614880565b509495945050505050565b60008184825b858110156148eb5781356148c081614b8e565b73ffffffffffffffffffffffffffffffffffffffff16835260209283019291909101906001016148ad565b509095945050505050565b60008251614908818460208701614aab565b9190910192915050565b606080825284519082018190526000906020906080840190828801845b8281101561496157815173ffffffffffffffffffffffffffffffffffffffff168452928401929084019060010161492f565b5050508381038285015285518082528282019080840283018401888501865b838110156149e4577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe080878503018652825180518086526149c6818b88018c8501614aab565b96890196601f01909116939093018701925090860190600101614980565b505086810360408801526149f8818961486d565b9a9950505050505050505050565b60008219821115614a1957614a19614b30565b500190565b600082614a52577f4e487b710000000000000000000000000000000000000000000000000000000081526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614a8f57614a8f614b30565b500290565b600082821015614aa657614aa6614b30565b500390565b60005b83811015614ac6578181015183820152602001614aae565b83811115613b8e5750506000910152565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614b0957614b09614b30565b5060010190565b600060ff821660ff811415614b2757614b27614b30565b60010192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461317957600080fdfea2646970667358221220bfc53d8afb265ad542946de2eeaadbfa31b4e568076a5c71986db0715f657adb64736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 375,
        "contract": "contracts/farm/v2/SolarDistributorV2.sol:SolarDistributorV2",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 650,
        "contract": "contracts/farm/v2/SolarDistributorV2.sol:SolarDistributorV2",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 6261,
        "contract": "contracts/farm/v2/SolarDistributorV2.sol:SolarDistributorV2",
        "label": "solar",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IBoringERC20)8606"
      },
      {
        "astId": 6263,
        "contract": "contracts/farm/v2/SolarDistributorV2.sol:SolarDistributorV2",
        "label": "solarPerBlock",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 6273,
        "contract": "contracts/farm/v2/SolarDistributorV2.sol:SolarDistributorV2",
        "label": "poolInfo",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_struct(PoolInfo)6258_storage)dyn_storage"
      },
      {
        "astId": 6280,
        "contract": "contracts/farm/v2/SolarDistributorV2.sol:SolarDistributorV2",
        "label": "userInfo",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)6238_storage))"
      },
      {
        "astId": 6283,
        "contract": "contracts/farm/v2/SolarDistributorV2.sol:SolarDistributorV2",
        "label": "totalAllocPoint",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 6285,
        "contract": "contracts/farm/v2/SolarDistributorV2.sol:SolarDistributorV2",
        "label": "startBlock",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 6287,
        "contract": "contracts/farm/v2/SolarDistributorV2.sol:SolarDistributorV2",
        "label": "totalLockedUpRewards",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 6290,
        "contract": "contracts/farm/v2/SolarDistributorV2.sol:SolarDistributorV2",
        "label": "totalSolarInPools",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 6292,
        "contract": "contracts/farm/v2/SolarDistributorV2.sol:SolarDistributorV2",
        "label": "teamAddress",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 6294,
        "contract": "contracts/farm/v2/SolarDistributorV2.sol:SolarDistributorV2",
        "label": "treasuryAddress",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 6296,
        "contract": "contracts/farm/v2/SolarDistributorV2.sol:SolarDistributorV2",
        "label": "investorAddress",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 6298,
        "contract": "contracts/farm/v2/SolarDistributorV2.sol:SolarDistributorV2",
        "label": "teamPercent",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 6300,
        "contract": "contracts/farm/v2/SolarDistributorV2.sol:SolarDistributorV2",
        "label": "treasuryPercent",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 6302,
        "contract": "contracts/farm/v2/SolarDistributorV2.sol:SolarDistributorV2",
        "label": "investorPercent",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(IRewarder)8630)dyn_storage": {
        "base": "t_contract(IRewarder)8630",
        "encoding": "dynamic_array",
        "label": "contract IRewarder[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(PoolInfo)6258_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)6258_storage",
        "encoding": "dynamic_array",
        "label": "struct SolarDistributorV2.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_contract(IBoringERC20)8606": {
        "encoding": "inplace",
        "label": "contract IBoringERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IRewarder)8630": {
        "encoding": "inplace",
        "label": "contract IRewarder",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)6238_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SolarDistributorV2.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)6238_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)6238_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct SolarDistributorV2.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)6238_storage)"
      },
      "t_struct(PoolInfo)6258_storage": {
        "encoding": "inplace",
        "label": "struct SolarDistributorV2.PoolInfo",
        "members": [
          {
            "astId": 6241,
            "contract": "contracts/farm/v2/SolarDistributorV2.sol:SolarDistributorV2",
            "label": "lpToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IBoringERC20)8606"
          },
          {
            "astId": 6243,
            "contract": "contracts/farm/v2/SolarDistributorV2.sol:SolarDistributorV2",
            "label": "allocPoint",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6245,
            "contract": "contracts/farm/v2/SolarDistributorV2.sol:SolarDistributorV2",
            "label": "lastRewardBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6247,
            "contract": "contracts/farm/v2/SolarDistributorV2.sol:SolarDistributorV2",
            "label": "accSolarPerShare",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 6249,
            "contract": "contracts/farm/v2/SolarDistributorV2.sol:SolarDistributorV2",
            "label": "depositFeeBP",
            "offset": 0,
            "slot": "4",
            "type": "t_uint16"
          },
          {
            "astId": 6251,
            "contract": "contracts/farm/v2/SolarDistributorV2.sol:SolarDistributorV2",
            "label": "harvestInterval",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 6253,
            "contract": "contracts/farm/v2/SolarDistributorV2.sol:SolarDistributorV2",
            "label": "totalLp",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 6257,
            "contract": "contracts/farm/v2/SolarDistributorV2.sol:SolarDistributorV2",
            "label": "rewarders",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_contract(IRewarder)8630)dyn_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(UserInfo)6238_storage": {
        "encoding": "inplace",
        "label": "struct SolarDistributorV2.UserInfo",
        "members": [
          {
            "astId": 6231,
            "contract": "contracts/farm/v2/SolarDistributorV2.sol:SolarDistributorV2",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6233,
            "contract": "contracts/farm/v2/SolarDistributorV2.sol:SolarDistributorV2",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6235,
            "contract": "contracts/farm/v2/SolarDistributorV2.sol:SolarDistributorV2",
            "label": "rewardLockedUp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6237,
            "contract": "contracts/farm/v2/SolarDistributorV2.sol:SolarDistributorV2",
            "label": "nextHarvestUntil",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}