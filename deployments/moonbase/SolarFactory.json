{
  "address": "0xEaD88f14C503E69d1064d6c36BAd69a89300f5F2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PairCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "INIT_CODE_PAIR_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allPairsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auro",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pairAddress",
          "type": "address"
        }
      ],
      "name": "disableMetaTxnsPair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pairAddress",
          "type": "address"
        }
      ],
      "name": "enableMetaTxnsPair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeToSetter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "migrator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_auro",
          "type": "address"
        }
      ],
      "name": "setAuroAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "name": "setFeeToSetter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_migrator",
          "type": "address"
        }
      ],
      "name": "setMigrator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc45f759ae23e6205fa41531ffed583a8e006671f541f1d0396de8b2cdb296201",
  "receipt": {
    "to": null,
    "from": "0xf884c8774b09b3302f98e38C944eB352264024F8",
    "contractAddress": "0xEaD88f14C503E69d1064d6c36BAd69a89300f5F2",
    "transactionIndex": 118,
    "gasUsed": "3994742",
    "logsBloom": "0x
    "blockHash": "0x3ffe16f839c971fbf7c9e10d4c72e7d21fe0c28fc7cd99aedc047b5e55f8d113",
    "transactionHash": "0xc45f759ae23e6205fa41531ffed583a8e006671f541f1d0396de8b2cdb296201",
    "logs": [],
    "blockNumber": 1061513,
    "cumulativeGasUsed": "7503281",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf884c8774b09b3302f98e38C944eB352264024F8"
  ],
  "solcInputHash": "272f21c2e5768f8946aee12d982a113a",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INIT_CODE_PAIR_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auro\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"}],\"name\":\"disableMetaTxnsPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"}],\"name\":\"enableMetaTxnsPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_auro\",\"type\":\"address\"}],\"name\":\"setAuroAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"name\":\"setFeeToSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_migrator\",\"type\":\"address\"}],\"name\":\"setMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/uniswapv2/SolarFactory.sol\":\"SolarFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/uniswapv2/SolarERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity =0.6.12;\\r\\n\\r\\nimport './libraries/SafeMath.sol';\\r\\n\\r\\ncontract SolarERC20 {\\r\\n    using SafeMathSolar for uint;\\r\\n\\r\\n    string public constant name = 'SolarBeam LP Token';\\r\\n    string public constant symbol = 'SLP';\\r\\n    uint8 public constant decimals = 18;\\r\\n    uint  public totalSupply;\\r\\n    mapping(address => uint) public balanceOf;\\r\\n    mapping(address => mapping(address => uint)) public allowance;\\r\\n\\r\\n    bytes32 public DOMAIN_SEPARATOR;\\r\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\r\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\r\\n    mapping(address => uint) public nonces;\\r\\n\\r\\n    address private _trustedForwarder; // remember to change before deploying\\r\\n\\r\\n    // Control support for EIP-2771 Meta Transactions\\r\\n    bool public metaTxnsEnabled = false;\\r\\n\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n    event MetaTxnsEnabled(address indexed caller);\\r\\n    event MetaTxnsDisabled(address indexed caller);\\r\\n\\r\\n    constructor() public {\\r\\n        uint chainId;\\r\\n        assembly {\\r\\n            chainId := chainid()\\r\\n        }\\r\\n        DOMAIN_SEPARATOR = keccak256(\\r\\n            abi.encode(\\r\\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\\r\\n                keccak256(bytes(name)),\\r\\n                keccak256(bytes('1')),\\r\\n                chainId,\\r\\n                address(this)\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function isTrustedForwarder(address forwarder) public view returns (bool) {\\r\\n        return metaTxnsEnabled && forwarder == _trustedForwarder;\\r\\n    }\\r\\n\\r\\n    function _msgSender() internal view returns (address sender) {\\r\\n        if (isTrustedForwarder(msg.sender)) {\\r\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\r\\n            assembly {\\r\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\r\\n            }\\r\\n        } else {\\r\\n            return msg.sender;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view returns (bytes calldata) {\\r\\n        if (isTrustedForwarder(msg.sender)) {\\r\\n            return msg.data[:msg.data.length - 20];\\r\\n        } else {\\r\\n            return msg.data;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _mint(address to, uint value) internal {\\r\\n        totalSupply = totalSupply.add(value);\\r\\n        balanceOf[to] = balanceOf[to].add(value);\\r\\n        emit Transfer(address(0), to, value);\\r\\n    }\\r\\n\\r\\n    function _burn(address from, uint value) internal {\\r\\n        balanceOf[from] = balanceOf[from].sub(value);\\r\\n        totalSupply = totalSupply.sub(value);\\r\\n        emit Transfer(from, address(0), value);\\r\\n    }\\r\\n\\r\\n    function _approve(address owner, address spender, uint value) private {\\r\\n        allowance[owner][spender] = value;\\r\\n        emit Approval(owner, spender, value);\\r\\n    }\\r\\n\\r\\n    function _transfer(address from, address to, uint value) private {\\r\\n        balanceOf[from] = balanceOf[from].sub(value);\\r\\n        balanceOf[to] = balanceOf[to].add(value);\\r\\n        emit Transfer(from, to, value);\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool) {\\r\\n        _approve(_msgSender(), spender, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transfer(address to, uint value) external returns (bool) {\\r\\n        _transfer(_msgSender(), to, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool) {\\r\\n        if (allowance[from][_msgSender()] != uint(-1)) {\\r\\n            allowance[from][_msgSender()] = allowance[from][_msgSender()].sub(value);\\r\\n        }\\r\\n        _transfer(from, to, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\\r\\n        require(deadline >= block.timestamp, 'SolarBeam: EXPIRED');\\r\\n        bytes32 digest = keccak256(\\r\\n            abi.encodePacked(\\r\\n                '\\\\x19\\\\x01',\\r\\n                DOMAIN_SEPARATOR,\\r\\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\r\\n            )\\r\\n        );\\r\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\r\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, 'SolarBeam: INVALID_SIGNATURE');\\r\\n        _approve(owner, spender, value);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x482ecac0bca3f23765fe05317855fb74b5b3589657a35b612daeba6050a37b02\",\"license\":\"GPL-3.0\"},\"contracts/uniswapv2/SolarFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity =0.6.12;\\r\\n\\r\\nimport './interfaces/ISolarFactory.sol';\\r\\nimport './SolarPair.sol';\\r\\n\\r\\ncontract SolarFactory is ISolarFactory {\\r\\n    bytes32 public constant INIT_CODE_PAIR_HASH = keccak256(abi.encodePacked(type(SolarPair).creationCode));\\r\\n\\r\\n    address public override feeTo;\\r\\n    address public override feeToSetter;\\r\\n    address public override migrator;\\r\\n    address public override auro;\\r\\n\\r\\n    mapping(address => mapping(address => address)) public override getPair;\\r\\n    address[] public override allPairs;\\r\\n\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n    constructor(address _feeToSetter) public {\\r\\n        feeToSetter = _feeToSetter;\\r\\n    }\\r\\n\\r\\n    function allPairsLength() external override view returns (uint) {\\r\\n        return allPairs.length;\\r\\n    }\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external override returns (address pair) {\\r\\n        require(tokenA != tokenB, 'SolarBeam: IDENTICAL_ADDRESSES');\\r\\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\r\\n        require(token0 != address(0), 'SolarBeam: ZERO_ADDRESS');\\r\\n        require(getPair[token0][token1] == address(0), 'SolarBeam: PAIR_EXISTS'); // single check is sufficient\\r\\n        bytes memory bytecode = type(SolarPair).creationCode;\\r\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\\r\\n        assembly {\\r\\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\\r\\n        }\\r\\n        SolarPair(pair).initialize(token0, token1);\\r\\n        getPair[token0][token1] = pair;\\r\\n        getPair[token1][token0] = pair; // populate mapping in the reverse direction\\r\\n        allPairs.push(pair);\\r\\n        emit PairCreated(token0, token1, pair, allPairs.length);\\r\\n    }\\r\\n\\r\\n    function setFeeTo(address _feeTo) external override {\\r\\n        require(msg.sender == feeToSetter, 'SolarBeam: FORBIDDEN');\\r\\n        feeTo = _feeTo;\\r\\n    }\\r\\n\\r\\n    function setMigrator(address _migrator) external override {\\r\\n        require(msg.sender == feeToSetter, 'SolarBeam: FORBIDDEN');\\r\\n        migrator = _migrator;\\r\\n    }\\r\\n\\r\\n    function setFeeToSetter(address _feeToSetter) external override {\\r\\n        require(msg.sender == feeToSetter, 'SolarBeam: FORBIDDEN');\\r\\n        feeToSetter = _feeToSetter;\\r\\n    }\\r\\n\\r\\n    \\r\\n    function setAuroAddress(address _auro) external override {\\r\\n        require(msg.sender == feeToSetter, 'SolarBeam: FORBIDDEN');\\r\\n        require(_auro != address(0), 'SolarBeam: INVALID_ADDRESS');\\r\\n        auro = _auro;\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    function enableMetaTxnsPair(address pairAddress) external {\\r\\n        require(msg.sender == feeToSetter, 'SolarBeam: FORBIDDEN');\\r\\n        require(pairAddress != address(0), 'SolarBeam: PAIR_NOT_EXISTS');\\r\\n\\r\\n        SolarPair pair = SolarPair(pairAddress);\\r\\n\\r\\n        require(!pair.metaTxnsEnabled(), 'SolarBeam: META_TXNS_ALREADY_ENABLED');\\r\\n\\r\\n        pair.enableMetaTxns();\\r\\n    }\\r\\n\\r\\n    function disableMetaTxnsPair(address pairAddress) external {\\r\\n        require(msg.sender == feeToSetter, 'SolarBeam: FORBIDDEN');\\r\\n        require(pairAddress != address(0), 'SolarBeam: PAIR_NOT_EXISTS');\\r\\n\\r\\n        SolarPair pair = SolarPair(pairAddress);\\r\\n\\r\\n        require(pair.metaTxnsEnabled(), 'SolarBeam: META_TXNS_ALREADY_DISABLED');\\r\\n\\r\\n        pair.disableMetaTxns();\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xacd7d1d3adc208122dd9d3409127bb7c85f630bd73c233e8bc4408fe7575354f\",\"license\":\"GPL-3.0\"},\"contracts/uniswapv2/SolarPair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity =0.6.12;\\r\\n\\r\\nimport './SolarERC20.sol';\\r\\nimport './libraries/Math.sol';\\r\\nimport './libraries/UQ112x112.sol';\\r\\nimport './interfaces/IERC20.sol';\\r\\nimport './interfaces/ISolarFactory.sol';\\r\\nimport './interfaces/ISolarCallee.sol';\\r\\n\\r\\ninterface IMigrator {\\r\\n    // Return the desired amount of liquidity token that the migrator wants.\\r\\n    function desiredLiquidity() external view returns (uint256);\\r\\n}\\r\\n\\r\\ncontract SolarPair is SolarERC20 {\\r\\n    using SafeMathSolar for uint;\\r\\n    using UQ112x112 for uint224;\\r\\n\\r\\n    uint public constant MINIMUM_LIQUIDITY = 10**3;\\r\\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\\r\\n\\r\\n    address public factory;\\r\\n    address public token0;\\r\\n    address public token1;\\r\\n\\r\\n    uint112 private reserve0;           // uses single storage slot, accessible via getReserves\\r\\n    uint112 private reserve1;           // uses single storage slot, accessible via getReserves\\r\\n    uint32  private blockTimestampLast; // uses single storage slot, accessible via getReserves\\r\\n\\r\\n    uint public price0CumulativeLast;\\r\\n    uint public price1CumulativeLast;\\r\\n    uint public kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\\r\\n\\r\\n    struct SwapVariables {\\r\\n        uint112 _reserve0;\\r\\n        uint112 _reserve1;\\r\\n        uint balance0;\\r\\n        uint balance1;\\r\\n        uint amount0In;\\r\\n        uint amount1In;\\r\\n        uint fee;\\r\\n    }\\r\\n\\r\\n    uint private unlocked = 1;\\r\\n    modifier lock() {\\r\\n        require(unlocked == 1, 'SolarBeam: LOCKED');\\r\\n        unlocked = 0;\\r\\n        _;\\r\\n        unlocked = 1;\\r\\n    }\\r\\n\\r\\n    function getReserves() public view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) {\\r\\n        _reserve0 = reserve0;\\r\\n        _reserve1 = reserve1;\\r\\n        _blockTimestampLast = blockTimestampLast;\\r\\n    }\\r\\n\\r\\n    function _safeTransfer(address token, address to, uint value) private {\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SolarBeam: TRANSFER_FAILED');\\r\\n    }\\r\\n\\r\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint amount0In,\\r\\n        uint amount1In,\\r\\n        uint amount0Out,\\r\\n        uint amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    constructor() public {\\r\\n        factory = msg.sender;\\r\\n    }\\r\\n\\r\\n    // called once by the factory at time of deployment\\r\\n    function initialize(address _token0, address _token1) external {\\r\\n        require(msg.sender == factory, 'SolarBeam: FORBIDDEN'); // sufficient check\\r\\n        token0 = _token0;\\r\\n        token1 = _token1;\\r\\n    }\\r\\n\\r\\n    // update reserves and, on the first call per block, price accumulators\\r\\n    function _update(uint balance0, uint balance1, uint112 _reserve0, uint112 _reserve1) private {\\r\\n        require(balance0 <= uint112(-1) && balance1 <= uint112(-1), 'SolarBeam: OVERFLOW');\\r\\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\\r\\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\\r\\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\\r\\n            // * never overflows, and + overflow is desired\\r\\n            price0CumulativeLast += uint(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;\\r\\n            price1CumulativeLast += uint(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;\\r\\n        }\\r\\n        reserve0 = uint112(balance0);\\r\\n        reserve1 = uint112(balance1);\\r\\n        blockTimestampLast = blockTimestamp;\\r\\n        emit Sync(reserve0, reserve1);\\r\\n    }\\r\\n\\r\\n    // if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)\\r\\n    function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn) {\\r\\n        address feeTo = ISolarFactory(factory).feeTo();\\r\\n        feeOn = feeTo != address(0);\\r\\n        uint _kLast = kLast; // gas savings\\r\\n        if (feeOn) {\\r\\n            if (_kLast != 0) {\\r\\n                uint rootK = Math.sqrt(uint(_reserve0).mul(_reserve1));\\r\\n                uint rootKLast = Math.sqrt(_kLast);\\r\\n                if (rootK > rootKLast) {\\r\\n                    uint numerator = totalSupply.mul(rootK.sub(rootKLast));\\r\\n                    uint denominator = rootK.mul(5).add(rootKLast);\\r\\n                    uint liquidity = numerator / denominator;\\r\\n                    if (liquidity > 0) _mint(feeTo, liquidity);\\r\\n                }\\r\\n            }\\r\\n        } else if (_kLast != 0) {\\r\\n            kLast = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // this low-level function should be called from a contract which performs important safety checks\\r\\n    function mint(address to) external lock returns (uint liquidity) {\\r\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\\r\\n        uint balance0 = IERC20Solar(token0).balanceOf(address(this));\\r\\n        uint balance1 = IERC20Solar(token1).balanceOf(address(this));\\r\\n        uint amount0 = balance0.sub(_reserve0);\\r\\n        uint amount1 = balance1.sub(_reserve1);\\r\\n\\r\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\r\\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\r\\n        if (_totalSupply == 0) {\\r\\n            address migrator = ISolarFactory(factory).migrator();\\r\\n            if (_msgSender() == migrator) {\\r\\n                liquidity = IMigrator(migrator).desiredLiquidity();\\r\\n                require(liquidity > 0 && liquidity != uint256(-1), \\\"Bad desired liquidity\\\");\\r\\n            } else {\\r\\n                require(migrator == address(0), \\\"Must not have migrator\\\");\\r\\n                liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\\r\\n                _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\\r\\n            }\\r\\n        } else {\\r\\n            liquidity = Math.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);\\r\\n        }\\r\\n        require(liquidity > 0, 'SolarBeam: INSUFFICIENT_LIQUIDITY_MINTED');\\r\\n        _mint(to, liquidity);\\r\\n\\r\\n        _update(balance0, balance1, _reserve0, _reserve1);\\r\\n        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\\r\\n        emit Mint(_msgSender(), amount0, amount1);\\r\\n    }\\r\\n\\r\\n    // this low-level function should be called from a contract which performs important safety checks\\r\\n    function burn(address to) external lock returns (uint amount0, uint amount1) {\\r\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\\r\\n        address _token0 = token0;                                // gas savings\\r\\n        address _token1 = token1;                                // gas savings\\r\\n        uint balance0 = IERC20Solar(_token0).balanceOf(address(this));\\r\\n        uint balance1 = IERC20Solar(_token1).balanceOf(address(this));\\r\\n        uint liquidity = balanceOf[address(this)];\\r\\n\\r\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\r\\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\r\\n        amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\\r\\n        amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\\r\\n        require(amount0 > 0 && amount1 > 0, 'SolarBeam: INSUFFICIENT_LIQUIDITY_BURNED');\\r\\n        _burn(address(this), liquidity);\\r\\n        _safeTransfer(_token0, to, amount0);\\r\\n        _safeTransfer(_token1, to, amount1);\\r\\n        balance0 = IERC20Solar(_token0).balanceOf(address(this));\\r\\n        balance1 = IERC20Solar(_token1).balanceOf(address(this));\\r\\n\\r\\n        _update(balance0, balance1, _reserve0, _reserve1);\\r\\n        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\\r\\n        emit Burn(_msgSender(), amount0, amount1, to);\\r\\n    }\\r\\n\\r\\n    // this low-level function should be called from a contract which performs important safety checks\\r\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external lock {\\r\\n        require(amount0Out > 0 || amount1Out > 0, 'SolarBeam: INSUFFICIENT_OUTPUT_AMOUNT');\\r\\n        SwapVariables memory vars = SwapVariables(0, 0, 0, 0, 0, 0, 0);\\r\\n        (vars._reserve0, vars._reserve1,) = getReserves(); // gas savings\\r\\n        require(amount0Out < vars._reserve0 && amount1Out < vars._reserve1, 'SolarBeam: INSUFFICIENT_LIQUIDITY');\\r\\n\\r\\n        vars.fee = 25;\\r\\n\\r\\n        { // scope for _token{0,1}, avoids stack too deep errors\\r\\n            address _token0 = token0;\\r\\n            address _token1 = token1;\\r\\n            require(to != _token0 && to != _token1, 'SolarBeam: INVALID_TO');\\r\\n            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\\r\\n            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\\r\\n            if (data.length > 0) ISolarCallee(to).uniswapV2Call(_msgSender(), amount0Out, amount1Out, data);\\r\\n            vars.balance0 = IERC20Solar(_token0).balanceOf(address(this));\\r\\n            vars.balance1 = IERC20Solar(_token1).balanceOf(address(this));\\r\\n        }\\r\\n        vars.amount0In = vars.balance0 > vars._reserve0 - amount0Out ? vars.balance0 - (vars._reserve0 - amount0Out) : 0;\\r\\n        vars.amount1In = vars.balance1 > vars._reserve1 - amount1Out ? vars.balance1 - (vars._reserve1 - amount1Out) : 0;\\r\\n        require(vars.amount0In > 0 || vars.amount1In > 0, 'SolarBeam: INSUFFICIENT_INPUT_AMOUNT');\\r\\n        { // scope for reserve{0,1}Adjusted, avoids stack too deep errors\\r\\n            uint balance0Adjusted = vars.balance0.mul(10000).sub(vars.amount0In.mul(vars.fee));\\r\\n            uint balance1Adjusted = vars.balance1.mul(10000).sub(vars.amount1In.mul(vars.fee));\\r\\n            require(balance0Adjusted.mul(balance1Adjusted) >= uint(vars._reserve0).mul(vars._reserve1).mul(10000**2), 'SolarBeam: K');\\r\\n        }\\r\\n\\r\\n        _update(vars.balance0, vars.balance1, vars._reserve0, vars._reserve1);\\r\\n        emit Swap(_msgSender(), vars.amount0In, vars.amount1In, amount0Out, amount1Out, to);\\r\\n    }\\r\\n\\r\\n    // force balances to match reserves\\r\\n    function skim(address to) external lock {\\r\\n        address _token0 = token0; // gas savings\\r\\n        address _token1 = token1; // gas savings\\r\\n        _safeTransfer(_token0, to, IERC20Solar(_token0).balanceOf(address(this)).sub(reserve0));\\r\\n        _safeTransfer(_token1, to, IERC20Solar(_token1).balanceOf(address(this)).sub(reserve1));\\r\\n    }\\r\\n\\r\\n    // force reserves to match balances\\r\\n    function sync() external lock {\\r\\n        _update(IERC20Solar(token0).balanceOf(address(this)), IERC20Solar(token1).balanceOf(address(this)), reserve0, reserve1);\\r\\n    }\\r\\n\\r\\n    function disableMetaTxns() external {\\r\\n        require(_msgSender() == factory, 'SolarBeam: FORBIDDEN');\\r\\n        require(metaTxnsEnabled, \\\"SolarBeam: META_TXNS_ALREADY_DISABLED\\\");\\r\\n\\r\\n        metaTxnsEnabled = false;\\r\\n\\r\\n        emit MetaTxnsDisabled(_msgSender());\\r\\n    }\\r\\n\\r\\n    function enableMetaTxns() external {\\r\\n        require(_msgSender() == factory, 'SolarBeam: FORBIDDEN');\\r\\n        require(!metaTxnsEnabled, \\\"SolarBeam: META_TXNS_ALREADY_ENABLED\\\");\\r\\n\\r\\n        metaTxnsEnabled = true;\\r\\n\\r\\n        emit MetaTxnsEnabled(_msgSender());\\r\\n    }\\r\\n}\",\"keccak256\":\"0x9a16b7826fd2f1906349f35c06f9a7648a107e45d514ac141aabcd2d649ee3ce\",\"license\":\"GPL-3.0\"},\"contracts/uniswapv2/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity =0.6.12;\\r\\n\\r\\ninterface IERC20Solar {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n    function symbol() external view returns (string memory);\\r\\n    function decimals() external view returns (uint8);\\r\\n    function totalSupply() external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x23992a54f9b87ad0529d830703c5f1804614e26f4cbee2d5af3c33a4a35dfa0f\",\"license\":\"GPL-3.0\"},\"contracts/uniswapv2/interfaces/ISolarCallee.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity =0.6.12;\\r\\n\\r\\ninterface ISolarCallee {\\r\\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x2ae2cc785bc80f74051e25432f1f61c5a3be7ec0cc1508d479e1747c59885731\",\"license\":\"GPL-3.0\"},\"contracts/uniswapv2/interfaces/ISolarFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity =0.6.12;\\r\\n\\r\\ninterface ISolarFactory {\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n    function feeToSetter() external view returns (address);\\r\\n    function migrator() external view returns (address);\\r\\n    function auro() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n    function allPairs(uint) external view returns (address pair);\\r\\n    function allPairsLength() external view returns (uint);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n    function setFeeToSetter(address) external;\\r\\n    function setMigrator(address) external;\\r\\n    function setAuroAddress(address) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x92eabc68c42b28d04300386e704510970e75596ea718211b3543801e0fa523fa\",\"license\":\"GPL-3.0\"},\"contracts/uniswapv2/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity =0.6.12;\\r\\n\\r\\n// a library for performing various math operations\\r\\n\\r\\nlibrary Math {\\r\\n    function min(uint x, uint y) internal pure returns (uint z) {\\r\\n        z = x < y ? x : y;\\r\\n    }\\r\\n\\r\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\r\\n    function sqrt(uint y) internal pure returns (uint z) {\\r\\n        if (y > 3) {\\r\\n            z = y;\\r\\n            uint x = y / 2 + 1;\\r\\n            while (x < z) {\\r\\n                z = x;\\r\\n                x = (y / x + x) / 2;\\r\\n            }\\r\\n        } else if (y != 0) {\\r\\n            z = 1;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0633fc66085fcd3edb82ac6b16838dbfd1582b0299676c2889ff9adae956b8ca\",\"license\":\"GPL-3.0\"},\"contracts/uniswapv2/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity =0.6.12;\\r\\n\\r\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\r\\n\\r\\nlibrary SafeMathSolar {\\r\\n    function add(uint x, uint y) internal pure returns (uint z) {\\r\\n        require((z = x + y) >= x, 'ds-math-add-overflow');\\r\\n    }\\r\\n\\r\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\r\\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\\r\\n    }\\r\\n\\r\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\r\\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe1f86b712294e3f2c1a25b66ea3b0db81c2ba48e628f659853a43a233e70323f\",\"license\":\"GPL-3.0\"},\"contracts/uniswapv2/libraries/UQ112x112.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity =0.6.12;\\r\\n\\r\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\r\\n\\r\\n// range: [0, 2**112 - 1]\\r\\n// resolution: 1 / 2**112\\r\\n\\r\\nlibrary UQ112x112 {\\r\\n    uint224 constant Q112 = 2**112;\\r\\n\\r\\n    // encode a uint112 as a UQ112x112\\r\\n    function encode(uint112 y) internal pure returns (uint224 z) {\\r\\n        z = uint224(y) * Q112; // never overflows\\r\\n    }\\r\\n\\r\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\r\\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\r\\n        z = x / uint224(y);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc74700f2fa4a4396b83cafb9bc9776eb0c212da6af3f05287b690c14a5246dc1\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516147bf3803806147bf8339818101604052602081101561003357600080fd5b5051600180546001600160a01b0319166001600160a01b0390921691909117905561475c806100636000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80635e07d17b11610097578063b0cb33fe11610066578063b0cb33fe14610250578063c9c6539614610283578063e6a43905146102be578063f46901ed146102f9576100f5565b80635e07d17b146101af5780636bd7c172146101e25780637cd07e4714610215578063a2e74af61461021d576100f5565b806321dd70e6116100d357806321dd70e61461015057806323cf311814610158578063574f2ba31461018d5780635855a25a146101a7576100f5565b8063017e7e58146100fa578063094b74151461012b5780631e3dd18b14610133575b600080fd5b61010261032c565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b610102610348565b6101026004803603602081101561014957600080fd5b5035610364565b610102610398565b61018b6004803603602081101561016e57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166103b4565b005b610195610481565b60408051918252519081900360200190f35b610195610487565b61018b600480360360208110156101c557600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610538565b61018b600480360360208110156101f857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610771565b6101026108c0565b61018b6004803603602081101561023357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166108dc565b61018b6004803603602081101561026657600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166109a9565b6101026004803603604081101561029957600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610bc5565b610102600480360360408110156102d457600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610ff9565b61018b6004803603602081101561030f57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661102c565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b6005818154811061037157fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60035473ffffffffffffffffffffffffffffffffffffffff1681565b60015473ffffffffffffffffffffffffffffffffffffffff16331461043a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f536f6c61724265616d3a20464f5242494444454e000000000000000000000000604482015290519081900360640190fd5b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60055490565b604051610496602082016110f9565b6020820181038252601f19601f820116604052506040516020018082805190602001908083835b602083106104fa57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016104bd565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012081565b60015473ffffffffffffffffffffffffffffffffffffffff1633146105be57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f536f6c61724265616d3a20464f5242494444454e000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff811661064057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f536f6c61724265616d3a20504149525f4e4f545f455849535453000000000000604482015290519081900360640190fd5b60008190508073ffffffffffffffffffffffffffffffffffffffff1663a8c95dc06040518163ffffffff1660e01b815260040160206040518083038186803b15801561068b57600080fd5b505afa15801561069f573d6000803e3d6000fd5b505050506040513d60208110156106b557600080fd5b50511561070d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806146de6024913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1663578bb42d6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561075557600080fd5b505af1158015610769573d6000803e3d6000fd5b505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff1633146107f757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f536f6c61724265616d3a20464f5242494444454e000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff811661087957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f536f6c61724265616d3a20494e56414c49445f41444452455353000000000000604482015290519081900360640190fd5b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60025473ffffffffffffffffffffffffffffffffffffffff1681565b60015473ffffffffffffffffffffffffffffffffffffffff16331461096257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f536f6c61724265616d3a20464f5242494444454e000000000000000000000000604482015290519081900360640190fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60015473ffffffffffffffffffffffffffffffffffffffff163314610a2f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f536f6c61724265616d3a20464f5242494444454e000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8116610ab157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f536f6c61724265616d3a20504149525f4e4f545f455849535453000000000000604482015290519081900360640190fd5b60008190508073ffffffffffffffffffffffffffffffffffffffff1663a8c95dc06040518163ffffffff1660e01b815260040160206040518083038186803b158015610afc57600080fd5b505afa158015610b10573d6000803e3d6000fd5b505050506040513d6020811015610b2657600080fd5b5051610b7d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806147026025913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1663083836406040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561075557600080fd5b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610c6257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f536f6c61724265616d3a204944454e544943414c5f4144445245535345530000604482015290519081900360640190fd5b6000808373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1610610c9f578385610ca2565b84845b909250905073ffffffffffffffffffffffffffffffffffffffff8216610d2957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f536f6c61724265616d3a205a45524f5f41444452455353000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff828116600090815260046020908152604080832085851684529091529020541615610dca57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f536f6c61724265616d3a20504149525f45584953545300000000000000000000604482015290519081900360640190fd5b606060405180602001610ddc906110f9565b6020820181038252601f19601f82011660405250905060008383604051602001808373ffffffffffffffffffffffffffffffffffffffff1660601b81526014018273ffffffffffffffffffffffffffffffffffffffff1660601b815260140192505050604051602081830303815290604052805190602001209050808251602084016000f594508473ffffffffffffffffffffffffffffffffffffffff1663485cc95585856040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b158015610eea57600080fd5b505af1158015610efe573d6000803e3d6000fd5b5050505073ffffffffffffffffffffffffffffffffffffffff84811660008181526004602081815260408084208987168086529083528185208054978d167fffffffffffffffffffffffff000000000000000000000000000000000000000098891681179091559383528185208686528352818520805488168517905560058054600181018255958190527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db090950180549097168417909655925483519283529082015281517f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9929181900390910190a35050505092915050565b600460209081526000928352604080842090915290825290205473ffffffffffffffffffffffffffffffffffffffff1681565b60015473ffffffffffffffffffffffffffffffffffffffff1633146110b257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f536f6c61724265616d3a20464f5242494444454e000000000000000000000000604482015290519081900360640190fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6135d7806111078339019056fe60806040526005805460ff60a01b191690556001600d5534801561002257600080fd5b50604080518082018252601281527129b7b630b92132b0b6902628102a37b5b2b760711b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527fb4fdaf01ee326634338de6f91bba9d1d19adcd068a294d0ed0b956eedce7081e818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c09091019092528151910120600355600680546001600160a01b031916331790556134ba8061011d6000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c80635a3d54931161010f578063a9059cbb116100a2578063d21220a711610071578063d21220a714610651578063d505accf14610659578063dd62ed3e146106b7578063fff6cae9146106f2576101e5565b8063a9059cbb146105d5578063ba9a7a561461060e578063bc25cf7714610616578063c45a015514610649576101e5565b80637ecebe00116100de5780637ecebe001461054657806389afcb441461057957806395d89b41146105c5578063a8c95dc0146105cd576101e5565b80635a3d5493146104d05780636a627842146104d857806370a082311461050b5780637464fc3d1461053e576101e5565b806323b872dd11610187578063485cc95511610156578063485cc95514610452578063572b6c051461048d578063578bb42d146104c05780635909c0d5146104c8576101e5565b806323b872dd146103e157806330adf81f14610424578063313ce5671461042c5780633644e5151461044a576101e5565b80630902f1ac116101c35780630902f1ac1461030a578063095ea7b3146103495780630dfe16811461039657806318160ddd146103c7576101e5565b8063022c0d9f146101ea57806306fdde03146102855780630838364014610302575b600080fd5b6102836004803603608081101561020057600080fd5b81359160208101359173ffffffffffffffffffffffffffffffffffffffff604083013516919081019060808101606082013564010000000081111561024457600080fd5b82018360208201111561025657600080fd5b8035906020019184600183028401116401000000008311171561027857600080fd5b5090925090506106fa565b005b61028d610ebe565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102c75781810151838201526020016102af565b50505050905090810190601f1680156102f45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610283610ef7565b610312611081565b604080516dffffffffffffffffffffffffffff948516815292909316602083015263ffffffff168183015290519081900360600190f35b6103826004803603604081101561035f57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356110d6565b604080519115158252519081900360200190f35b61039e6110f4565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6103cf611110565b60408051918252519081900360200190f35b610382600480360360608110156103f757600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060400135611116565b6103cf611272565b610434611296565b6040805160ff9092168252519081900360200190f35b6103cf61129b565b6102836004803603604081101561046857600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160200135166112a1565b610382600480360360208110156104a357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661137a565b6102836113c9565b6103cf61156b565b6103cf611571565b6103cf600480360360208110156104ee57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611577565b6103cf6004803603602081101561052157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611b9b565b6103cf611bad565b6103cf6004803603602081101561055c57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611bb3565b6105ac6004803603602081101561058f57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611bc5565b6040805192835260208301919091528051918290030190f35b61028d61206f565b6103826120a8565b610382600480360360408110156105eb57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356120c9565b6103cf6120dd565b6102836004803603602081101561062c57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166120e3565b61039e6122d0565b61039e6122ec565b610283600480360360e081101561066f57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c00135612308565b6103cf600480360360408110156106cd57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160200135166125d4565b6102836125f1565b600d5460011461076b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f536f6c61724265616d3a204c4f434b4544000000000000000000000000000000604482015290519081900360640190fd5b6000600d558415158061077e5750600084115b6107d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806133826025913960400191505060405180910390fd5b6107db613324565b6040518060e0016040528060006dffffffffffffffffffffffffffff16815260200160006dffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600081526020016000815250905061083f611081565b506dffffffffffffffffffffffffffff9081166020840152168082528610801561087c575080602001516dffffffffffffffffffffffffffff1685105b6108d1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602181526020018061343c6021913960400191505060405180910390fd5b601960c082015260075460085473ffffffffffffffffffffffffffffffffffffffff91821691908116908616821480159061093857508073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614155b6109a357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f536f6c61724265616d3a20494e56414c49445f544f0000000000000000000000604482015290519081900360640190fd5b87156109b4576109b482878a6127d7565b86156109c5576109c58187896127d7565b8315610a98578573ffffffffffffffffffffffffffffffffffffffff166310d1e85c6109ef6129e4565b8a8a89896040518663ffffffff1660e01b8152600401808673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b158015610a7f57600080fd5b505af1158015610a93573d6000803e3d6000fd5b505050505b604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff8416916370a08231916024808301926020929190829003018186803b158015610b0457600080fd5b505afa158015610b18573d6000803e3d6000fd5b505050506040513d6020811015610b2e57600080fd5b505160408085019190915280517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff8316916370a08231916024808301926020929190829003018186803b158015610ba357600080fd5b505afa158015610bb7573d6000803e3d6000fd5b505050506040513d6020811015610bcd57600080fd5b505160608401525050805160408201516dffffffffffffffffffffffffffff90911687900310610bfe576000610c1c565b8581600001516dffffffffffffffffffffffffffff16038160400151035b8160800181815250508481602001516dffffffffffffffffffffffffffff1603816060015111610c4d576000610c6b565b8481602001516dffffffffffffffffffffffffffff16038160600151035b60a08201526080810151151580610c86575060008160a00151115b610cdb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806134186024913960400191505060405180910390fd5b6000610d12610cfb8360c001518460800151612a2790919063ffffffff16565b6040840151610d0c90612710612a27565b90612aad565b90506000610d45610d348460c001518560a00151612a2790919063ffffffff16565b6060850151610d0c90612710612a27565b9050610d906305f5e100610d8a85602001516dffffffffffffffffffffffffffff1686600001516dffffffffffffffffffffffffffff16612a2790919063ffffffff16565b90612a27565b610d9a8383612a27565b1015610e0757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f536f6c61724265616d3a204b0000000000000000000000000000000000000000604482015290519081900360640190fd5b5050610e258160400151826060015183600001518460200151612b1f565b8373ffffffffffffffffffffffffffffffffffffffff16610e446129e4565b73ffffffffffffffffffffffffffffffffffffffff167fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d82283608001518460a001518a8a6040518085815260200184815260200183815260200182815260200194505050505060405180910390a350506001600d5550505050565b6040518060400160405280601281526020017f536f6c61724265616d204c5020546f6b656e000000000000000000000000000081525081565b60065473ffffffffffffffffffffffffffffffffffffffff16610f186129e4565b73ffffffffffffffffffffffffffffffffffffffff1614610f9a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f536f6c61724265616d3a20464f5242494444454e000000000000000000000000604482015290519081900360640190fd5b60055474010000000000000000000000000000000000000000900460ff1661100d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806133cb6025913960400191505060405180910390fd5b600580547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16905561103d6129e4565b73ffffffffffffffffffffffffffffffffffffffff167f096be170ccc67847e55535e7d8334b2afedd95805baedc160005addb9144745060405160405180910390a2565b6009546dffffffffffffffffffffffffffff808216926e0100000000000000000000000000008304909116917c0100000000000000000000000000000000000000000000000000000000900463ffffffff1690565b60006110ea6110e36129e4565b8484612dd5565b5060015b92915050565b60075473ffffffffffffffffffffffffffffffffffffffff1681565b60005481565b73ffffffffffffffffffffffffffffffffffffffff831660009081526002602052604081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90826111666129e4565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541461125d5773ffffffffffffffffffffffffffffffffffffffff84166000908152600260205260408120611207918491906111da6129e4565b73ffffffffffffffffffffffffffffffffffffffff16815260208101919091526040016000205490612aad565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600260205260408120906112356129e4565b73ffffffffffffffffffffffffffffffffffffffff1681526020810191909152604001600020555b611268848484612e44565b5060019392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60035481565b60065473ffffffffffffffffffffffffffffffffffffffff16331461132757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f536f6c61724265616d3a20464f5242494444454e000000000000000000000000604482015290519081900360640190fd5b6007805473ffffffffffffffffffffffffffffffffffffffff9384167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161790915560088054929093169116179055565b60055460009074010000000000000000000000000000000000000000900460ff1680156113c1575060055473ffffffffffffffffffffffffffffffffffffffff8381169116145b90505b919050565b60065473ffffffffffffffffffffffffffffffffffffffff166113ea6129e4565b73ffffffffffffffffffffffffffffffffffffffff161461146c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f536f6c61724265616d3a20464f5242494444454e000000000000000000000000604482015290519081900360640190fd5b60055474010000000000000000000000000000000000000000900460ff16156114e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806133a76024913960400191505060405180910390fd5b600580547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001790556115276129e4565b73ffffffffffffffffffffffffffffffffffffffff167f92e4c08d47b71e8dc051232b8e475ec296489a67a4ba5cca88ff20fb6ac499e660405160405180910390a2565b600a5481565b600b5481565b6000600d546001146115ea57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f536f6c61724265616d3a204c4f434b4544000000000000000000000000000000604482015290519081900360640190fd5b6000600d819055806115fa611081565b50600754604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905193955091935060009273ffffffffffffffffffffffffffffffffffffffff909116916370a08231916024808301926020929190829003018186803b15801561167457600080fd5b505afa158015611688573d6000803e3d6000fd5b505050506040513d602081101561169e57600080fd5b5051600854604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905192935060009273ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b15801561171757600080fd5b505afa15801561172b573d6000803e3d6000fd5b505050506040513d602081101561174157600080fd5b505190506000611761836dffffffffffffffffffffffffffff8716612aad565b9050600061177f836dffffffffffffffffffffffffffff8716612aad565b9050600061178d8787612f19565b60005490915080611a2f57600654604080517f7cd07e47000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff1691637cd07e47916004808301926020929190829003018186803b15801561180357600080fd5b505afa158015611817573d6000803e3d6000fd5b505050506040513d602081101561182d57600080fd5b5051905073ffffffffffffffffffffffffffffffffffffffff81166118506129e4565b73ffffffffffffffffffffffffffffffffffffffff16141561197f578073ffffffffffffffffffffffffffffffffffffffff166340dc0e376040518163ffffffff1660e01b815260040160206040518083038186803b1580156118b257600080fd5b505afa1580156118c6573d6000803e3d6000fd5b505050506040513d60208110156118dc57600080fd5b50519950891580159061190f57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8a14155b61197a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4261642064657369726564206c69717569646974790000000000000000000000604482015290519081900360640190fd5b611a29565b73ffffffffffffffffffffffffffffffffffffffff811615611a0257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d757374206e6f742068617665206d69677261746f7200000000000000000000604482015290519081900360640190fd5b611a1a6103e8610d0c611a158888612a27565b613087565b9950611a2960006103e86130d8565b50611a80565b611a7d6dffffffffffffffffffffffffffff8916611a4d8684612a27565b81611a5457fe5b046dffffffffffffffffffffffffffff8916611a708685612a27565b81611a7757fe5b0461317c565b98505b60008911611ad9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602881526020018061345d6028913960400191505060405180910390fd5b611ae38a8a6130d8565b611aef86868a8a612b1f565b8115611b2b57600954611b27906dffffffffffffffffffffffffffff808216916e010000000000000000000000000000900416612a27565b600c555b611b336129e4565b73ffffffffffffffffffffffffffffffffffffffff167f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f8585604051808381526020018281526020019250505060405180910390a250506001600d5550949695505050505050565b60016020526000908152604090205481565b600c5481565b60046020526000908152604090205481565b600080600d54600114611c3957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f536f6c61724265616d3a204c4f434b4544000000000000000000000000000000604482015290519081900360640190fd5b6000600d81905580611c49611081565b50600754600854604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905194965092945073ffffffffffffffffffffffffffffffffffffffff9182169391169160009184916370a08231916024808301926020929190829003018186803b158015611ccb57600080fd5b505afa158015611cdf573d6000803e3d6000fd5b505050506040513d6020811015611cf557600080fd5b5051604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905191925060009173ffffffffffffffffffffffffffffffffffffffff8516916370a08231916024808301926020929190829003018186803b158015611d6957600080fd5b505afa158015611d7d573d6000803e3d6000fd5b505050506040513d6020811015611d9357600080fd5b505130600090815260016020526040812054919250611db28888612f19565b60005490915080611dc38487612a27565b81611dca57fe5b049a5080611dd88486612a27565b81611ddf57fe5b04995060008b118015611df2575060008a115b611e47576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001806133f06028913960400191505060405180910390fd5b611e513084613194565b611e5c878d8d6127d7565b611e67868d8c6127d7565b604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff8916916370a08231916024808301926020929190829003018186803b158015611ed357600080fd5b505afa158015611ee7573d6000803e3d6000fd5b505050506040513d6020811015611efd57600080fd5b5051604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905191965073ffffffffffffffffffffffffffffffffffffffff8816916370a0823191602480820192602092909190829003018186803b158015611f6f57600080fd5b505afa158015611f83573d6000803e3d6000fd5b505050506040513d6020811015611f9957600080fd5b50519350611fa985858b8b612b1f565b8115611fe557600954611fe1906dffffffffffffffffffffffffffff808216916e010000000000000000000000000000900416612a27565b600c555b8b73ffffffffffffffffffffffffffffffffffffffff166120046129e4565b73ffffffffffffffffffffffffffffffffffffffff167fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d819364968d8d604051808381526020018281526020019250505060405180910390a35050505050505050506001600d81905550915091565b6040518060400160405280600381526020017f534c50000000000000000000000000000000000000000000000000000000000081525081565b60055474010000000000000000000000000000000000000000900460ff1681565b60006110ea6120d66129e4565b8484612e44565b6103e881565b600d5460011461215457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f536f6c61724265616d3a204c4f434b4544000000000000000000000000000000604482015290519081900360640190fd5b6000600d55600754600854600954604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff948516949093169261222a9285928792612225926dffffffffffffffffffffffffffff169185916370a0823191602480820192602092909190829003018186803b1580156121f357600080fd5b505afa158015612207573d6000803e3d6000fd5b505050506040513d602081101561221d57600080fd5b505190612aad565b6127d7565b6122c681846122256009600e9054906101000a90046dffffffffffffffffffffffffffff166dffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156121f357600080fd5b50506001600d5550565b60065473ffffffffffffffffffffffffffffffffffffffff1681565b60085473ffffffffffffffffffffffffffffffffffffffff1681565b4284101561237757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f536f6c61724265616d3a20455850495245440000000000000000000000000000604482015290519081900360640190fd5b60035473ffffffffffffffffffffffffffffffffffffffff80891660008181526004602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958d166060860152608085018c905260a085019590955260c08085018b90528151808603909101815260e0850182528051908301207f19010000000000000000000000000000000000000000000000000000000000006101008601526101028501969096526101228085019690965280518085039096018652610142840180825286519683019690962095839052610162840180825286905260ff89166101828501526101a284018890526101c28401879052519193926101e2808201937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081019281900390910190855afa1580156124d8573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff81161580159061255357508873ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b6125be57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f536f6c61724265616d3a20494e56414c49445f5349474e415455524500000000604482015290519081900360640190fd5b6125c9898989612dd5565b505050505050505050565b600260209081526000928352604080842090915290825290205481565b600d5460011461266257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f536f6c61724265616d3a204c4f434b4544000000000000000000000000000000604482015290519081900360640190fd5b6000600d55600754604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516127d09273ffffffffffffffffffffffffffffffffffffffff16916370a08231916024808301926020929190829003018186803b1580156126d957600080fd5b505afa1580156126ed573d6000803e3d6000fd5b505050506040513d602081101561270357600080fd5b5051600854604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b15801561277657600080fd5b505afa15801561278a573d6000803e3d6000fd5b505050506040513d60208110156127a057600080fd5b50516009546dffffffffffffffffffffffffffff808216916e010000000000000000000000000000900416612b1f565b6001600d55565b604080518082018252601981527f7472616e7366657228616464726573732c75696e743235362900000000000000602091820152815173ffffffffffffffffffffffffffffffffffffffff85811660248301526044808301869052845180840390910181526064909201845291810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001781529251815160009460609489169392918291908083835b602083106128dd57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016128a0565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461293f576040519150601f19603f3d011682016040523d82523d6000602084013e612944565b606091505b5091509150818015612972575080511580612972575080806020019051602081101561296f57600080fd5b50515b6129dd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f536f6c61724265616d3a205452414e534645525f4641494c4544000000000000604482015290519081900360640190fd5b5050505050565b60006129ef3361137a565b15612a2157507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c612a24565b50335b90565b6000811580612a4257505080820282828281612a3f57fe5b04145b6110ee57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6d756c2d6f766572666c6f77000000000000000000000000604482015290519081900360640190fd5b808203828111156110ee57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f64732d6d6174682d7375622d756e646572666c6f770000000000000000000000604482015290519081900360640190fd5b6dffffffffffffffffffffffffffff8411801590612b4b57506dffffffffffffffffffffffffffff8311155b612bb657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f536f6c61724265616d3a204f564552464c4f5700000000000000000000000000604482015290519081900360640190fd5b60095463ffffffff428116917c010000000000000000000000000000000000000000000000000000000090048116820390811615801590612c0657506dffffffffffffffffffffffffffff841615155b8015612c2157506dffffffffffffffffffffffffffff831615155b15612ccb578063ffffffff16612c5e85612c3a8661324d565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1690613271565b600a80547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff929092169290920201905563ffffffff8116612c9e84612c3a8761324d565b600b80547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff92909216929092020190555b600980547fffffffffffffffffffffffffffffffffffff0000000000000000000000000000166dffffffffffffffffffffffffffff888116919091177fffffffff0000000000000000000000000000ffffffffffffffffffffffffffff166e0100000000000000000000000000008883168102919091177bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167c010000000000000000000000000000000000000000000000000000000063ffffffff871602179283905560408051848416815291909304909116602082015281517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1929181900390910190a1505050505050565b73ffffffffffffffffffffffffffffffffffffffff808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260016020526040902054612e749082612aad565b73ffffffffffffffffffffffffffffffffffffffff8085166000908152600160205260408082209390935590841681522054612eb090826132b2565b73ffffffffffffffffffffffffffffffffffffffff80841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600080600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b158015612f8457600080fd5b505afa158015612f98573d6000803e3d6000fd5b505050506040513d6020811015612fae57600080fd5b5051600c5473ffffffffffffffffffffffffffffffffffffffff821615801594509192509061307357801561306e576000612fff611a156dffffffffffffffffffffffffffff888116908816612a27565b9050600061300c83613087565b90508082111561306b57600061302e6130258484612aad565b60005490612a27565b9050600061304783613041866005612a27565b906132b2565b9050600081838161305457fe5b04905080156130675761306787826130d8565b5050505b50505b61307f565b801561307f576000600c555b505092915050565b600060038211156130ca575080600160028204015b818110156130c4578091506002818285816130b357fe5b0401816130bc57fe5b04905061309c565b506113c4565b81156113c457506001919050565b6000546130e590826132b2565b600090815573ffffffffffffffffffffffffffffffffffffffff831681526001602052604090205461311790826132b2565b73ffffffffffffffffffffffffffffffffffffffff831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b600081831061318b578161318d565b825b9392505050565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600160205260409020546131c49082612aad565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260016020526040812091909155546131f89082612aad565b600090815560408051838152905173ffffffffffffffffffffffffffffffffffffffff8516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef919081900360200190a35050565b6dffffffffffffffffffffffffffff166e0100000000000000000000000000000290565b60006dffffffffffffffffffffffffffff82167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8416816132aa57fe5b049392505050565b808201828110156110ee57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f77000000000000000000000000604482015290519081900360640190fd5b6040518060e0016040528060006dffffffffffffffffffffffffffff16815260200160006dffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081526020016000815260200160008152509056fe536f6c61724265616d3a20494e53554646494349454e545f4f55545055545f414d4f554e54536f6c61724265616d3a204d4554415f54584e535f414c52454144595f454e41424c4544536f6c61724265616d3a204d4554415f54584e535f414c52454144595f44495341424c4544536f6c61724265616d3a20494e53554646494349454e545f4c49515549444954595f4255524e4544536f6c61724265616d3a20494e53554646494349454e545f494e5055545f414d4f554e54536f6c61724265616d3a20494e53554646494349454e545f4c4951554944495459536f6c61724265616d3a20494e53554646494349454e545f4c49515549444954595f4d494e544544a26469706673582212205633bf08894a1555127933b66a917832a7a574d5267493968d4fc119070f54e764736f6c634300060c0033536f6c61724265616d3a204d4554415f54584e535f414c52454144595f454e41424c4544536f6c61724265616d3a204d4554415f54584e535f414c52454144595f44495341424c4544a2646970667358221220dd8b175bdcfeb768f53021e8351f2930930993c7e65dbffa5809285d74a76ca764736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c80635e07d17b11610097578063b0cb33fe11610066578063b0cb33fe14610250578063c9c6539614610283578063e6a43905146102be578063f46901ed146102f9576100f5565b80635e07d17b146101af5780636bd7c172146101e25780637cd07e4714610215578063a2e74af61461021d576100f5565b806321dd70e6116100d357806321dd70e61461015057806323cf311814610158578063574f2ba31461018d5780635855a25a146101a7576100f5565b8063017e7e58146100fa578063094b74151461012b5780631e3dd18b14610133575b600080fd5b61010261032c565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b610102610348565b6101026004803603602081101561014957600080fd5b5035610364565b610102610398565b61018b6004803603602081101561016e57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166103b4565b005b610195610481565b60408051918252519081900360200190f35b610195610487565b61018b600480360360208110156101c557600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610538565b61018b600480360360208110156101f857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610771565b6101026108c0565b61018b6004803603602081101561023357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166108dc565b61018b6004803603602081101561026657600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166109a9565b6101026004803603604081101561029957600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610bc5565b610102600480360360408110156102d457600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610ff9565b61018b6004803603602081101561030f57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661102c565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b6005818154811061037157fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60035473ffffffffffffffffffffffffffffffffffffffff1681565b60015473ffffffffffffffffffffffffffffffffffffffff16331461043a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f536f6c61724265616d3a20464f5242494444454e000000000000000000000000604482015290519081900360640190fd5b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60055490565b604051610496602082016110f9565b6020820181038252601f19601f820116604052506040516020018082805190602001908083835b602083106104fa57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016104bd565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012081565b60015473ffffffffffffffffffffffffffffffffffffffff1633146105be57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f536f6c61724265616d3a20464f5242494444454e000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff811661064057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f536f6c61724265616d3a20504149525f4e4f545f455849535453000000000000604482015290519081900360640190fd5b60008190508073ffffffffffffffffffffffffffffffffffffffff1663a8c95dc06040518163ffffffff1660e01b815260040160206040518083038186803b15801561068b57600080fd5b505afa15801561069f573d6000803e3d6000fd5b505050506040513d60208110156106b557600080fd5b50511561070d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806146de6024913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1663578bb42d6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561075557600080fd5b505af1158015610769573d6000803e3d6000fd5b505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff1633146107f757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f536f6c61724265616d3a20464f5242494444454e000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff811661087957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f536f6c61724265616d3a20494e56414c49445f41444452455353000000000000604482015290519081900360640190fd5b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60025473ffffffffffffffffffffffffffffffffffffffff1681565b60015473ffffffffffffffffffffffffffffffffffffffff16331461096257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f536f6c61724265616d3a20464f5242494444454e000000000000000000000000604482015290519081900360640190fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60015473ffffffffffffffffffffffffffffffffffffffff163314610a2f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f536f6c61724265616d3a20464f5242494444454e000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8116610ab157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f536f6c61724265616d3a20504149525f4e4f545f455849535453000000000000604482015290519081900360640190fd5b60008190508073ffffffffffffffffffffffffffffffffffffffff1663a8c95dc06040518163ffffffff1660e01b815260040160206040518083038186803b158015610afc57600080fd5b505afa158015610b10573d6000803e3d6000fd5b505050506040513d6020811015610b2657600080fd5b5051610b7d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806147026025913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1663083836406040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561075557600080fd5b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610c6257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f536f6c61724265616d3a204944454e544943414c5f4144445245535345530000604482015290519081900360640190fd5b6000808373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1610610c9f578385610ca2565b84845b909250905073ffffffffffffffffffffffffffffffffffffffff8216610d2957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f536f6c61724265616d3a205a45524f5f41444452455353000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff828116600090815260046020908152604080832085851684529091529020541615610dca57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f536f6c61724265616d3a20504149525f45584953545300000000000000000000604482015290519081900360640190fd5b606060405180602001610ddc906110f9565b6020820181038252601f19601f82011660405250905060008383604051602001808373ffffffffffffffffffffffffffffffffffffffff1660601b81526014018273ffffffffffffffffffffffffffffffffffffffff1660601b815260140192505050604051602081830303815290604052805190602001209050808251602084016000f594508473ffffffffffffffffffffffffffffffffffffffff1663485cc95585856040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b158015610eea57600080fd5b505af1158015610efe573d6000803e3d6000fd5b5050505073ffffffffffffffffffffffffffffffffffffffff84811660008181526004602081815260408084208987168086529083528185208054978d167fffffffffffffffffffffffff000000000000000000000000000000000000000098891681179091559383528185208686528352818520805488168517905560058054600181018255958190527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db090950180549097168417909655925483519283529082015281517f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9929181900390910190a35050505092915050565b600460209081526000928352604080842090915290825290205473ffffffffffffffffffffffffffffffffffffffff1681565b60015473ffffffffffffffffffffffffffffffffffffffff1633146110b257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f536f6c61724265616d3a20464f5242494444454e000000000000000000000000604482015290519081900360640190fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6135d7806111078339019056fe60806040526005805460ff60a01b191690556001600d5534801561002257600080fd5b50604080518082018252601281527129b7b630b92132b0b6902628102a37b5b2b760711b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527fb4fdaf01ee326634338de6f91bba9d1d19adcd068a294d0ed0b956eedce7081e818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c09091019092528151910120600355600680546001600160a01b031916331790556134ba8061011d6000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c80635a3d54931161010f578063a9059cbb116100a2578063d21220a711610071578063d21220a714610651578063d505accf14610659578063dd62ed3e146106b7578063fff6cae9146106f2576101e5565b8063a9059cbb146105d5578063ba9a7a561461060e578063bc25cf7714610616578063c45a015514610649576101e5565b80637ecebe00116100de5780637ecebe001461054657806389afcb441461057957806395d89b41146105c5578063a8c95dc0146105cd576101e5565b80635a3d5493146104d05780636a627842146104d857806370a082311461050b5780637464fc3d1461053e576101e5565b806323b872dd11610187578063485cc95511610156578063485cc95514610452578063572b6c051461048d578063578bb42d146104c05780635909c0d5146104c8576101e5565b806323b872dd146103e157806330adf81f14610424578063313ce5671461042c5780633644e5151461044a576101e5565b80630902f1ac116101c35780630902f1ac1461030a578063095ea7b3146103495780630dfe16811461039657806318160ddd146103c7576101e5565b8063022c0d9f146101ea57806306fdde03146102855780630838364014610302575b600080fd5b6102836004803603608081101561020057600080fd5b81359160208101359173ffffffffffffffffffffffffffffffffffffffff604083013516919081019060808101606082013564010000000081111561024457600080fd5b82018360208201111561025657600080fd5b8035906020019184600183028401116401000000008311171561027857600080fd5b5090925090506106fa565b005b61028d610ebe565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102c75781810151838201526020016102af565b50505050905090810190601f1680156102f45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610283610ef7565b610312611081565b604080516dffffffffffffffffffffffffffff948516815292909316602083015263ffffffff168183015290519081900360600190f35b6103826004803603604081101561035f57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356110d6565b604080519115158252519081900360200190f35b61039e6110f4565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6103cf611110565b60408051918252519081900360200190f35b610382600480360360608110156103f757600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060400135611116565b6103cf611272565b610434611296565b6040805160ff9092168252519081900360200190f35b6103cf61129b565b6102836004803603604081101561046857600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160200135166112a1565b610382600480360360208110156104a357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661137a565b6102836113c9565b6103cf61156b565b6103cf611571565b6103cf600480360360208110156104ee57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611577565b6103cf6004803603602081101561052157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611b9b565b6103cf611bad565b6103cf6004803603602081101561055c57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611bb3565b6105ac6004803603602081101561058f57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611bc5565b6040805192835260208301919091528051918290030190f35b61028d61206f565b6103826120a8565b610382600480360360408110156105eb57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356120c9565b6103cf6120dd565b6102836004803603602081101561062c57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166120e3565b61039e6122d0565b61039e6122ec565b610283600480360360e081101561066f57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c00135612308565b6103cf600480360360408110156106cd57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160200135166125d4565b6102836125f1565b600d5460011461076b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f536f6c61724265616d3a204c4f434b4544000000000000000000000000000000604482015290519081900360640190fd5b6000600d558415158061077e5750600084115b6107d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806133826025913960400191505060405180910390fd5b6107db613324565b6040518060e0016040528060006dffffffffffffffffffffffffffff16815260200160006dffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600081526020016000815250905061083f611081565b506dffffffffffffffffffffffffffff9081166020840152168082528610801561087c575080602001516dffffffffffffffffffffffffffff1685105b6108d1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602181526020018061343c6021913960400191505060405180910390fd5b601960c082015260075460085473ffffffffffffffffffffffffffffffffffffffff91821691908116908616821480159061093857508073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614155b6109a357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f536f6c61724265616d3a20494e56414c49445f544f0000000000000000000000604482015290519081900360640190fd5b87156109b4576109b482878a6127d7565b86156109c5576109c58187896127d7565b8315610a98578573ffffffffffffffffffffffffffffffffffffffff166310d1e85c6109ef6129e4565b8a8a89896040518663ffffffff1660e01b8152600401808673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b158015610a7f57600080fd5b505af1158015610a93573d6000803e3d6000fd5b505050505b604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff8416916370a08231916024808301926020929190829003018186803b158015610b0457600080fd5b505afa158015610b18573d6000803e3d6000fd5b505050506040513d6020811015610b2e57600080fd5b505160408085019190915280517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff8316916370a08231916024808301926020929190829003018186803b158015610ba357600080fd5b505afa158015610bb7573d6000803e3d6000fd5b505050506040513d6020811015610bcd57600080fd5b505160608401525050805160408201516dffffffffffffffffffffffffffff90911687900310610bfe576000610c1c565b8581600001516dffffffffffffffffffffffffffff16038160400151035b8160800181815250508481602001516dffffffffffffffffffffffffffff1603816060015111610c4d576000610c6b565b8481602001516dffffffffffffffffffffffffffff16038160600151035b60a08201526080810151151580610c86575060008160a00151115b610cdb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806134186024913960400191505060405180910390fd5b6000610d12610cfb8360c001518460800151612a2790919063ffffffff16565b6040840151610d0c90612710612a27565b90612aad565b90506000610d45610d348460c001518560a00151612a2790919063ffffffff16565b6060850151610d0c90612710612a27565b9050610d906305f5e100610d8a85602001516dffffffffffffffffffffffffffff1686600001516dffffffffffffffffffffffffffff16612a2790919063ffffffff16565b90612a27565b610d9a8383612a27565b1015610e0757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f536f6c61724265616d3a204b0000000000000000000000000000000000000000604482015290519081900360640190fd5b5050610e258160400151826060015183600001518460200151612b1f565b8373ffffffffffffffffffffffffffffffffffffffff16610e446129e4565b73ffffffffffffffffffffffffffffffffffffffff167fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d82283608001518460a001518a8a6040518085815260200184815260200183815260200182815260200194505050505060405180910390a350506001600d5550505050565b6040518060400160405280601281526020017f536f6c61724265616d204c5020546f6b656e000000000000000000000000000081525081565b60065473ffffffffffffffffffffffffffffffffffffffff16610f186129e4565b73ffffffffffffffffffffffffffffffffffffffff1614610f9a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f536f6c61724265616d3a20464f5242494444454e000000000000000000000000604482015290519081900360640190fd5b60055474010000000000000000000000000000000000000000900460ff1661100d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806133cb6025913960400191505060405180910390fd5b600580547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16905561103d6129e4565b73ffffffffffffffffffffffffffffffffffffffff167f096be170ccc67847e55535e7d8334b2afedd95805baedc160005addb9144745060405160405180910390a2565b6009546dffffffffffffffffffffffffffff808216926e0100000000000000000000000000008304909116917c0100000000000000000000000000000000000000000000000000000000900463ffffffff1690565b60006110ea6110e36129e4565b8484612dd5565b5060015b92915050565b60075473ffffffffffffffffffffffffffffffffffffffff1681565b60005481565b73ffffffffffffffffffffffffffffffffffffffff831660009081526002602052604081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90826111666129e4565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541461125d5773ffffffffffffffffffffffffffffffffffffffff84166000908152600260205260408120611207918491906111da6129e4565b73ffffffffffffffffffffffffffffffffffffffff16815260208101919091526040016000205490612aad565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600260205260408120906112356129e4565b73ffffffffffffffffffffffffffffffffffffffff1681526020810191909152604001600020555b611268848484612e44565b5060019392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60035481565b60065473ffffffffffffffffffffffffffffffffffffffff16331461132757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f536f6c61724265616d3a20464f5242494444454e000000000000000000000000604482015290519081900360640190fd5b6007805473ffffffffffffffffffffffffffffffffffffffff9384167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161790915560088054929093169116179055565b60055460009074010000000000000000000000000000000000000000900460ff1680156113c1575060055473ffffffffffffffffffffffffffffffffffffffff8381169116145b90505b919050565b60065473ffffffffffffffffffffffffffffffffffffffff166113ea6129e4565b73ffffffffffffffffffffffffffffffffffffffff161461146c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f536f6c61724265616d3a20464f5242494444454e000000000000000000000000604482015290519081900360640190fd5b60055474010000000000000000000000000000000000000000900460ff16156114e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806133a76024913960400191505060405180910390fd5b600580547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001790556115276129e4565b73ffffffffffffffffffffffffffffffffffffffff167f92e4c08d47b71e8dc051232b8e475ec296489a67a4ba5cca88ff20fb6ac499e660405160405180910390a2565b600a5481565b600b5481565b6000600d546001146115ea57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f536f6c61724265616d3a204c4f434b4544000000000000000000000000000000604482015290519081900360640190fd5b6000600d819055806115fa611081565b50600754604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905193955091935060009273ffffffffffffffffffffffffffffffffffffffff909116916370a08231916024808301926020929190829003018186803b15801561167457600080fd5b505afa158015611688573d6000803e3d6000fd5b505050506040513d602081101561169e57600080fd5b5051600854604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905192935060009273ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b15801561171757600080fd5b505afa15801561172b573d6000803e3d6000fd5b505050506040513d602081101561174157600080fd5b505190506000611761836dffffffffffffffffffffffffffff8716612aad565b9050600061177f836dffffffffffffffffffffffffffff8716612aad565b9050600061178d8787612f19565b60005490915080611a2f57600654604080517f7cd07e47000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff1691637cd07e47916004808301926020929190829003018186803b15801561180357600080fd5b505afa158015611817573d6000803e3d6000fd5b505050506040513d602081101561182d57600080fd5b5051905073ffffffffffffffffffffffffffffffffffffffff81166118506129e4565b73ffffffffffffffffffffffffffffffffffffffff16141561197f578073ffffffffffffffffffffffffffffffffffffffff166340dc0e376040518163ffffffff1660e01b815260040160206040518083038186803b1580156118b257600080fd5b505afa1580156118c6573d6000803e3d6000fd5b505050506040513d60208110156118dc57600080fd5b50519950891580159061190f57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8a14155b61197a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4261642064657369726564206c69717569646974790000000000000000000000604482015290519081900360640190fd5b611a29565b73ffffffffffffffffffffffffffffffffffffffff811615611a0257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d757374206e6f742068617665206d69677261746f7200000000000000000000604482015290519081900360640190fd5b611a1a6103e8610d0c611a158888612a27565b613087565b9950611a2960006103e86130d8565b50611a80565b611a7d6dffffffffffffffffffffffffffff8916611a4d8684612a27565b81611a5457fe5b046dffffffffffffffffffffffffffff8916611a708685612a27565b81611a7757fe5b0461317c565b98505b60008911611ad9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602881526020018061345d6028913960400191505060405180910390fd5b611ae38a8a6130d8565b611aef86868a8a612b1f565b8115611b2b57600954611b27906dffffffffffffffffffffffffffff808216916e010000000000000000000000000000900416612a27565b600c555b611b336129e4565b73ffffffffffffffffffffffffffffffffffffffff167f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f8585604051808381526020018281526020019250505060405180910390a250506001600d5550949695505050505050565b60016020526000908152604090205481565b600c5481565b60046020526000908152604090205481565b600080600d54600114611c3957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f536f6c61724265616d3a204c4f434b4544000000000000000000000000000000604482015290519081900360640190fd5b6000600d81905580611c49611081565b50600754600854604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905194965092945073ffffffffffffffffffffffffffffffffffffffff9182169391169160009184916370a08231916024808301926020929190829003018186803b158015611ccb57600080fd5b505afa158015611cdf573d6000803e3d6000fd5b505050506040513d6020811015611cf557600080fd5b5051604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905191925060009173ffffffffffffffffffffffffffffffffffffffff8516916370a08231916024808301926020929190829003018186803b158015611d6957600080fd5b505afa158015611d7d573d6000803e3d6000fd5b505050506040513d6020811015611d9357600080fd5b505130600090815260016020526040812054919250611db28888612f19565b60005490915080611dc38487612a27565b81611dca57fe5b049a5080611dd88486612a27565b81611ddf57fe5b04995060008b118015611df2575060008a115b611e47576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001806133f06028913960400191505060405180910390fd5b611e513084613194565b611e5c878d8d6127d7565b611e67868d8c6127d7565b604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff8916916370a08231916024808301926020929190829003018186803b158015611ed357600080fd5b505afa158015611ee7573d6000803e3d6000fd5b505050506040513d6020811015611efd57600080fd5b5051604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905191965073ffffffffffffffffffffffffffffffffffffffff8816916370a0823191602480820192602092909190829003018186803b158015611f6f57600080fd5b505afa158015611f83573d6000803e3d6000fd5b505050506040513d6020811015611f9957600080fd5b50519350611fa985858b8b612b1f565b8115611fe557600954611fe1906dffffffffffffffffffffffffffff808216916e010000000000000000000000000000900416612a27565b600c555b8b73ffffffffffffffffffffffffffffffffffffffff166120046129e4565b73ffffffffffffffffffffffffffffffffffffffff167fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d819364968d8d604051808381526020018281526020019250505060405180910390a35050505050505050506001600d81905550915091565b6040518060400160405280600381526020017f534c50000000000000000000000000000000000000000000000000000000000081525081565b60055474010000000000000000000000000000000000000000900460ff1681565b60006110ea6120d66129e4565b8484612e44565b6103e881565b600d5460011461215457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f536f6c61724265616d3a204c4f434b4544000000000000000000000000000000604482015290519081900360640190fd5b6000600d55600754600854600954604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff948516949093169261222a9285928792612225926dffffffffffffffffffffffffffff169185916370a0823191602480820192602092909190829003018186803b1580156121f357600080fd5b505afa158015612207573d6000803e3d6000fd5b505050506040513d602081101561221d57600080fd5b505190612aad565b6127d7565b6122c681846122256009600e9054906101000a90046dffffffffffffffffffffffffffff166dffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156121f357600080fd5b50506001600d5550565b60065473ffffffffffffffffffffffffffffffffffffffff1681565b60085473ffffffffffffffffffffffffffffffffffffffff1681565b4284101561237757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f536f6c61724265616d3a20455850495245440000000000000000000000000000604482015290519081900360640190fd5b60035473ffffffffffffffffffffffffffffffffffffffff80891660008181526004602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958d166060860152608085018c905260a085019590955260c08085018b90528151808603909101815260e0850182528051908301207f19010000000000000000000000000000000000000000000000000000000000006101008601526101028501969096526101228085019690965280518085039096018652610142840180825286519683019690962095839052610162840180825286905260ff89166101828501526101a284018890526101c28401879052519193926101e2808201937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081019281900390910190855afa1580156124d8573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff81161580159061255357508873ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b6125be57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f536f6c61724265616d3a20494e56414c49445f5349474e415455524500000000604482015290519081900360640190fd5b6125c9898989612dd5565b505050505050505050565b600260209081526000928352604080842090915290825290205481565b600d5460011461266257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f536f6c61724265616d3a204c4f434b4544000000000000000000000000000000604482015290519081900360640190fd5b6000600d55600754604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516127d09273ffffffffffffffffffffffffffffffffffffffff16916370a08231916024808301926020929190829003018186803b1580156126d957600080fd5b505afa1580156126ed573d6000803e3d6000fd5b505050506040513d602081101561270357600080fd5b5051600854604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b15801561277657600080fd5b505afa15801561278a573d6000803e3d6000fd5b505050506040513d60208110156127a057600080fd5b50516009546dffffffffffffffffffffffffffff808216916e010000000000000000000000000000900416612b1f565b6001600d55565b604080518082018252601981527f7472616e7366657228616464726573732c75696e743235362900000000000000602091820152815173ffffffffffffffffffffffffffffffffffffffff85811660248301526044808301869052845180840390910181526064909201845291810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001781529251815160009460609489169392918291908083835b602083106128dd57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016128a0565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461293f576040519150601f19603f3d011682016040523d82523d6000602084013e612944565b606091505b5091509150818015612972575080511580612972575080806020019051602081101561296f57600080fd5b50515b6129dd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f536f6c61724265616d3a205452414e534645525f4641494c4544000000000000604482015290519081900360640190fd5b5050505050565b60006129ef3361137a565b15612a2157507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c612a24565b50335b90565b6000811580612a4257505080820282828281612a3f57fe5b04145b6110ee57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6d756c2d6f766572666c6f77000000000000000000000000604482015290519081900360640190fd5b808203828111156110ee57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f64732d6d6174682d7375622d756e646572666c6f770000000000000000000000604482015290519081900360640190fd5b6dffffffffffffffffffffffffffff8411801590612b4b57506dffffffffffffffffffffffffffff8311155b612bb657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f536f6c61724265616d3a204f564552464c4f5700000000000000000000000000604482015290519081900360640190fd5b60095463ffffffff428116917c010000000000000000000000000000000000000000000000000000000090048116820390811615801590612c0657506dffffffffffffffffffffffffffff841615155b8015612c2157506dffffffffffffffffffffffffffff831615155b15612ccb578063ffffffff16612c5e85612c3a8661324d565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1690613271565b600a80547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff929092169290920201905563ffffffff8116612c9e84612c3a8761324d565b600b80547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff92909216929092020190555b600980547fffffffffffffffffffffffffffffffffffff0000000000000000000000000000166dffffffffffffffffffffffffffff888116919091177fffffffff0000000000000000000000000000ffffffffffffffffffffffffffff166e0100000000000000000000000000008883168102919091177bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167c010000000000000000000000000000000000000000000000000000000063ffffffff871602179283905560408051848416815291909304909116602082015281517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1929181900390910190a1505050505050565b73ffffffffffffffffffffffffffffffffffffffff808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260016020526040902054612e749082612aad565b73ffffffffffffffffffffffffffffffffffffffff8085166000908152600160205260408082209390935590841681522054612eb090826132b2565b73ffffffffffffffffffffffffffffffffffffffff80841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600080600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b158015612f8457600080fd5b505afa158015612f98573d6000803e3d6000fd5b505050506040513d6020811015612fae57600080fd5b5051600c5473ffffffffffffffffffffffffffffffffffffffff821615801594509192509061307357801561306e576000612fff611a156dffffffffffffffffffffffffffff888116908816612a27565b9050600061300c83613087565b90508082111561306b57600061302e6130258484612aad565b60005490612a27565b9050600061304783613041866005612a27565b906132b2565b9050600081838161305457fe5b04905080156130675761306787826130d8565b5050505b50505b61307f565b801561307f576000600c555b505092915050565b600060038211156130ca575080600160028204015b818110156130c4578091506002818285816130b357fe5b0401816130bc57fe5b04905061309c565b506113c4565b81156113c457506001919050565b6000546130e590826132b2565b600090815573ffffffffffffffffffffffffffffffffffffffff831681526001602052604090205461311790826132b2565b73ffffffffffffffffffffffffffffffffffffffff831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b600081831061318b578161318d565b825b9392505050565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600160205260409020546131c49082612aad565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260016020526040812091909155546131f89082612aad565b600090815560408051838152905173ffffffffffffffffffffffffffffffffffffffff8516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef919081900360200190a35050565b6dffffffffffffffffffffffffffff166e0100000000000000000000000000000290565b60006dffffffffffffffffffffffffffff82167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8416816132aa57fe5b049392505050565b808201828110156110ee57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f77000000000000000000000000604482015290519081900360640190fd5b6040518060e0016040528060006dffffffffffffffffffffffffffff16815260200160006dffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081526020016000815260200160008152509056fe536f6c61724265616d3a20494e53554646494349454e545f4f55545055545f414d4f554e54536f6c61724265616d3a204d4554415f54584e535f414c52454144595f454e41424c4544536f6c61724265616d3a204d4554415f54584e535f414c52454144595f44495341424c4544536f6c61724265616d3a20494e53554646494349454e545f4c49515549444954595f4255524e4544536f6c61724265616d3a20494e53554646494349454e545f494e5055545f414d4f554e54536f6c61724265616d3a20494e53554646494349454e545f4c4951554944495459536f6c61724265616d3a20494e53554646494349454e545f4c49515549444954595f4d494e544544a26469706673582212205633bf08894a1555127933b66a917832a7a574d5267493968d4fc119070f54e764736f6c634300060c0033536f6c61724265616d3a204d4554415f54584e535f414c52454144595f454e41424c4544536f6c61724265616d3a204d4554415f54584e535f414c52454144595f44495341424c4544a2646970667358221220dd8b175bdcfeb768f53021e8351f2930930993c7e65dbffa5809285d74a76ca764736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 477,
        "contract": "contracts/uniswapv2/SolarFactory.sol:SolarFactory",
        "label": "feeTo",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 480,
        "contract": "contracts/uniswapv2/SolarFactory.sol:SolarFactory",
        "label": "feeToSetter",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 483,
        "contract": "contracts/uniswapv2/SolarFactory.sol:SolarFactory",
        "label": "migrator",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 486,
        "contract": "contracts/uniswapv2/SolarFactory.sol:SolarFactory",
        "label": "auro",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 493,
        "contract": "contracts/uniswapv2/SolarFactory.sol:SolarFactory",
        "label": "getPair",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 497,
        "contract": "contracts/uniswapv2/SolarFactory.sol:SolarFactory",
        "label": "allPairs",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      }
    }
  }
}